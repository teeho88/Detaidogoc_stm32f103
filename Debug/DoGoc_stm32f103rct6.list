
DoGoc_stm32f103rct6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008124  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08008310  08008310  00018310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800874c  0800874c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800874c  0800874c  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800874c  0800874c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800874c  0800874c  0001874c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008754  08008754  00018754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  200001f0  08008948  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08008948  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef38  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002603  00000000  00000000  0002f151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00031758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  000325f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df46  00000000  00000000  00033390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff7f  00000000  00000000  000512d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2d2b  00000000  00000000  00061255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103f80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e54  00000000  00000000  00103fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001f0 	.word	0x200001f0
 8000204:	00000000 	.word	0x00000000
 8000208:	080082f4 	.word	0x080082f4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f4 	.word	0x200001f4
 8000224:	080082f4 	.word	0x080082f4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc0:	d2ed      	bcs.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6e:	2afd      	cmp	r2, #253	; 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	; 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	; 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	; 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__gesf2>:
 80010bc:	f04f 3cff 	mov.w	ip, #4294967295
 80010c0:	e006      	b.n	80010d0 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__lesf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	e002      	b.n	80010d0 <__cmpsf2+0x4>
 80010ca:	bf00      	nop

080010cc <__cmpsf2>:
 80010cc:	f04f 0c01 	mov.w	ip, #1
 80010d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	bf18      	it	ne
 80010e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010e6:	d011      	beq.n	800110c <__cmpsf2+0x40>
 80010e8:	b001      	add	sp, #4
 80010ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ee:	bf18      	it	ne
 80010f0:	ea90 0f01 	teqne	r0, r1
 80010f4:	bf58      	it	pl
 80010f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010fa:	bf88      	it	hi
 80010fc:	17c8      	asrhi	r0, r1, #31
 80010fe:	bf38      	it	cc
 8001100:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001104:	bf18      	it	ne
 8001106:	f040 0001 	orrne.w	r0, r0, #1
 800110a:	4770      	bx	lr
 800110c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001110:	d102      	bne.n	8001118 <__cmpsf2+0x4c>
 8001112:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001116:	d105      	bne.n	8001124 <__cmpsf2+0x58>
 8001118:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800111c:	d1e4      	bne.n	80010e8 <__cmpsf2+0x1c>
 800111e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001122:	d0e1      	beq.n	80010e8 <__cmpsf2+0x1c>
 8001124:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <__aeabi_cfrcmple>:
 800112c:	4684      	mov	ip, r0
 800112e:	4608      	mov	r0, r1
 8001130:	4661      	mov	r1, ip
 8001132:	e7ff      	b.n	8001134 <__aeabi_cfcmpeq>

08001134 <__aeabi_cfcmpeq>:
 8001134:	b50f      	push	{r0, r1, r2, r3, lr}
 8001136:	f7ff ffc9 	bl	80010cc <__cmpsf2>
 800113a:	2800      	cmp	r0, #0
 800113c:	bf48      	it	mi
 800113e:	f110 0f00 	cmnmi.w	r0, #0
 8001142:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001144 <__aeabi_fcmpeq>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff fff4 	bl	8001134 <__aeabi_cfcmpeq>
 800114c:	bf0c      	ite	eq
 800114e:	2001      	moveq	r0, #1
 8001150:	2000      	movne	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmplt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffea 	bl	8001134 <__aeabi_cfcmpeq>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_fcmple>:
 800116c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001170:	f7ff ffe0 	bl	8001134 <__aeabi_cfcmpeq>
 8001174:	bf94      	ite	ls
 8001176:	2001      	movls	r0, #1
 8001178:	2000      	movhi	r0, #0
 800117a:	f85d fb08 	ldr.w	pc, [sp], #8
 800117e:	bf00      	nop

08001180 <__aeabi_fcmpge>:
 8001180:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001184:	f7ff ffd2 	bl	800112c <__aeabi_cfrcmple>
 8001188:	bf94      	ite	ls
 800118a:	2001      	movls	r0, #1
 800118c:	2000      	movhi	r0, #0
 800118e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001192:	bf00      	nop

08001194 <__aeabi_fcmpgt>:
 8001194:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001198:	f7ff ffc8 	bl	800112c <__aeabi_cfrcmple>
 800119c:	bf34      	ite	cc
 800119e:	2001      	movcc	r0, #1
 80011a0:	2000      	movcs	r0, #0
 80011a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a6:	bf00      	nop

080011a8 <IMU50_SendCommand>:
uint8_t READ_QUATERNION[5] = {0x77,0x04,0x00,0x57,0x5B};
uint8_t READ_ALL[5] = {0x77,0x04,0x00,0x59,0x5D};
uint8_t SAVE_SETTING[5] = {0x77,0x04,0x00,0x0A,0x0E};

void IMU50_SendCommand(uint8_t *cmd, uint16_t len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&MyUart,cmd, len, 100);
 80011b4:	887a      	ldrh	r2, [r7, #2]
 80011b6:	2364      	movs	r3, #100	; 0x64
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	4803      	ldr	r0, [pc, #12]	; (80011c8 <IMU50_SendCommand+0x20>)
 80011bc:	f003 fbc1 	bl	8004942 <HAL_UART_Transmit>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000020c 	.word	0x2000020c
 80011cc:	00000000 	.word	0x00000000

080011d0 <IMU50_Respond_format>:

float IMU50_Respond_format(uint8_t *data, int type)
{
 80011d0:	b5b0      	push	{r4, r5, r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	float x = 0;
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
	if( type == TYPE_QUAT)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	f040 8098 	bne.w	8001318 <IMU50_Respond_format+0x148>
	{
		x = (data[0] & 0x0f) + (data[1] >> 4) * 0.1 + (data[1] & 0x0f) * 0.01
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f973 	bl	80004dc <__aeabi_i2d>
 80011f6:	4604      	mov	r4, r0
 80011f8:	460d      	mov	r5, r1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3301      	adds	r3, #1
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f969 	bl	80004dc <__aeabi_i2d>
 800120a:	a3af      	add	r3, pc, #700	; (adr r3, 80014c8 <IMU50_Respond_format+0x2f8>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f7ff f9ce 	bl	80005b0 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff f812 	bl	8000244 <__adddf3>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4614      	mov	r4, r2
 8001226:	461d      	mov	r5, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f952 	bl	80004dc <__aeabi_i2d>
 8001238:	a3a5      	add	r3, pc, #660	; (adr r3, 80014d0 <IMU50_Respond_format+0x300>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff f9b7 	bl	80005b0 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4620      	mov	r0, r4
 8001248:	4629      	mov	r1, r5
 800124a:	f7fe fffb 	bl	8000244 <__adddf3>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4614      	mov	r4, r2
 8001254:	461d      	mov	r5, r3
				+ (data[2] >> 4) * 0.001 + (data[2] & 0x0f) * 0.0001
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3302      	adds	r3, #2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	b2db      	uxtb	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f93b 	bl	80004dc <__aeabi_i2d>
 8001266:	a39c      	add	r3, pc, #624	; (adr r3, 80014d8 <IMU50_Respond_format+0x308>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff f9a0 	bl	80005b0 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4620      	mov	r0, r4
 8001276:	4629      	mov	r1, r5
 8001278:	f7fe ffe4 	bl	8000244 <__adddf3>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4614      	mov	r4, r2
 8001282:	461d      	mov	r5, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3302      	adds	r3, #2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f924 	bl	80004dc <__aeabi_i2d>
 8001294:	a392      	add	r3, pc, #584	; (adr r3, 80014e0 <IMU50_Respond_format+0x310>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff f989 	bl	80005b0 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4620      	mov	r0, r4
 80012a4:	4629      	mov	r1, r5
 80012a6:	f7fe ffcd 	bl	8000244 <__adddf3>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4614      	mov	r4, r2
 80012b0:	461d      	mov	r5, r3
				+ (data[3] >> 4) * 0.00001 + (data[3] & 0x0f) * 0.000001;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3303      	adds	r3, #3
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f90d 	bl	80004dc <__aeabi_i2d>
 80012c2:	a389      	add	r3, pc, #548	; (adr r3, 80014e8 <IMU50_Respond_format+0x318>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f972 	bl	80005b0 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4620      	mov	r0, r4
 80012d2:	4629      	mov	r1, r5
 80012d4:	f7fe ffb6 	bl	8000244 <__adddf3>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4614      	mov	r4, r2
 80012de:	461d      	mov	r5, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3303      	adds	r3, #3
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f8f6 	bl	80004dc <__aeabi_i2d>
 80012f0:	a37f      	add	r3, pc, #508	; (adr r3, 80014f0 <IMU50_Respond_format+0x320>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	f7ff f95b 	bl	80005b0 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7fe ff9f 	bl	8000244 <__adddf3>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
		x = (data[0] & 0x0f) + (data[1] >> 4) * 0.1 + (data[1] & 0x0f) * 0.01
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff fc27 	bl	8000b60 <__aeabi_d2f>
 8001312:	4603      	mov	r3, r0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	e0bb      	b.n	8001490 <IMU50_Respond_format+0x2c0>
	}
	else if(type == TYPE_ACCEL)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d169      	bne.n	80013f2 <IMU50_Respond_format+0x222>
	{
		x = (data[0] & 0x0f) + (data[1] >> 4) * 0.1 + (data[1] & 0x0f) * 0.01
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f8d8 	bl	80004dc <__aeabi_i2d>
 800132c:	4604      	mov	r4, r0
 800132e:	460d      	mov	r5, r1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3301      	adds	r3, #1
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f8ce 	bl	80004dc <__aeabi_i2d>
 8001340:	a361      	add	r3, pc, #388	; (adr r3, 80014c8 <IMU50_Respond_format+0x2f8>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	f7ff f933 	bl	80005b0 <__aeabi_dmul>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4620      	mov	r0, r4
 8001350:	4629      	mov	r1, r5
 8001352:	f7fe ff77 	bl	8000244 <__adddf3>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4614      	mov	r4, r2
 800135c:	461d      	mov	r5, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3301      	adds	r3, #1
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f8b7 	bl	80004dc <__aeabi_i2d>
 800136e:	a358      	add	r3, pc, #352	; (adr r3, 80014d0 <IMU50_Respond_format+0x300>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f91c 	bl	80005b0 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7fe ff60 	bl	8000244 <__adddf3>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4614      	mov	r4, r2
 800138a:	461d      	mov	r5, r3
				+ (data[2] >> 4) * 0.001 + (data[2] & 0x0f) * 0.0001;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3302      	adds	r3, #2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8a0 	bl	80004dc <__aeabi_i2d>
 800139c:	a34e      	add	r3, pc, #312	; (adr r3, 80014d8 <IMU50_Respond_format+0x308>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff f905 	bl	80005b0 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4620      	mov	r0, r4
 80013ac:	4629      	mov	r1, r5
 80013ae:	f7fe ff49 	bl	8000244 <__adddf3>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4614      	mov	r4, r2
 80013b8:	461d      	mov	r5, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3302      	adds	r3, #2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f889 	bl	80004dc <__aeabi_i2d>
 80013ca:	a345      	add	r3, pc, #276	; (adr r3, 80014e0 <IMU50_Respond_format+0x310>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7ff f8ee 	bl	80005b0 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7fe ff32 	bl	8000244 <__adddf3>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
		x = (data[0] & 0x0f) + (data[1] >> 4) * 0.1 + (data[1] & 0x0f) * 0.01
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fbba 	bl	8000b60 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	e04e      	b.n	8001490 <IMU50_Respond_format+0x2c0>
	}
	else
	{
		x = (data[0] & 0x0f) * 100 + (data[1] >> 4) * 10 + (data[1] & 0x0f)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	2264      	movs	r2, #100	; 0x64
 80013fc:	fb03 f202 	mul.w	r2, r3, r2
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3301      	adds	r3, #1
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4619      	mov	r1, r3
 800140c:	460b      	mov	r3, r1
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	441a      	add	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3301      	adds	r3, #1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	4413      	add	r3, r2
						+ (data[2] >> 4) * 0.1 + (data[2] & 0x0f) * 0.01;
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f85a 	bl	80004dc <__aeabi_i2d>
 8001428:	4604      	mov	r4, r0
 800142a:	460d      	mov	r5, r1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3302      	adds	r3, #2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f850 	bl	80004dc <__aeabi_i2d>
 800143c:	a322      	add	r3, pc, #136	; (adr r3, 80014c8 <IMU50_Respond_format+0x2f8>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f8b5 	bl	80005b0 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4620      	mov	r0, r4
 800144c:	4629      	mov	r1, r5
 800144e:	f7fe fef9 	bl	8000244 <__adddf3>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4614      	mov	r4, r2
 8001458:	461d      	mov	r5, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3302      	adds	r3, #2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f839 	bl	80004dc <__aeabi_i2d>
 800146a:	a319      	add	r3, pc, #100	; (adr r3, 80014d0 <IMU50_Respond_format+0x300>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f89e 	bl	80005b0 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7fe fee2 	bl	8000244 <__adddf3>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
		x = (data[0] & 0x0f) * 100 + (data[1] >> 4) * 10 + (data[1] & 0x0f)
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fb6a 	bl	8000b60 <__aeabi_d2f>
 800148c:	4603      	mov	r3, r0
 800148e:	60fb      	str	r3, [r7, #12]
	}
	x = x * (-2 * (data[0] >> 4) + 1);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	091b      	lsrs	r3, r3, #4
 8001496:	b2db      	uxtb	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	4613      	mov	r3, r2
 800149c:	07db      	lsls	r3, r3, #31
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	3301      	adds	r3, #1
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fc65 	bl	8000d74 <__aeabi_i2f>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4619      	mov	r1, r3
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f7ff fcb4 	bl	8000e1c <__aeabi_fmul>
 80014b4:	4603      	mov	r3, r0
 80014b6:	60fb      	str	r3, [r7, #12]
	return x;
 80014b8:	68fb      	ldr	r3, [r7, #12]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bdb0      	pop	{r4, r5, r7, pc}
 80014c2:	bf00      	nop
 80014c4:	f3af 8000 	nop.w
 80014c8:	9999999a 	.word	0x9999999a
 80014cc:	3fb99999 	.word	0x3fb99999
 80014d0:	47ae147b 	.word	0x47ae147b
 80014d4:	3f847ae1 	.word	0x3f847ae1
 80014d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80014dc:	3f50624d 	.word	0x3f50624d
 80014e0:	eb1c432d 	.word	0xeb1c432d
 80014e4:	3f1a36e2 	.word	0x3f1a36e2
 80014e8:	88e368f1 	.word	0x88e368f1
 80014ec:	3ee4f8b5 	.word	0x3ee4f8b5
 80014f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80014f4:	3eb0c6f7 	.word	0x3eb0c6f7

080014f8 <IMU50_Init>:


void IMU50_Init(UART_HandleTypeDef *huart, uint8_t out_freq, uint8_t out_mode, uint8_t *inBuff, uint16_t len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	72fb      	strb	r3, [r7, #11]
 8001506:	4613      	mov	r3, r2
 8001508:	72bb      	strb	r3, [r7, #10]
    uint8_t SET_OUT_FREQ[6] = {0x77,0x05,0x00,0x0C,out_freq,0x11};
 800150a:	2377      	movs	r3, #119	; 0x77
 800150c:	763b      	strb	r3, [r7, #24]
 800150e:	2305      	movs	r3, #5
 8001510:	767b      	strb	r3, [r7, #25]
 8001512:	2300      	movs	r3, #0
 8001514:	76bb      	strb	r3, [r7, #26]
 8001516:	230c      	movs	r3, #12
 8001518:	76fb      	strb	r3, [r7, #27]
 800151a:	7afb      	ldrb	r3, [r7, #11]
 800151c:	773b      	strb	r3, [r7, #28]
 800151e:	2311      	movs	r3, #17
 8001520:	777b      	strb	r3, [r7, #29]
    uint8_t SET_AUTO_OUT[6] = {0x77,0x05,0x00,0x56,out_mode,0x5B};
 8001522:	2377      	movs	r3, #119	; 0x77
 8001524:	743b      	strb	r3, [r7, #16]
 8001526:	2305      	movs	r3, #5
 8001528:	747b      	strb	r3, [r7, #17]
 800152a:	2300      	movs	r3, #0
 800152c:	74bb      	strb	r3, [r7, #18]
 800152e:	2356      	movs	r3, #86	; 0x56
 8001530:	74fb      	strb	r3, [r7, #19]
 8001532:	7abb      	ldrb	r3, [r7, #10]
 8001534:	753b      	strb	r3, [r7, #20]
 8001536:	235b      	movs	r3, #91	; 0x5b
 8001538:	757b      	strb	r3, [r7, #21]
	respond  = inBuff;
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <IMU50_Init+0x84>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6013      	str	r3, [r2, #0]
	lenBuffer = len;
 8001540:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <IMU50_Init+0x88>)
 8001542:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001544:	8013      	strh	r3, [r2, #0]
	memcpy(&MyUart,huart,sizeof(*huart));
 8001546:	2244      	movs	r2, #68	; 0x44
 8001548:	68f9      	ldr	r1, [r7, #12]
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <IMU50_Init+0x8c>)
 800154c:	f004 f9bc 	bl	80058c8 <memcpy>
	IMU50_SendCommand(SET_OUT_FREQ,6);
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	2106      	movs	r1, #6
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fe26 	bl	80011a8 <IMU50_SendCommand>
	HAL_Delay(100);
 800155c:	2064      	movs	r0, #100	; 0x64
 800155e:	f000 ff37 	bl	80023d0 <HAL_Delay>
	IMU50_SendCommand(SET_AUTO_OUT,6);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	2106      	movs	r1, #6
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fe1d 	bl	80011a8 <IMU50_SendCommand>
	HAL_Delay(100);
 800156e:	2064      	movs	r0, #100	; 0x64
 8001570:	f000 ff2e 	bl	80023d0 <HAL_Delay>
}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000250 	.word	0x20000250
 8001580:	20000254 	.word	0x20000254
 8001584:	2000020c 	.word	0x2000020c

08001588 <_ZN6KalmanC1Ef>:
 *      Author: Teeho
 */

#include <Kalman_cpp.h>

Kalman::Kalman(float z0)
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <_ZN6KalmanC1Ef+0x30>)
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <_ZN6KalmanC1Ef+0x34>)
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <_ZN6KalmanC1Ef+0x38>)
 80015a2:	609a      	str	r2, [r3, #8]
{
	x = z0;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	60da      	str	r2, [r3, #12]
}
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	3e051eb8 	.word	0x3e051eb8
 80015bc:	3dcccccd 	.word	0x3dcccccd
 80015c0:	447a0000 	.word	0x447a0000

080015c4 <_ZN6Kalman6updateEf>:

float Kalman::update(float z)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
	float D_ = D + Q;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4619      	mov	r1, r3
 80015d8:	4610      	mov	r0, r2
 80015da:	f7ff fb17 	bl	8000c0c <__addsf3>
 80015de:	4603      	mov	r3, r0
 80015e0:	60fb      	str	r3, [r7, #12]
	float K = D_ / (D_ + R);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	68f9      	ldr	r1, [r7, #12]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fb0f 	bl	8000c0c <__addsf3>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4619      	mov	r1, r3
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff fcc6 	bl	8000f84 <__aeabi_fdiv>
 80015f8:	4603      	mov	r3, r0
 80015fa:	60bb      	str	r3, [r7, #8]
	x = x + K * (z - x);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68dc      	ldr	r4, [r3, #12]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4619      	mov	r1, r3
 8001606:	6838      	ldr	r0, [r7, #0]
 8001608:	f7ff fafe 	bl	8000c08 <__aeabi_fsub>
 800160c:	4603      	mov	r3, r0
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fc03 	bl	8000e1c <__aeabi_fmul>
 8001616:	4603      	mov	r3, r0
 8001618:	4619      	mov	r1, r3
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff faf6 	bl	8000c0c <__addsf3>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	60da      	str	r2, [r3, #12]
	D = (1 - K) * D_;
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800162e:	f7ff faeb 	bl	8000c08 <__aeabi_fsub>
 8001632:	4603      	mov	r3, r0
 8001634:	68f9      	ldr	r1, [r7, #12]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fbf0 	bl	8000e1c <__aeabi_fmul>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
	return x;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	bd90      	pop	{r4, r7, pc}

08001650 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	6839      	ldr	r1, [r7, #0]
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f003 ff71 	bl	8005544 <atan2f>
 8001662:	4603      	mov	r3, r0
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a26      	ldr	r2, [pc, #152]	; (8001718 <HAL_UARTEx_RxEventCallback+0xac>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d130      	bne.n	80016e4 <HAL_UARTEx_RxEventCallback+0x78>
	{
		memset(ImuData,0,BUFFER_SIZE_1);
 8001682:	2232      	movs	r2, #50	; 0x32
 8001684:	2100      	movs	r1, #0
 8001686:	4825      	ldr	r0, [pc, #148]	; (800171c <HAL_UARTEx_RxEventCallback+0xb0>)
 8001688:	f004 f92c 	bl	80058e4 <memset>
		memcpy(ImuData,buffUART1,Size);
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	461a      	mov	r2, r3
 8001690:	4923      	ldr	r1, [pc, #140]	; (8001720 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001692:	4822      	ldr	r0, [pc, #136]	; (800171c <HAL_UARTEx_RxEventCallback+0xb0>)
 8001694:	f004 f918 	bl	80058c8 <memcpy>
		if (buffUART1[0] == 0x77)
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <HAL_UARTEx_RxEventCallback+0xb4>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b77      	cmp	r3, #119	; 0x77
 800169e:	d11c      	bne.n	80016da <HAL_UARTEx_RxEventCallback+0x6e>
		{
			if (buffUART1[3] == 0x50) {
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <HAL_UARTEx_RxEventCallback+0xb4>)
 80016a2:	78db      	ldrb	r3, [r3, #3]
 80016a4:	2b50      	cmp	r3, #80	; 0x50
 80016a6:	d106      	bne.n	80016b6 <HAL_UARTEx_RxEventCallback+0x4a>
					Gyr.z = IMU50_Respond_format(&buffUART1[10], TYPE_GYR);
 80016a8:	2102      	movs	r1, #2
 80016aa:	481e      	ldr	r0, [pc, #120]	; (8001724 <HAL_UARTEx_RxEventCallback+0xb8>)
 80016ac:	f7ff fd90 	bl	80011d0 <IMU50_Respond_format>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_UARTEx_RxEventCallback+0xbc>)
 80016b4:	6093      	str	r3, [r2, #8]
			}
			if (buffUART1[3] == 0x54) {
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <HAL_UARTEx_RxEventCallback+0xb4>)
 80016b8:	78db      	ldrb	r3, [r3, #3]
 80016ba:	2b54      	cmp	r3, #84	; 0x54
 80016bc:	d10d      	bne.n	80016da <HAL_UARTEx_RxEventCallback+0x6e>
					Accel.x = IMU50_Respond_format(&buffUART1[4], TYPE_ACCEL);
 80016be:	2101      	movs	r1, #1
 80016c0:	481a      	ldr	r0, [pc, #104]	; (800172c <HAL_UARTEx_RxEventCallback+0xc0>)
 80016c2:	f7ff fd85 	bl	80011d0 <IMU50_Respond_format>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_UARTEx_RxEventCallback+0xc4>)
 80016ca:	6013      	str	r3, [r2, #0]
					Accel.y = IMU50_Respond_format(&buffUART1[7], TYPE_ACCEL);
 80016cc:	2101      	movs	r1, #1
 80016ce:	4819      	ldr	r0, [pc, #100]	; (8001734 <HAL_UARTEx_RxEventCallback+0xc8>)
 80016d0:	f7ff fd7e 	bl	80011d0 <IMU50_Respond_format>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a16      	ldr	r2, [pc, #88]	; (8001730 <HAL_UARTEx_RxEventCallback+0xc4>)
 80016d8:	6053      	str	r3, [r2, #4]
			}
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, buffUART1, BUFFER_SIZE_1);
 80016da:	2232      	movs	r2, #50	; 0x32
 80016dc:	4910      	ldr	r1, [pc, #64]	; (8001720 <HAL_UARTEx_RxEventCallback+0xb4>)
 80016de:	4816      	ldr	r0, [pc, #88]	; (8001738 <HAL_UARTEx_RxEventCallback+0xcc>)
 80016e0:	f003 f9c1 	bl	8004a66 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
	if(huart->Instance == USART2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <HAL_UARTEx_RxEventCallback+0xd0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d10f      	bne.n	800170e <HAL_UARTEx_RxEventCallback+0xa2>
	{
		memset(PcData,0,BUFFER_SIZE_2);
 80016ee:	2264      	movs	r2, #100	; 0x64
 80016f0:	2100      	movs	r1, #0
 80016f2:	4813      	ldr	r0, [pc, #76]	; (8001740 <HAL_UARTEx_RxEventCallback+0xd4>)
 80016f4:	f004 f8f6 	bl	80058e4 <memset>
		memcpy(PcData,buffUART2,Size);
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4911      	ldr	r1, [pc, #68]	; (8001744 <HAL_UARTEx_RxEventCallback+0xd8>)
 80016fe:	4810      	ldr	r0, [pc, #64]	; (8001740 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001700:	f004 f8e2 	bl	80058c8 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, buffUART2, BUFFER_SIZE_2);
 8001704:	2264      	movs	r2, #100	; 0x64
 8001706:	490f      	ldr	r1, [pc, #60]	; (8001744 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001708:	480f      	ldr	r0, [pc, #60]	; (8001748 <HAL_UARTEx_RxEventCallback+0xdc>)
 800170a:	f003 f9ac 	bl	8004a66 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40013800 	.word	0x40013800
 800171c:	2000036c 	.word	0x2000036c
 8001720:	20000270 	.word	0x20000270
 8001724:	2000027a 	.word	0x2000027a
 8001728:	20000258 	.word	0x20000258
 800172c:	20000274 	.word	0x20000274
 8001730:	20000264 	.word	0x20000264
 8001734:	20000277 	.word	0x20000277
 8001738:	20000460 	.word	0x20000460
 800173c:	40004400 	.word	0x40004400
 8001740:	20000308 	.word	0x20000308
 8001744:	200002a4 	.word	0x200002a4
 8001748:	200004a4 	.word	0x200004a4

0800174c <_Z10UARTRXInitv>:

void UARTRXInit(void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, buffUART1, BUFFER_SIZE_1);
 8001750:	2232      	movs	r2, #50	; 0x32
 8001752:	490d      	ldr	r1, [pc, #52]	; (8001788 <_Z10UARTRXInitv+0x3c>)
 8001754:	480d      	ldr	r0, [pc, #52]	; (800178c <_Z10UARTRXInitv+0x40>)
 8001756:	f003 f986 	bl	8004a66 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <_Z10UARTRXInitv+0x44>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <_Z10UARTRXInitv+0x44>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0204 	bic.w	r2, r2, #4
 8001768:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, buffUART2, BUFFER_SIZE_2);
 800176a:	2264      	movs	r2, #100	; 0x64
 800176c:	4909      	ldr	r1, [pc, #36]	; (8001794 <_Z10UARTRXInitv+0x48>)
 800176e:	480a      	ldr	r0, [pc, #40]	; (8001798 <_Z10UARTRXInitv+0x4c>)
 8001770:	f003 f979 	bl	8004a66 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <_Z10UARTRXInitv+0x50>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <_Z10UARTRXInitv+0x50>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0204 	bic.w	r2, r2, #4
 8001782:	601a      	str	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000270 	.word	0x20000270
 800178c:	20000460 	.word	0x20000460
 8001790:	200004e8 	.word	0x200004e8
 8001794:	200002a4 	.word	0x200002a4
 8001798:	200004a4 	.word	0x200004a4
 800179c:	2000052c 	.word	0x2000052c

080017a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a6:	f000 fdb1 	bl	800230c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017aa:	f000 f8ff 	bl	80019ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ae:	f000 fa8f 	bl	8001cd0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80017b2:	f000 fa67 	bl	8001c84 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 80017b6:	f000 fa09 	bl	8001bcc <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 80017ba:	f000 fa35 	bl	8001c28 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 80017be:	f000 f961 	bl	8001a84 <_ZL12MX_ADC1_Initv>
  MX_TIM2_Init();
 80017c2:	f000 f9a7 	bl	8001b14 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  // Init values
//  Flash_Soft_GetOffset();
  RangeADC = MaxRFC - MinRFC;
 80017c6:	4b66      	ldr	r3, [pc, #408]	; (8001960 <main+0x1c0>)
 80017c8:	881a      	ldrh	r2, [r3, #0]
 80017ca:	4b66      	ldr	r3, [pc, #408]	; (8001964 <main+0x1c4>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b65      	ldr	r3, [pc, #404]	; (8001968 <main+0x1c8>)
 80017d4:	801a      	strh	r2, [r3, #0]
  oldADC = MinRFC;
 80017d6:	4b63      	ldr	r3, [pc, #396]	; (8001964 <main+0x1c4>)
 80017d8:	881a      	ldrh	r2, [r3, #0]
 80017da:	4b64      	ldr	r3, [pc, #400]	; (800196c <main+0x1cc>)
 80017dc:	801a      	strh	r2, [r3, #0]
  RFC_Factor = 360.0f/RangeADC;
 80017de:	4b62      	ldr	r3, [pc, #392]	; (8001968 <main+0x1c8>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fac6 	bl	8000d74 <__aeabi_i2f>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4619      	mov	r1, r3
 80017ec:	4860      	ldr	r0, [pc, #384]	; (8001970 <main+0x1d0>)
 80017ee:	f7ff fbc9 	bl	8000f84 <__aeabi_fdiv>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b5f      	ldr	r3, [pc, #380]	; (8001974 <main+0x1d4>)
 80017f8:	601a      	str	r2, [r3, #0]
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&RFCAdcValue, 1);
  UARTRXInit();
 80017fa:	f7ff ffa7 	bl	800174c <_Z10UARTRXInitv>
  IMU50_Init(&huart2, ANSWER, AUT_ALL, ImuData, BUFFER_SIZE_2);
 80017fe:	2364      	movs	r3, #100	; 0x64
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <main+0x1d8>)
 8001804:	2205      	movs	r2, #5
 8001806:	2100      	movs	r1, #0
 8001808:	485c      	ldr	r0, [pc, #368]	; (800197c <main+0x1dc>)
 800180a:	f7ff fe75 	bl	80014f8 <IMU50_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim2);
 800180e:	485c      	ldr	r0, [pc, #368]	; (8001980 <main+0x1e0>)
 8001810:	f002 fc6a 	bl	80040e8 <HAL_TIM_Base_Start>
  uint32_t t_old = __HAL_TIM_GetCounter(&htim2);
 8001814:	4b5a      	ldr	r3, [pc, #360]	; (8001980 <main+0x1e0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	617b      	str	r3, [r7, #20]
  uint16_t init_loops = 50;
 800181c:	2332      	movs	r3, #50	; 0x32
 800181e:	817b      	strh	r3, [r7, #10]
  uint16_t num_loop = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	827b      	strh	r3, [r7, #18]
  float Roll_g = 0;
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	IMU50_SendCommand(READ_GYR, 5);
 800182a:	2105      	movs	r1, #5
 800182c:	4855      	ldr	r0, [pc, #340]	; (8001984 <main+0x1e4>)
 800182e:	f7ff fcbb 	bl	80011a8 <IMU50_SendCommand>
	IMU50_SendCommand(READ_ACCEL, 5);
 8001832:	2105      	movs	r1, #5
 8001834:	4854      	ldr	r0, [pc, #336]	; (8001988 <main+0x1e8>)
 8001836:	f7ff fcb7 	bl	80011a8 <IMU50_SendCommand>
	Gyr.z = GyrKal.update(Gyr.z);
 800183a:	4b54      	ldr	r3, [pc, #336]	; (800198c <main+0x1ec>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4619      	mov	r1, r3
 8001840:	4853      	ldr	r0, [pc, #332]	; (8001990 <main+0x1f0>)
 8001842:	f7ff febf 	bl	80015c4 <_ZN6Kalman6updateEf>
 8001846:	4603      	mov	r3, r0
 8001848:	4a50      	ldr	r2, [pc, #320]	; (800198c <main+0x1ec>)
 800184a:	6093      	str	r3, [r2, #8]
	Accel.y = AyKal.update(Accel.y);
 800184c:	4b51      	ldr	r3, [pc, #324]	; (8001994 <main+0x1f4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4619      	mov	r1, r3
 8001852:	4851      	ldr	r0, [pc, #324]	; (8001998 <main+0x1f8>)
 8001854:	f7ff feb6 	bl	80015c4 <_ZN6Kalman6updateEf>
 8001858:	4603      	mov	r3, r0
 800185a:	4a4e      	ldr	r2, [pc, #312]	; (8001994 <main+0x1f4>)
 800185c:	6053      	str	r3, [r2, #4]
	Accel.x = AxKal.update(Accel.x);
 800185e:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <main+0x1f4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	484d      	ldr	r0, [pc, #308]	; (800199c <main+0x1fc>)
 8001866:	f7ff fead 	bl	80015c4 <_ZN6Kalman6updateEf>
 800186a:	4603      	mov	r3, r0
 800186c:	4a49      	ldr	r2, [pc, #292]	; (8001994 <main+0x1f4>)
 800186e:	6013      	str	r3, [r2, #0]
	if(num_loop < init_loops)
 8001870:	8a7a      	ldrh	r2, [r7, #18]
 8001872:	897b      	ldrh	r3, [r7, #10]
 8001874:	429a      	cmp	r2, r3
 8001876:	d216      	bcs.n	80018a6 <main+0x106>
	{
		Roll_g += atan2(Accel.y, Accel.x);
 8001878:	4b46      	ldr	r3, [pc, #280]	; (8001994 <main+0x1f4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a45      	ldr	r2, [pc, #276]	; (8001994 <main+0x1f4>)
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fee4 	bl	8001650 <_ZSt5atan2ff>
 8001888:	4603      	mov	r3, r0
 800188a:	4619      	mov	r1, r3
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f7ff f9bd 	bl	8000c0c <__addsf3>
 8001892:	4603      	mov	r3, r0
 8001894:	60fb      	str	r3, [r7, #12]
		t_old = __HAL_TIM_GetCounter(&htim2);
 8001896:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <main+0x1e0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	617b      	str	r3, [r7, #20]
		num_loop++;
 800189e:	8a7b      	ldrh	r3, [r7, #18]
 80018a0:	3301      	adds	r3, #1
 80018a2:	827b      	strh	r3, [r7, #18]
		continue;
 80018a4:	e05b      	b.n	800195e <main+0x1be>
	}
	else if(num_loop == init_loops)
 80018a6:	8a7a      	ldrh	r2, [r7, #18]
 80018a8:	897b      	ldrh	r3, [r7, #10]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d10e      	bne.n	80018cc <main+0x12c>
	{
		Roll_g /= init_loops;
 80018ae:	897b      	ldrh	r3, [r7, #10]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fa5f 	bl	8000d74 <__aeabi_i2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4619      	mov	r1, r3
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f7ff fb62 	bl	8000f84 <__aeabi_fdiv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	60fb      	str	r3, [r7, #12]
		num_loop++;
 80018c4:	8a7b      	ldrh	r3, [r7, #18]
 80018c6:	3301      	adds	r3, #1
 80018c8:	827b      	strh	r3, [r7, #18]
 80018ca:	e008      	b.n	80018de <main+0x13e>
	}
	else
	{
		Roll_g = atan2(Accel.y, Accel.x);
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <main+0x1f4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4a30      	ldr	r2, [pc, #192]	; (8001994 <main+0x1f4>)
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff feba 	bl	8001650 <_ZSt5atan2ff>
 80018dc:	60f8      	str	r0, [r7, #12]
	}
	uint32_t t_cur = __HAL_TIM_GetCounter(&htim2);
 80018de:	4b28      	ldr	r3, [pc, #160]	; (8001980 <main+0x1e0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	607b      	str	r3, [r7, #4]
	if(t_cur > t_old)
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d90f      	bls.n	800190e <main+0x16e>
	{
		T = (t_cur - t_old)*0.0001f;
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fa39 	bl	8000d6c <__aeabi_ui2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4928      	ldr	r1, [pc, #160]	; (80019a0 <main+0x200>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fa8c 	bl	8000e1c <__aeabi_fmul>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <main+0x204>)
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e011      	b.n	8001932 <main+0x192>
	}
	else
	{
		T = (60000-t_old+t_cur)*0.0001f;
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8001918:	3360      	adds	r3, #96	; 0x60
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fa26 	bl	8000d6c <__aeabi_ui2f>
 8001920:	4603      	mov	r3, r0
 8001922:	491f      	ldr	r1, [pc, #124]	; (80019a0 <main+0x200>)
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fa79 	bl	8000e1c <__aeabi_fmul>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <main+0x204>)
 8001930:	601a      	str	r2, [r3, #0]
	}
	t_old = t_cur;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	617b      	str	r3, [r7, #20]
	Roll_IMU += Gyr.z*T;
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <main+0x1ec>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <main+0x204>)
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fa6b 	bl	8000e1c <__aeabi_fmul>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <main+0x208>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4619      	mov	r1, r3
 8001950:	4610      	mov	r0, r2
 8001952:	f7ff f95b 	bl	8000c0c <__addsf3>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <main+0x208>)
 800195c:	601a      	str	r2, [r3, #0]
//	sprintf(tx2pcData,">%.4f|%.4f|%.4f|%.4f|%.4f\r",Gyr.z,Accel.x,Accel.y,Roll_IMU,T);
//	HAL_UART_Transmit(&huart1, (uint8_t*)tx2pcData, strlen(tx2pcData), 100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800195e:	e764      	b.n	800182a <main+0x8a>
 8001960:	2000000e 	.word	0x2000000e
 8001964:	20000574 	.word	0x20000574
 8001968:	20000010 	.word	0x20000010
 800196c:	20000576 	.word	0x20000576
 8001970:	43b40000 	.word	0x43b40000
 8001974:	20000570 	.word	0x20000570
 8001978:	2000036c 	.word	0x2000036c
 800197c:	200004a4 	.word	0x200004a4
 8001980:	20000418 	.word	0x20000418
 8001984:	20000008 	.word	0x20000008
 8001988:	20000000 	.word	0x20000000
 800198c:	20000258 	.word	0x20000258
 8001990:	200003b8 	.word	0x200003b8
 8001994:	20000264 	.word	0x20000264
 8001998:	200003d8 	.word	0x200003d8
 800199c:	200003c8 	.word	0x200003c8
 80019a0:	38d1b717 	.word	0x38d1b717
 80019a4:	200003a0 	.word	0x200003a0
 80019a8:	200003a4 	.word	0x200003a4

080019ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b096      	sub	sp, #88	; 0x58
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b6:	2228      	movs	r2, #40	; 0x28
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 ff92 	bl	80058e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]
 80019de:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e0:	2301      	movs	r3, #1
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019ea:	2300      	movs	r3, #0
 80019ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ee:	2301      	movs	r3, #1
 80019f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f2:	2302      	movs	r3, #2
 80019f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a00:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fe4e 	bl	80036a8 <HAL_RCC_OscConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf14      	ite	ne
 8001a12:	2301      	movne	r3, #1
 8001a14:	2300      	moveq	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8001a1c:	f000 f97a 	bl	8001d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a20:	230f      	movs	r3, #15
 8001a22:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a24:	2302      	movs	r3, #2
 8001a26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 f8b5 	bl	8003bac <HAL_RCC_ClockConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf14      	ite	ne
 8001a48:	2301      	movne	r3, #1
 8001a4a:	2300      	moveq	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8001a52:	f000 f95f 	bl	8001d14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a56:	2302      	movs	r3, #2
 8001a58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a5e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 fa3a 	bl	8003edc <HAL_RCCEx_PeriphCLKConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bf14      	ite	ne
 8001a6e:	2301      	movne	r3, #1
 8001a70:	2300      	moveq	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 8001a78:	f000 f94c 	bl	8001d14 <Error_Handler>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3758      	adds	r7, #88	; 0x58
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <_ZL12MX_ADC1_Initv+0x88>)
 8001a96:	4a1e      	ldr	r2, [pc, #120]	; (8001b10 <_ZL12MX_ADC1_Initv+0x8c>)
 8001a98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <_ZL12MX_ADC1_Initv+0x88>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <_ZL12MX_ADC1_Initv+0x88>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <_ZL12MX_ADC1_Initv+0x88>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <_ZL12MX_ADC1_Initv+0x88>)
 8001aae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ab2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <_ZL12MX_ADC1_Initv+0x88>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <_ZL12MX_ADC1_Initv+0x88>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ac0:	4812      	ldr	r0, [pc, #72]	; (8001b0c <_ZL12MX_ADC1_Initv+0x88>)
 8001ac2:	f000 fca9 	bl	8002418 <HAL_ADC_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf14      	ite	ne
 8001acc:	2301      	movne	r3, #1
 8001ace:	2300      	moveq	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8001ad6:	f000 f91d 	bl	8001d14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4808      	ldr	r0, [pc, #32]	; (8001b0c <_ZL12MX_ADC1_Initv+0x88>)
 8001aec:	f000 fd7e 	bl	80025ec <HAL_ADC_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bf14      	ite	ne
 8001af6:	2301      	movne	r3, #1
 8001af8:	2300      	moveq	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8001b00:	f000 f908 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200003e8 	.word	0x200003e8
 8001b10:	40012400 	.word	0x40012400

08001b14 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	463b      	mov	r3, r7
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001b38:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b3a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001b3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999;
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b48:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001b4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b5a:	481b      	ldr	r0, [pc, #108]	; (8001bc8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b5c:	f002 fa74 	bl	8004048 <HAL_TIM_Base_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf14      	ite	ne
 8001b66:	2301      	movne	r3, #1
 8001b68:	2300      	moveq	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8001b70:	f000 f8d0 	bl	8001d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4811      	ldr	r0, [pc, #68]	; (8001bc8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001b82:	f002 fc11 	bl	80043a8 <HAL_TIM_ConfigClockSource>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf14      	ite	ne
 8001b8c:	2301      	movne	r3, #1
 8001b8e:	2300      	moveq	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8001b96:	f000 f8bd 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ba8:	f002 fe00 	bl	80047ac <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	bf14      	ite	ne
 8001bb2:	2301      	movne	r3, #1
 8001bb4:	2300      	moveq	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8001bbc:	f000 f8aa 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000418 	.word	0x20000418

08001bcc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bd2:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001bd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c02:	4807      	ldr	r0, [pc, #28]	; (8001c20 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c04:	f002 fe50 	bl	80048a8 <HAL_UART_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bf14      	ite	ne
 8001c0e:	2301      	movne	r3, #1
 8001c10:	2300      	moveq	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001c18:	f000 f87c 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000460 	.word	0x20000460
 8001c24:	40013800 	.word	0x40013800

08001c28 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c2e:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001c30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c4e:	220c      	movs	r2, #12
 8001c50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c5e:	4807      	ldr	r0, [pc, #28]	; (8001c7c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c60:	f002 fe22 	bl	80048a8 <HAL_UART_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf14      	ite	ne
 8001c6a:	2301      	movne	r3, #1
 8001c6c:	2300      	moveq	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001c74:	f000 f84e 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	200004a4 	.word	0x200004a4
 8001c80:	40004400 	.word	0x40004400

08001c84 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <_ZL11MX_DMA_Initv+0x48>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <_ZL11MX_DMA_Initv+0x48>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6153      	str	r3, [r2, #20]
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <_ZL11MX_DMA_Initv+0x48>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	200f      	movs	r0, #15
 8001ca8:	f000 feb1 	bl	8002a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001cac:	200f      	movs	r0, #15
 8001cae:	f000 feca 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2010      	movs	r0, #16
 8001cb8:	f000 fea9 	bl	8002a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001cbc:	2010      	movs	r0, #16
 8001cbe:	f000 fec2 	bl	8002a46 <HAL_NVIC_EnableIRQ>

}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <_ZL12MX_GPIO_Initv+0x40>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <_ZL12MX_GPIO_Initv+0x40>)
 8001cdc:	f043 0320 	orr.w	r3, r3, #32
 8001ce0:	6193      	str	r3, [r2, #24]
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <_ZL12MX_GPIO_Initv+0x40>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <_ZL12MX_GPIO_Initv+0x40>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <_ZL12MX_GPIO_Initv+0x40>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6193      	str	r3, [r2, #24]
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <_ZL12MX_GPIO_Initv+0x40>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]

}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40021000 	.word	0x40021000

08001d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d18:	b672      	cpsid	i
}
 8001d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <Error_Handler+0x8>
	...

08001d20 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d118      	bne.n	8001d62 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d113      	bne.n	8001d62 <_Z41__static_initialization_and_destruction_0ii+0x42>
Kalman RFCKal(0);
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	480b      	ldr	r0, [pc, #44]	; (8001d6c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001d40:	f7ff fc22 	bl	8001588 <_ZN6KalmanC1Ef>
Kalman GyrKal(0);
 8001d44:	f04f 0100 	mov.w	r1, #0
 8001d48:	4809      	ldr	r0, [pc, #36]	; (8001d70 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001d4a:	f7ff fc1d 	bl	8001588 <_ZN6KalmanC1Ef>
Kalman AxKal(0);
 8001d4e:	f04f 0100 	mov.w	r1, #0
 8001d52:	4808      	ldr	r0, [pc, #32]	; (8001d74 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001d54:	f7ff fc18 	bl	8001588 <_ZN6KalmanC1Ef>
Kalman AyKal(0);
 8001d58:	f04f 0100 	mov.w	r1, #0
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001d5e:	f7ff fc13 	bl	8001588 <_ZN6KalmanC1Ef>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200003a8 	.word	0x200003a8
 8001d70:	200003b8 	.word	0x200003b8
 8001d74:	200003c8 	.word	0x200003c8
 8001d78:	200003d8 	.word	0x200003d8

08001d7c <_GLOBAL__sub_I_buffUART1>:
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7ff ffcb 	bl	8001d20 <_Z41__static_initialization_and_destruction_0ii>
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_MspInit+0x5c>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <HAL_MspInit+0x5c>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6193      	str	r3, [r2, #24]
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_MspInit+0x5c>)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_MspInit+0x5c>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <HAL_MspInit+0x5c>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <HAL_MspInit+0x5c>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_MspInit+0x60>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <HAL_MspInit+0x60>)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010000 	.word	0x40010000

08001df0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <HAL_ADC_MspInit+0x6c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d121      	bne.n	8001e54 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <HAL_ADC_MspInit+0x70>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <HAL_ADC_MspInit+0x70>)
 8001e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_ADC_MspInit+0x70>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_ADC_MspInit+0x70>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <HAL_ADC_MspInit+0x70>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_ADC_MspInit+0x70>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e40:	2302      	movs	r3, #2
 8001e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e44:	2303      	movs	r3, #3
 8001e46:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4805      	ldr	r0, [pc, #20]	; (8001e64 <HAL_ADC_MspInit+0x74>)
 8001e50:	f001 fa96 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e54:	bf00      	nop
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40012400 	.word	0x40012400
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010800 	.word	0x40010800

08001e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e78:	d113      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_TIM_Base_MspInit+0x44>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <HAL_TIM_Base_MspInit+0x44>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_TIM_Base_MspInit+0x44>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	201c      	movs	r0, #28
 8001e98:	f000 fdb9 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e9c:	201c      	movs	r0, #28
 8001e9e:	f000 fdd2 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0318 	add.w	r3, r7, #24
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a65      	ldr	r2, [pc, #404]	; (8002060 <HAL_UART_MspInit+0x1b0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d160      	bne.n	8001f92 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ed0:	4b64      	ldr	r3, [pc, #400]	; (8002064 <HAL_UART_MspInit+0x1b4>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a63      	ldr	r2, [pc, #396]	; (8002064 <HAL_UART_MspInit+0x1b4>)
 8001ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b61      	ldr	r3, [pc, #388]	; (8002064 <HAL_UART_MspInit+0x1b4>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b5e      	ldr	r3, [pc, #376]	; (8002064 <HAL_UART_MspInit+0x1b4>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a5d      	ldr	r2, [pc, #372]	; (8002064 <HAL_UART_MspInit+0x1b4>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b5b      	ldr	r3, [pc, #364]	; (8002064 <HAL_UART_MspInit+0x1b4>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 0318 	add.w	r3, r7, #24
 8001f12:	4619      	mov	r1, r3
 8001f14:	4854      	ldr	r0, [pc, #336]	; (8002068 <HAL_UART_MspInit+0x1b8>)
 8001f16:	f001 fa33 	bl	8003380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f107 0318 	add.w	r3, r7, #24
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	484e      	ldr	r0, [pc, #312]	; (8002068 <HAL_UART_MspInit+0x1b8>)
 8001f30:	f001 fa26 	bl	8003380 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001f34:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_UART_MspInit+0x1bc>)
 8001f36:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_UART_MspInit+0x1c0>)
 8001f38:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f3a:	4b4c      	ldr	r3, [pc, #304]	; (800206c <HAL_UART_MspInit+0x1bc>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f40:	4b4a      	ldr	r3, [pc, #296]	; (800206c <HAL_UART_MspInit+0x1bc>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f46:	4b49      	ldr	r3, [pc, #292]	; (800206c <HAL_UART_MspInit+0x1bc>)
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f4c:	4b47      	ldr	r3, [pc, #284]	; (800206c <HAL_UART_MspInit+0x1bc>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f52:	4b46      	ldr	r3, [pc, #280]	; (800206c <HAL_UART_MspInit+0x1bc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001f58:	4b44      	ldr	r3, [pc, #272]	; (800206c <HAL_UART_MspInit+0x1bc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5e:	4b43      	ldr	r3, [pc, #268]	; (800206c <HAL_UART_MspInit+0x1bc>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f64:	4841      	ldr	r0, [pc, #260]	; (800206c <HAL_UART_MspInit+0x1bc>)
 8001f66:	f000 fd89 	bl	8002a7c <HAL_DMA_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001f70:	f7ff fed0 	bl	8001d14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3d      	ldr	r2, [pc, #244]	; (800206c <HAL_UART_MspInit+0x1bc>)
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38
 8001f7a:	4a3c      	ldr	r2, [pc, #240]	; (800206c <HAL_UART_MspInit+0x1bc>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2100      	movs	r1, #0
 8001f84:	2025      	movs	r0, #37	; 0x25
 8001f86:	f000 fd42 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f8a:	2025      	movs	r0, #37	; 0x25
 8001f8c:	f000 fd5b 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f90:	e062      	b.n	8002058 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a37      	ldr	r2, [pc, #220]	; (8002074 <HAL_UART_MspInit+0x1c4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d15d      	bne.n	8002058 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f9c:	4b31      	ldr	r3, [pc, #196]	; (8002064 <HAL_UART_MspInit+0x1b4>)
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	4a30      	ldr	r2, [pc, #192]	; (8002064 <HAL_UART_MspInit+0x1b4>)
 8001fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa6:	61d3      	str	r3, [r2, #28]
 8001fa8:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <HAL_UART_MspInit+0x1b4>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <HAL_UART_MspInit+0x1b4>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a2a      	ldr	r2, [pc, #168]	; (8002064 <HAL_UART_MspInit+0x1b4>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b28      	ldr	r3, [pc, #160]	; (8002064 <HAL_UART_MspInit+0x1b4>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	f107 0318 	add.w	r3, r7, #24
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4822      	ldr	r0, [pc, #136]	; (8002068 <HAL_UART_MspInit+0x1b8>)
 8001fe0:	f001 f9ce 	bl	8003380 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 0318 	add.w	r3, r7, #24
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	481c      	ldr	r0, [pc, #112]	; (8002068 <HAL_UART_MspInit+0x1b8>)
 8001ff8:	f001 f9c2 	bl	8003380 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_UART_MspInit+0x1c8>)
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	; (800207c <HAL_UART_MspInit+0x1cc>)
 8002000:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_UART_MspInit+0x1c8>)
 8002004:	2200      	movs	r2, #0
 8002006:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_UART_MspInit+0x1c8>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800200e:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_UART_MspInit+0x1c8>)
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_UART_MspInit+0x1c8>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_UART_MspInit+0x1c8>)
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002020:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_UART_MspInit+0x1c8>)
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_UART_MspInit+0x1c8>)
 8002028:	2200      	movs	r2, #0
 800202a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800202c:	4812      	ldr	r0, [pc, #72]	; (8002078 <HAL_UART_MspInit+0x1c8>)
 800202e:	f000 fd25 	bl	8002a7c <HAL_DMA_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002038:	f7ff fe6c 	bl	8001d14 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <HAL_UART_MspInit+0x1c8>)
 8002040:	639a      	str	r2, [r3, #56]	; 0x38
 8002042:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <HAL_UART_MspInit+0x1c8>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	2026      	movs	r0, #38	; 0x26
 800204e:	f000 fcde 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002052:	2026      	movs	r0, #38	; 0x26
 8002054:	f000 fcf7 	bl	8002a46 <HAL_NVIC_EnableIRQ>
}
 8002058:	bf00      	nop
 800205a:	3728      	adds	r7, #40	; 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40013800 	.word	0x40013800
 8002064:	40021000 	.word	0x40021000
 8002068:	40010800 	.word	0x40010800
 800206c:	200004e8 	.word	0x200004e8
 8002070:	40020058 	.word	0x40020058
 8002074:	40004400 	.word	0x40004400
 8002078:	2000052c 	.word	0x2000052c
 800207c:	4002006c 	.word	0x4002006c

08002080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <NMI_Handler+0x4>

08002086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <HardFault_Handler+0x4>

0800208c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <MemManage_Handler+0x4>

08002092 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <BusFault_Handler+0x4>

08002098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <UsageFault_Handler+0x4>

0800209e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr

080020b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c6:	f000 f967 	bl	8002398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <DMA1_Channel5_IRQHandler+0x10>)
 80020d6:	f000 fee9 	bl	8002eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200004e8 	.word	0x200004e8

080020e4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <DMA1_Channel6_IRQHandler+0x10>)
 80020ea:	f000 fedf 	bl	8002eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000052c 	.word	0x2000052c

080020f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <TIM2_IRQHandler+0x10>)
 80020fe:	f002 f84b 	bl	8004198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000418 	.word	0x20000418

0800210c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <USART1_IRQHandler+0x10>)
 8002112:	f002 fcf7 	bl	8004b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000460 	.word	0x20000460

08002120 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <USART2_IRQHandler+0x10>)
 8002126:	f002 fced 	bl	8004b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200004a4 	.word	0x200004a4

08002134 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
	return 1;
 8002138:	2301      	movs	r3, #1
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <_kill>:

int _kill(int pid, int sig)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800214c:	f003 fb92 	bl	8005874 <__errno>
 8002150:	4603      	mov	r3, r0
 8002152:	2216      	movs	r2, #22
 8002154:	601a      	str	r2, [r3, #0]
	return -1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_exit>:

void _exit (int status)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800216a:	f04f 31ff 	mov.w	r1, #4294967295
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ffe7 	bl	8002142 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002174:	e7fe      	b.n	8002174 <_exit+0x12>

08002176 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e00a      	b.n	800219e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002188:	f3af 8000 	nop.w
 800218c:	4601      	mov	r1, r0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	60ba      	str	r2, [r7, #8]
 8002194:	b2ca      	uxtb	r2, r1
 8002196:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3301      	adds	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	dbf0      	blt.n	8002188 <_read+0x12>
	}

return len;
 80021a6:	687b      	ldr	r3, [r7, #4]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	e009      	b.n	80021d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	60ba      	str	r2, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3301      	adds	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	429a      	cmp	r2, r3
 80021dc:	dbf1      	blt.n	80021c2 <_write+0x12>
	}
	return len;
 80021de:	687b      	ldr	r3, [r7, #4]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_close>:

int _close(int file)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	return -1;
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800220e:	605a      	str	r2, [r3, #4]
	return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <_isatty>:

int _isatty(int file)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	return 1;
 8002224:	2301      	movs	r3, #1
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
	return 0;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002250:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <_sbrk+0x5c>)
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <_sbrk+0x60>)
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <_sbrk+0x64>)
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <_sbrk+0x68>)
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <_sbrk+0x64>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	d207      	bcs.n	8002288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002278:	f003 fafc 	bl	8005874 <__errno>
 800227c:	4603      	mov	r3, r0
 800227e:	220c      	movs	r2, #12
 8002280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	e009      	b.n	800229c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <_sbrk+0x64>)
 8002298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	2000c000 	.word	0x2000c000
 80022a8:	00000400 	.word	0x00000400
 80022ac:	20000578 	.word	0x20000578
 80022b0:	20000590 	.word	0x20000590

080022b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c0:	480c      	ldr	r0, [pc, #48]	; (80022f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022c2:	490d      	ldr	r1, [pc, #52]	; (80022f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c8:	e002      	b.n	80022d0 <LoopCopyDataInit>

080022ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ce:	3304      	adds	r3, #4

080022d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d4:	d3f9      	bcc.n	80022ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022d8:	4c0a      	ldr	r4, [pc, #40]	; (8002304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022dc:	e001      	b.n	80022e2 <LoopFillZerobss>

080022de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e0:	3204      	adds	r2, #4

080022e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e4:	d3fb      	bcc.n	80022de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022e6:	f7ff ffe5 	bl	80022b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ea:	f003 fac9 	bl	8005880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ee:	f7ff fa57 	bl	80017a0 <main>
  bx lr
 80022f2:	4770      	bx	lr
  ldr r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80022fc:	08008758 	.word	0x08008758
  ldr r2, =_sbss
 8002300:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002304:	20000590 	.word	0x20000590

08002308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC1_2_IRQHandler>
	...

0800230c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_Init+0x28>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a07      	ldr	r2, [pc, #28]	; (8002334 <HAL_Init+0x28>)
 8002316:	f043 0310 	orr.w	r3, r3, #16
 800231a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800231c:	2003      	movs	r0, #3
 800231e:	f000 fb6b 	bl	80029f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002322:	200f      	movs	r0, #15
 8002324:	f000 f808 	bl	8002338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002328:	f7ff fd30 	bl	8001d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40022000 	.word	0x40022000

08002338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_InitTick+0x54>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_InitTick+0x58>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002352:	fbb2 f3f3 	udiv	r3, r2, r3
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fb83 	bl	8002a62 <HAL_SYSTICK_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e00e      	b.n	8002384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b0f      	cmp	r3, #15
 800236a:	d80a      	bhi.n	8002382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800236c:	2200      	movs	r2, #0
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f000 fb4b 	bl	8002a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002378:	4a06      	ldr	r2, [pc, #24]	; (8002394 <HAL_InitTick+0x5c>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	e000      	b.n	8002384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000014 	.word	0x20000014
 8002390:	2000001c 	.word	0x2000001c
 8002394:	20000018 	.word	0x20000018

08002398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_IncTick+0x1c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_IncTick+0x20>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	4a03      	ldr	r2, [pc, #12]	; (80023b8 <HAL_IncTick+0x20>)
 80023aa:	6013      	str	r3, [r2, #0]
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	2000001c 	.word	0x2000001c
 80023b8:	2000057c 	.word	0x2000057c

080023bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return uwTick;
 80023c0:	4b02      	ldr	r3, [pc, #8]	; (80023cc <HAL_GetTick+0x10>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	2000057c 	.word	0x2000057c

080023d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff fff0 	bl	80023bc <HAL_GetTick>
 80023dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d005      	beq.n	80023f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_Delay+0x44>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023f6:	bf00      	nop
 80023f8:	f7ff ffe0 	bl	80023bc <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d8f7      	bhi.n	80023f8 <HAL_Delay+0x28>
  {
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000001c 	.word	0x2000001c

08002418 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0ce      	b.n	80025d8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	2b00      	cmp	r3, #0
 8002446:	d109      	bne.n	800245c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fcca 	bl	8001df0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f9bd 	bl	80027dc <ADC_ConversionStop_Disable>
 8002462:	4603      	mov	r3, r0
 8002464:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 80a9 	bne.w	80025c6 <HAL_ADC_Init+0x1ae>
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 80a5 	bne.w	80025c6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002484:	f023 0302 	bic.w	r3, r3, #2
 8002488:	f043 0202 	orr.w	r2, r3, #2
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4951      	ldr	r1, [pc, #324]	; (80025e0 <HAL_ADC_Init+0x1c8>)
 800249a:	428b      	cmp	r3, r1
 800249c:	d10a      	bne.n	80024b4 <HAL_ADC_Init+0x9c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80024a6:	d002      	beq.n	80024ae <HAL_ADC_Init+0x96>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	e004      	b.n	80024b8 <HAL_ADC_Init+0xa0>
 80024ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80024b2:	e001      	b.n	80024b8 <HAL_ADC_Init+0xa0>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7b1b      	ldrb	r3, [r3, #12]
 80024be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d0:	d003      	beq.n	80024da <HAL_ADC_Init+0xc2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d102      	bne.n	80024e0 <HAL_ADC_Init+0xc8>
 80024da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024de:	e000      	b.n	80024e2 <HAL_ADC_Init+0xca>
 80024e0:	2300      	movs	r3, #0
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7d1b      	ldrb	r3, [r3, #20]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d119      	bne.n	8002524 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	7b1b      	ldrb	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	035a      	lsls	r2, r3, #13
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	e00b      	b.n	8002524 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	f043 0220 	orr.w	r2, r3, #32
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	f043 0201 	orr.w	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	430a      	orrs	r2, r1
 8002536:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <HAL_ADC_Init+0x1cc>)
 8002540:	4013      	ands	r3, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	430b      	orrs	r3, r1
 800254a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002554:	d003      	beq.n	800255e <HAL_ADC_Init+0x146>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d104      	bne.n	8002568 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	3b01      	subs	r3, #1
 8002564:	051b      	lsls	r3, r3, #20
 8002566:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	430a      	orrs	r2, r1
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_ADC_Init+0x1d0>)
 8002584:	4013      	ands	r3, r2
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	429a      	cmp	r2, r3
 800258a:	d10b      	bne.n	80025a4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	f023 0303 	bic.w	r3, r3, #3
 800259a:	f043 0201 	orr.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025a2:	e018      	b.n	80025d6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	f023 0312 	bic.w	r3, r3, #18
 80025ac:	f043 0210 	orr.w	r2, r3, #16
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025c4:	e007      	b.n	80025d6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	f043 0210 	orr.w	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40013c00 	.word	0x40013c00
 80025e4:	ffe1f7fd 	.word	0xffe1f7fd
 80025e8:	ff1f0efe 	.word	0xff1f0efe

080025ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x20>
 8002608:	2302      	movs	r3, #2
 800260a:	e0dc      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x1da>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b06      	cmp	r3, #6
 800261a:	d81c      	bhi.n	8002656 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	3b05      	subs	r3, #5
 800262e:	221f      	movs	r2, #31
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	4019      	ands	r1, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	3b05      	subs	r3, #5
 8002648:	fa00 f203 	lsl.w	r2, r0, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	635a      	str	r2, [r3, #52]	; 0x34
 8002654:	e03c      	b.n	80026d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b0c      	cmp	r3, #12
 800265c:	d81c      	bhi.n	8002698 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b23      	subs	r3, #35	; 0x23
 8002670:	221f      	movs	r2, #31
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	4019      	ands	r1, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b23      	subs	r3, #35	; 0x23
 800268a:	fa00 f203 	lsl.w	r2, r0, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
 8002696:	e01b      	b.n	80026d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	3b41      	subs	r3, #65	; 0x41
 80026aa:	221f      	movs	r2, #31
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	4019      	ands	r1, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	3b41      	subs	r3, #65	; 0x41
 80026c4:	fa00 f203 	lsl.w	r2, r0, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b09      	cmp	r3, #9
 80026d6:	d91c      	bls.n	8002712 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68d9      	ldr	r1, [r3, #12]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	3b1e      	subs	r3, #30
 80026ea:	2207      	movs	r2, #7
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	4019      	ands	r1, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6898      	ldr	r0, [r3, #8]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	3b1e      	subs	r3, #30
 8002704:	fa00 f203 	lsl.w	r2, r0, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	e019      	b.n	8002746 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6919      	ldr	r1, [r3, #16]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	2207      	movs	r2, #7
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	4019      	ands	r1, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6898      	ldr	r0, [r3, #8]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	fa00 f203 	lsl.w	r2, r0, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b10      	cmp	r3, #16
 800274c:	d003      	beq.n	8002756 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002752:	2b11      	cmp	r3, #17
 8002754:	d132      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d125      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d126      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800277c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b10      	cmp	r3, #16
 8002784:	d11a      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	0c9a      	lsrs	r2, r3, #18
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800279c:	e002      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f9      	bne.n	800279e <HAL_ADC_ConfigChannel+0x1b2>
 80027aa:	e007      	b.n	80027bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40012400 	.word	0x40012400
 80027d4:	20000014 	.word	0x20000014
 80027d8:	431bde83 	.word	0x431bde83

080027dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d12e      	bne.n	8002854 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002806:	f7ff fdd9 	bl	80023bc <HAL_GetTick>
 800280a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800280c:	e01b      	b.n	8002846 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800280e:	f7ff fdd5 	bl	80023bc <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d914      	bls.n	8002846 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10d      	bne.n	8002846 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	f043 0210 	orr.w	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	f043 0201 	orr.w	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e007      	b.n	8002856 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d0dc      	beq.n	800280e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4906      	ldr	r1, [pc, #24]	; (80028f8 <__NVIC_EnableIRQ+0x34>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	e000e100 	.word	0xe000e100

080028fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	6039      	str	r1, [r7, #0]
 8002906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	2b00      	cmp	r3, #0
 800290e:	db0a      	blt.n	8002926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	490c      	ldr	r1, [pc, #48]	; (8002948 <__NVIC_SetPriority+0x4c>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	440b      	add	r3, r1
 8002920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002924:	e00a      	b.n	800293c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4908      	ldr	r1, [pc, #32]	; (800294c <__NVIC_SetPriority+0x50>)
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	3b04      	subs	r3, #4
 8002934:	0112      	lsls	r2, r2, #4
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	440b      	add	r3, r1
 800293a:	761a      	strb	r2, [r3, #24]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000e100 	.word	0xe000e100
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f1c3 0307 	rsb	r3, r3, #7
 800296a:	2b04      	cmp	r3, #4
 800296c:	bf28      	it	cs
 800296e:	2304      	movcs	r3, #4
 8002970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3304      	adds	r3, #4
 8002976:	2b06      	cmp	r3, #6
 8002978:	d902      	bls.n	8002980 <NVIC_EncodePriority+0x30>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3b03      	subs	r3, #3
 800297e:	e000      	b.n	8002982 <NVIC_EncodePriority+0x32>
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	f04f 32ff 	mov.w	r2, #4294967295
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	401a      	ands	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002998:	f04f 31ff 	mov.w	r1, #4294967295
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	43d9      	mvns	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	4313      	orrs	r3, r2
         );
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c4:	d301      	bcc.n	80029ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00f      	b.n	80029ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <SysTick_Config+0x40>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d2:	210f      	movs	r1, #15
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
 80029d8:	f7ff ff90 	bl	80028fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <SysTick_Config+0x40>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <SysTick_Config+0x40>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff2d 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a20:	f7ff ff42 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	6978      	ldr	r0, [r7, #20]
 8002a2c:	f7ff ff90 	bl	8002950 <NVIC_EncodePriority>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff5f 	bl	80028fc <__NVIC_SetPriority>
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff35 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff ffa2 	bl	80029b4 <SysTick_Config>
 8002a70:	4603      	mov	r3, r0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e059      	b.n	8002b46 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_DMA_Init+0xd4>)
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d80f      	bhi.n	8002abe <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_DMA_Init+0xd8>)
 8002aa6:	4413      	add	r3, r2
 8002aa8:	4a2b      	ldr	r2, [pc, #172]	; (8002b58 <HAL_DMA_Init+0xdc>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	009a      	lsls	r2, r3, #2
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <HAL_DMA_Init+0xe0>)
 8002aba:	63da      	str	r2, [r3, #60]	; 0x3c
 8002abc:	e00e      	b.n	8002adc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <HAL_DMA_Init+0xe4>)
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a23      	ldr	r2, [pc, #140]	; (8002b58 <HAL_DMA_Init+0xdc>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	009a      	lsls	r2, r3, #2
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a22      	ldr	r2, [pc, #136]	; (8002b64 <HAL_DMA_Init+0xe8>)
 8002ada:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002af2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002af6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40020407 	.word	0x40020407
 8002b54:	bffdfff8 	.word	0xbffdfff8
 8002b58:	cccccccd 	.word	0xcccccccd
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	bffdfbf8 	.word	0xbffdfbf8
 8002b64:	40020400 	.word	0x40020400

08002b68 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_DMA_Start_IT+0x20>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e04a      	b.n	8002c1e <HAL_DMA_Start_IT+0xb6>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d13a      	bne.n	8002c10 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fbb0 	bl	8003324 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 020e 	orr.w	r2, r2, #14
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	e00f      	b.n	8002bfe <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0204 	bic.w	r2, r2, #4
 8002bec:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 020a 	orr.w	r2, r2, #10
 8002bfc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e005      	b.n	8002c1c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d008      	beq.n	8002c4e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2204      	movs	r2, #4
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e020      	b.n	8002c90 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 020e 	bic.w	r2, r2, #14
 8002c5c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0201 	bic.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	2101      	movs	r1, #1
 8002c78:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d005      	beq.n	8002cbe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
 8002cbc:	e0d6      	b.n	8002e6c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 020e 	bic.w	r2, r2, #14
 8002ccc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b64      	ldr	r3, [pc, #400]	; (8002e78 <HAL_DMA_Abort_IT+0x1dc>)
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d958      	bls.n	8002d9c <HAL_DMA_Abort_IT+0x100>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a63      	ldr	r2, [pc, #396]	; (8002e7c <HAL_DMA_Abort_IT+0x1e0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d04f      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xf8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a61      	ldr	r2, [pc, #388]	; (8002e80 <HAL_DMA_Abort_IT+0x1e4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d048      	beq.n	8002d90 <HAL_DMA_Abort_IT+0xf4>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a60      	ldr	r2, [pc, #384]	; (8002e84 <HAL_DMA_Abort_IT+0x1e8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d040      	beq.n	8002d8a <HAL_DMA_Abort_IT+0xee>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a5e      	ldr	r2, [pc, #376]	; (8002e88 <HAL_DMA_Abort_IT+0x1ec>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d038      	beq.n	8002d84 <HAL_DMA_Abort_IT+0xe8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a5d      	ldr	r2, [pc, #372]	; (8002e8c <HAL_DMA_Abort_IT+0x1f0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d030      	beq.n	8002d7e <HAL_DMA_Abort_IT+0xe2>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a5b      	ldr	r2, [pc, #364]	; (8002e90 <HAL_DMA_Abort_IT+0x1f4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d028      	beq.n	8002d78 <HAL_DMA_Abort_IT+0xdc>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a53      	ldr	r2, [pc, #332]	; (8002e78 <HAL_DMA_Abort_IT+0x1dc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d020      	beq.n	8002d72 <HAL_DMA_Abort_IT+0xd6>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a57      	ldr	r2, [pc, #348]	; (8002e94 <HAL_DMA_Abort_IT+0x1f8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d019      	beq.n	8002d6e <HAL_DMA_Abort_IT+0xd2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a56      	ldr	r2, [pc, #344]	; (8002e98 <HAL_DMA_Abort_IT+0x1fc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d012      	beq.n	8002d6a <HAL_DMA_Abort_IT+0xce>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a54      	ldr	r2, [pc, #336]	; (8002e9c <HAL_DMA_Abort_IT+0x200>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00a      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a53      	ldr	r2, [pc, #332]	; (8002ea0 <HAL_DMA_Abort_IT+0x204>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d102      	bne.n	8002d5e <HAL_DMA_Abort_IT+0xc2>
 8002d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5c:	e01b      	b.n	8002d96 <HAL_DMA_Abort_IT+0xfa>
 8002d5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d62:	e018      	b.n	8002d96 <HAL_DMA_Abort_IT+0xfa>
 8002d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d68:	e015      	b.n	8002d96 <HAL_DMA_Abort_IT+0xfa>
 8002d6a:	2310      	movs	r3, #16
 8002d6c:	e013      	b.n	8002d96 <HAL_DMA_Abort_IT+0xfa>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e011      	b.n	8002d96 <HAL_DMA_Abort_IT+0xfa>
 8002d72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d76:	e00e      	b.n	8002d96 <HAL_DMA_Abort_IT+0xfa>
 8002d78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d7c:	e00b      	b.n	8002d96 <HAL_DMA_Abort_IT+0xfa>
 8002d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d82:	e008      	b.n	8002d96 <HAL_DMA_Abort_IT+0xfa>
 8002d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d88:	e005      	b.n	8002d96 <HAL_DMA_Abort_IT+0xfa>
 8002d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d8e:	e002      	b.n	8002d96 <HAL_DMA_Abort_IT+0xfa>
 8002d90:	2310      	movs	r3, #16
 8002d92:	e000      	b.n	8002d96 <HAL_DMA_Abort_IT+0xfa>
 8002d94:	2301      	movs	r3, #1
 8002d96:	4a43      	ldr	r2, [pc, #268]	; (8002ea4 <HAL_DMA_Abort_IT+0x208>)
 8002d98:	6053      	str	r3, [r2, #4]
 8002d9a:	e057      	b.n	8002e4c <HAL_DMA_Abort_IT+0x1b0>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a36      	ldr	r2, [pc, #216]	; (8002e7c <HAL_DMA_Abort_IT+0x1e0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d04f      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x1aa>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a35      	ldr	r2, [pc, #212]	; (8002e80 <HAL_DMA_Abort_IT+0x1e4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d048      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x1a6>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a33      	ldr	r2, [pc, #204]	; (8002e84 <HAL_DMA_Abort_IT+0x1e8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d040      	beq.n	8002e3c <HAL_DMA_Abort_IT+0x1a0>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a32      	ldr	r2, [pc, #200]	; (8002e88 <HAL_DMA_Abort_IT+0x1ec>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d038      	beq.n	8002e36 <HAL_DMA_Abort_IT+0x19a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a30      	ldr	r2, [pc, #192]	; (8002e8c <HAL_DMA_Abort_IT+0x1f0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d030      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x194>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2f      	ldr	r2, [pc, #188]	; (8002e90 <HAL_DMA_Abort_IT+0x1f4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d028      	beq.n	8002e2a <HAL_DMA_Abort_IT+0x18e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a26      	ldr	r2, [pc, #152]	; (8002e78 <HAL_DMA_Abort_IT+0x1dc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d020      	beq.n	8002e24 <HAL_DMA_Abort_IT+0x188>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <HAL_DMA_Abort_IT+0x1f8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d019      	beq.n	8002e20 <HAL_DMA_Abort_IT+0x184>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a29      	ldr	r2, [pc, #164]	; (8002e98 <HAL_DMA_Abort_IT+0x1fc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d012      	beq.n	8002e1c <HAL_DMA_Abort_IT+0x180>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a28      	ldr	r2, [pc, #160]	; (8002e9c <HAL_DMA_Abort_IT+0x200>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00a      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x17a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a26      	ldr	r2, [pc, #152]	; (8002ea0 <HAL_DMA_Abort_IT+0x204>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d102      	bne.n	8002e10 <HAL_DMA_Abort_IT+0x174>
 8002e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e0e:	e01b      	b.n	8002e48 <HAL_DMA_Abort_IT+0x1ac>
 8002e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e14:	e018      	b.n	8002e48 <HAL_DMA_Abort_IT+0x1ac>
 8002e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e1a:	e015      	b.n	8002e48 <HAL_DMA_Abort_IT+0x1ac>
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	e013      	b.n	8002e48 <HAL_DMA_Abort_IT+0x1ac>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e011      	b.n	8002e48 <HAL_DMA_Abort_IT+0x1ac>
 8002e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e28:	e00e      	b.n	8002e48 <HAL_DMA_Abort_IT+0x1ac>
 8002e2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e2e:	e00b      	b.n	8002e48 <HAL_DMA_Abort_IT+0x1ac>
 8002e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e34:	e008      	b.n	8002e48 <HAL_DMA_Abort_IT+0x1ac>
 8002e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e3a:	e005      	b.n	8002e48 <HAL_DMA_Abort_IT+0x1ac>
 8002e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e40:	e002      	b.n	8002e48 <HAL_DMA_Abort_IT+0x1ac>
 8002e42:	2310      	movs	r3, #16
 8002e44:	e000      	b.n	8002e48 <HAL_DMA_Abort_IT+0x1ac>
 8002e46:	2301      	movs	r3, #1
 8002e48:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <HAL_DMA_Abort_IT+0x20c>)
 8002e4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	4798      	blx	r3
    } 
  }
  return status;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40020080 	.word	0x40020080
 8002e7c:	40020008 	.word	0x40020008
 8002e80:	4002001c 	.word	0x4002001c
 8002e84:	40020030 	.word	0x40020030
 8002e88:	40020044 	.word	0x40020044
 8002e8c:	40020058 	.word	0x40020058
 8002e90:	4002006c 	.word	0x4002006c
 8002e94:	40020408 	.word	0x40020408
 8002e98:	4002041c 	.word	0x4002041c
 8002e9c:	40020430 	.word	0x40020430
 8002ea0:	40020444 	.word	0x40020444
 8002ea4:	40020400 	.word	0x40020400
 8002ea8:	40020000 	.word	0x40020000

08002eac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	2204      	movs	r2, #4
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80f1 	beq.w	80030b8 <HAL_DMA_IRQHandler+0x20c>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80eb 	beq.w	80030b8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0204 	bic.w	r2, r2, #4
 8002efe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b5f      	ldr	r3, [pc, #380]	; (8003084 <HAL_DMA_IRQHandler+0x1d8>)
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d958      	bls.n	8002fbe <HAL_DMA_IRQHandler+0x112>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a5d      	ldr	r2, [pc, #372]	; (8003088 <HAL_DMA_IRQHandler+0x1dc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d04f      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x10a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a5c      	ldr	r2, [pc, #368]	; (800308c <HAL_DMA_IRQHandler+0x1e0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d048      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x106>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a5a      	ldr	r2, [pc, #360]	; (8003090 <HAL_DMA_IRQHandler+0x1e4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d040      	beq.n	8002fac <HAL_DMA_IRQHandler+0x100>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a59      	ldr	r2, [pc, #356]	; (8003094 <HAL_DMA_IRQHandler+0x1e8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d038      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xfa>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a57      	ldr	r2, [pc, #348]	; (8003098 <HAL_DMA_IRQHandler+0x1ec>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d030      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0xf4>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a56      	ldr	r2, [pc, #344]	; (800309c <HAL_DMA_IRQHandler+0x1f0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d028      	beq.n	8002f9a <HAL_DMA_IRQHandler+0xee>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a4d      	ldr	r2, [pc, #308]	; (8003084 <HAL_DMA_IRQHandler+0x1d8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d020      	beq.n	8002f94 <HAL_DMA_IRQHandler+0xe8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <HAL_DMA_IRQHandler+0x1f4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d019      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xe4>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a50      	ldr	r2, [pc, #320]	; (80030a4 <HAL_DMA_IRQHandler+0x1f8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d012      	beq.n	8002f8c <HAL_DMA_IRQHandler+0xe0>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a4f      	ldr	r2, [pc, #316]	; (80030a8 <HAL_DMA_IRQHandler+0x1fc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00a      	beq.n	8002f86 <HAL_DMA_IRQHandler+0xda>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a4d      	ldr	r2, [pc, #308]	; (80030ac <HAL_DMA_IRQHandler+0x200>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d102      	bne.n	8002f80 <HAL_DMA_IRQHandler+0xd4>
 8002f7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f7e:	e01b      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x10c>
 8002f80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f84:	e018      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x10c>
 8002f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f8a:	e015      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x10c>
 8002f8c:	2340      	movs	r3, #64	; 0x40
 8002f8e:	e013      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x10c>
 8002f90:	2304      	movs	r3, #4
 8002f92:	e011      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x10c>
 8002f94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f98:	e00e      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x10c>
 8002f9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f9e:	e00b      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x10c>
 8002fa0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fa4:	e008      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x10c>
 8002fa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002faa:	e005      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x10c>
 8002fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb0:	e002      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x10c>
 8002fb2:	2340      	movs	r3, #64	; 0x40
 8002fb4:	e000      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x10c>
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	4a3d      	ldr	r2, [pc, #244]	; (80030b0 <HAL_DMA_IRQHandler+0x204>)
 8002fba:	6053      	str	r3, [r2, #4]
 8002fbc:	e057      	b.n	800306e <HAL_DMA_IRQHandler+0x1c2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a31      	ldr	r2, [pc, #196]	; (8003088 <HAL_DMA_IRQHandler+0x1dc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d04f      	beq.n	8003068 <HAL_DMA_IRQHandler+0x1bc>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2f      	ldr	r2, [pc, #188]	; (800308c <HAL_DMA_IRQHandler+0x1e0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d048      	beq.n	8003064 <HAL_DMA_IRQHandler+0x1b8>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2e      	ldr	r2, [pc, #184]	; (8003090 <HAL_DMA_IRQHandler+0x1e4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d040      	beq.n	800305e <HAL_DMA_IRQHandler+0x1b2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a2c      	ldr	r2, [pc, #176]	; (8003094 <HAL_DMA_IRQHandler+0x1e8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d038      	beq.n	8003058 <HAL_DMA_IRQHandler+0x1ac>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2b      	ldr	r2, [pc, #172]	; (8003098 <HAL_DMA_IRQHandler+0x1ec>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d030      	beq.n	8003052 <HAL_DMA_IRQHandler+0x1a6>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a29      	ldr	r2, [pc, #164]	; (800309c <HAL_DMA_IRQHandler+0x1f0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d028      	beq.n	800304c <HAL_DMA_IRQHandler+0x1a0>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a21      	ldr	r2, [pc, #132]	; (8003084 <HAL_DMA_IRQHandler+0x1d8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d020      	beq.n	8003046 <HAL_DMA_IRQHandler+0x19a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a25      	ldr	r2, [pc, #148]	; (80030a0 <HAL_DMA_IRQHandler+0x1f4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d019      	beq.n	8003042 <HAL_DMA_IRQHandler+0x196>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a24      	ldr	r2, [pc, #144]	; (80030a4 <HAL_DMA_IRQHandler+0x1f8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d012      	beq.n	800303e <HAL_DMA_IRQHandler+0x192>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a22      	ldr	r2, [pc, #136]	; (80030a8 <HAL_DMA_IRQHandler+0x1fc>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00a      	beq.n	8003038 <HAL_DMA_IRQHandler+0x18c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a21      	ldr	r2, [pc, #132]	; (80030ac <HAL_DMA_IRQHandler+0x200>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d102      	bne.n	8003032 <HAL_DMA_IRQHandler+0x186>
 800302c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003030:	e01b      	b.n	800306a <HAL_DMA_IRQHandler+0x1be>
 8003032:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003036:	e018      	b.n	800306a <HAL_DMA_IRQHandler+0x1be>
 8003038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800303c:	e015      	b.n	800306a <HAL_DMA_IRQHandler+0x1be>
 800303e:	2340      	movs	r3, #64	; 0x40
 8003040:	e013      	b.n	800306a <HAL_DMA_IRQHandler+0x1be>
 8003042:	2304      	movs	r3, #4
 8003044:	e011      	b.n	800306a <HAL_DMA_IRQHandler+0x1be>
 8003046:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800304a:	e00e      	b.n	800306a <HAL_DMA_IRQHandler+0x1be>
 800304c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003050:	e00b      	b.n	800306a <HAL_DMA_IRQHandler+0x1be>
 8003052:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003056:	e008      	b.n	800306a <HAL_DMA_IRQHandler+0x1be>
 8003058:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800305c:	e005      	b.n	800306a <HAL_DMA_IRQHandler+0x1be>
 800305e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003062:	e002      	b.n	800306a <HAL_DMA_IRQHandler+0x1be>
 8003064:	2340      	movs	r3, #64	; 0x40
 8003066:	e000      	b.n	800306a <HAL_DMA_IRQHandler+0x1be>
 8003068:	2304      	movs	r3, #4
 800306a:	4a12      	ldr	r2, [pc, #72]	; (80030b4 <HAL_DMA_IRQHandler+0x208>)
 800306c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8136 	beq.w	80032e4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003080:	e130      	b.n	80032e4 <HAL_DMA_IRQHandler+0x438>
 8003082:	bf00      	nop
 8003084:	40020080 	.word	0x40020080
 8003088:	40020008 	.word	0x40020008
 800308c:	4002001c 	.word	0x4002001c
 8003090:	40020030 	.word	0x40020030
 8003094:	40020044 	.word	0x40020044
 8003098:	40020058 	.word	0x40020058
 800309c:	4002006c 	.word	0x4002006c
 80030a0:	40020408 	.word	0x40020408
 80030a4:	4002041c 	.word	0x4002041c
 80030a8:	40020430 	.word	0x40020430
 80030ac:	40020444 	.word	0x40020444
 80030b0:	40020400 	.word	0x40020400
 80030b4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2202      	movs	r2, #2
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80dd 	beq.w	8003284 <HAL_DMA_IRQHandler+0x3d8>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80d7 	beq.w	8003284 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10b      	bne.n	80030fc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 020a 	bic.w	r2, r2, #10
 80030f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	4b7b      	ldr	r3, [pc, #492]	; (80032f0 <HAL_DMA_IRQHandler+0x444>)
 8003104:	429a      	cmp	r2, r3
 8003106:	d958      	bls.n	80031ba <HAL_DMA_IRQHandler+0x30e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a79      	ldr	r2, [pc, #484]	; (80032f4 <HAL_DMA_IRQHandler+0x448>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d04f      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x306>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a78      	ldr	r2, [pc, #480]	; (80032f8 <HAL_DMA_IRQHandler+0x44c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d048      	beq.n	80031ae <HAL_DMA_IRQHandler+0x302>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a76      	ldr	r2, [pc, #472]	; (80032fc <HAL_DMA_IRQHandler+0x450>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d040      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x2fc>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a75      	ldr	r2, [pc, #468]	; (8003300 <HAL_DMA_IRQHandler+0x454>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d038      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x2f6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a73      	ldr	r2, [pc, #460]	; (8003304 <HAL_DMA_IRQHandler+0x458>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d030      	beq.n	800319c <HAL_DMA_IRQHandler+0x2f0>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a72      	ldr	r2, [pc, #456]	; (8003308 <HAL_DMA_IRQHandler+0x45c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d028      	beq.n	8003196 <HAL_DMA_IRQHandler+0x2ea>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a69      	ldr	r2, [pc, #420]	; (80032f0 <HAL_DMA_IRQHandler+0x444>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d020      	beq.n	8003190 <HAL_DMA_IRQHandler+0x2e4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6e      	ldr	r2, [pc, #440]	; (800330c <HAL_DMA_IRQHandler+0x460>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d019      	beq.n	800318c <HAL_DMA_IRQHandler+0x2e0>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a6c      	ldr	r2, [pc, #432]	; (8003310 <HAL_DMA_IRQHandler+0x464>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d012      	beq.n	8003188 <HAL_DMA_IRQHandler+0x2dc>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a6b      	ldr	r2, [pc, #428]	; (8003314 <HAL_DMA_IRQHandler+0x468>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00a      	beq.n	8003182 <HAL_DMA_IRQHandler+0x2d6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a69      	ldr	r2, [pc, #420]	; (8003318 <HAL_DMA_IRQHandler+0x46c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d102      	bne.n	800317c <HAL_DMA_IRQHandler+0x2d0>
 8003176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800317a:	e01b      	b.n	80031b4 <HAL_DMA_IRQHandler+0x308>
 800317c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003180:	e018      	b.n	80031b4 <HAL_DMA_IRQHandler+0x308>
 8003182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003186:	e015      	b.n	80031b4 <HAL_DMA_IRQHandler+0x308>
 8003188:	2320      	movs	r3, #32
 800318a:	e013      	b.n	80031b4 <HAL_DMA_IRQHandler+0x308>
 800318c:	2302      	movs	r3, #2
 800318e:	e011      	b.n	80031b4 <HAL_DMA_IRQHandler+0x308>
 8003190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003194:	e00e      	b.n	80031b4 <HAL_DMA_IRQHandler+0x308>
 8003196:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800319a:	e00b      	b.n	80031b4 <HAL_DMA_IRQHandler+0x308>
 800319c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031a0:	e008      	b.n	80031b4 <HAL_DMA_IRQHandler+0x308>
 80031a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031a6:	e005      	b.n	80031b4 <HAL_DMA_IRQHandler+0x308>
 80031a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ac:	e002      	b.n	80031b4 <HAL_DMA_IRQHandler+0x308>
 80031ae:	2320      	movs	r3, #32
 80031b0:	e000      	b.n	80031b4 <HAL_DMA_IRQHandler+0x308>
 80031b2:	2302      	movs	r3, #2
 80031b4:	4a59      	ldr	r2, [pc, #356]	; (800331c <HAL_DMA_IRQHandler+0x470>)
 80031b6:	6053      	str	r3, [r2, #4]
 80031b8:	e057      	b.n	800326a <HAL_DMA_IRQHandler+0x3be>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a4d      	ldr	r2, [pc, #308]	; (80032f4 <HAL_DMA_IRQHandler+0x448>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d04f      	beq.n	8003264 <HAL_DMA_IRQHandler+0x3b8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a4b      	ldr	r2, [pc, #300]	; (80032f8 <HAL_DMA_IRQHandler+0x44c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d048      	beq.n	8003260 <HAL_DMA_IRQHandler+0x3b4>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a4a      	ldr	r2, [pc, #296]	; (80032fc <HAL_DMA_IRQHandler+0x450>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d040      	beq.n	800325a <HAL_DMA_IRQHandler+0x3ae>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a48      	ldr	r2, [pc, #288]	; (8003300 <HAL_DMA_IRQHandler+0x454>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d038      	beq.n	8003254 <HAL_DMA_IRQHandler+0x3a8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a47      	ldr	r2, [pc, #284]	; (8003304 <HAL_DMA_IRQHandler+0x458>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d030      	beq.n	800324e <HAL_DMA_IRQHandler+0x3a2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a45      	ldr	r2, [pc, #276]	; (8003308 <HAL_DMA_IRQHandler+0x45c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d028      	beq.n	8003248 <HAL_DMA_IRQHandler+0x39c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a3d      	ldr	r2, [pc, #244]	; (80032f0 <HAL_DMA_IRQHandler+0x444>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d020      	beq.n	8003242 <HAL_DMA_IRQHandler+0x396>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a41      	ldr	r2, [pc, #260]	; (800330c <HAL_DMA_IRQHandler+0x460>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d019      	beq.n	800323e <HAL_DMA_IRQHandler+0x392>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a40      	ldr	r2, [pc, #256]	; (8003310 <HAL_DMA_IRQHandler+0x464>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d012      	beq.n	800323a <HAL_DMA_IRQHandler+0x38e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a3e      	ldr	r2, [pc, #248]	; (8003314 <HAL_DMA_IRQHandler+0x468>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00a      	beq.n	8003234 <HAL_DMA_IRQHandler+0x388>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a3d      	ldr	r2, [pc, #244]	; (8003318 <HAL_DMA_IRQHandler+0x46c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d102      	bne.n	800322e <HAL_DMA_IRQHandler+0x382>
 8003228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800322c:	e01b      	b.n	8003266 <HAL_DMA_IRQHandler+0x3ba>
 800322e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003232:	e018      	b.n	8003266 <HAL_DMA_IRQHandler+0x3ba>
 8003234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003238:	e015      	b.n	8003266 <HAL_DMA_IRQHandler+0x3ba>
 800323a:	2320      	movs	r3, #32
 800323c:	e013      	b.n	8003266 <HAL_DMA_IRQHandler+0x3ba>
 800323e:	2302      	movs	r3, #2
 8003240:	e011      	b.n	8003266 <HAL_DMA_IRQHandler+0x3ba>
 8003242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003246:	e00e      	b.n	8003266 <HAL_DMA_IRQHandler+0x3ba>
 8003248:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800324c:	e00b      	b.n	8003266 <HAL_DMA_IRQHandler+0x3ba>
 800324e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003252:	e008      	b.n	8003266 <HAL_DMA_IRQHandler+0x3ba>
 8003254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003258:	e005      	b.n	8003266 <HAL_DMA_IRQHandler+0x3ba>
 800325a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800325e:	e002      	b.n	8003266 <HAL_DMA_IRQHandler+0x3ba>
 8003260:	2320      	movs	r3, #32
 8003262:	e000      	b.n	8003266 <HAL_DMA_IRQHandler+0x3ba>
 8003264:	2302      	movs	r3, #2
 8003266:	4a2e      	ldr	r2, [pc, #184]	; (8003320 <HAL_DMA_IRQHandler+0x474>)
 8003268:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	2b00      	cmp	r3, #0
 8003278:	d034      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003282:	e02f      	b.n	80032e4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	2208      	movs	r2, #8
 800328a:	409a      	lsls	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d028      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x43a>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d023      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 020e 	bic.w	r2, r2, #14
 80032ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	2101      	movs	r1, #1
 80032b8:	fa01 f202 	lsl.w	r2, r1, r2
 80032bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
    }
  }
  return;
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
}
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40020080 	.word	0x40020080
 80032f4:	40020008 	.word	0x40020008
 80032f8:	4002001c 	.word	0x4002001c
 80032fc:	40020030 	.word	0x40020030
 8003300:	40020044 	.word	0x40020044
 8003304:	40020058 	.word	0x40020058
 8003308:	4002006c 	.word	0x4002006c
 800330c:	40020408 	.word	0x40020408
 8003310:	4002041c 	.word	0x4002041c
 8003314:	40020430 	.word	0x40020430
 8003318:	40020444 	.word	0x40020444
 800331c:	40020400 	.word	0x40020400
 8003320:	40020000 	.word	0x40020000

08003324 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	2101      	movs	r1, #1
 800333c:	fa01 f202 	lsl.w	r2, r1, r2
 8003340:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b10      	cmp	r3, #16
 8003350:	d108      	bne.n	8003364 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003362:	e007      	b.n	8003374 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	60da      	str	r2, [r3, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
	...

08003380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003380:	b480      	push	{r7}
 8003382:	b08b      	sub	sp, #44	; 0x2c
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800338a:	2300      	movs	r3, #0
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003392:	e179      	b.n	8003688 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003394:	2201      	movs	r2, #1
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	f040 8168 	bne.w	8003682 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4a96      	ldr	r2, [pc, #600]	; (8003610 <HAL_GPIO_Init+0x290>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d05e      	beq.n	800347a <HAL_GPIO_Init+0xfa>
 80033bc:	4a94      	ldr	r2, [pc, #592]	; (8003610 <HAL_GPIO_Init+0x290>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d875      	bhi.n	80034ae <HAL_GPIO_Init+0x12e>
 80033c2:	4a94      	ldr	r2, [pc, #592]	; (8003614 <HAL_GPIO_Init+0x294>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d058      	beq.n	800347a <HAL_GPIO_Init+0xfa>
 80033c8:	4a92      	ldr	r2, [pc, #584]	; (8003614 <HAL_GPIO_Init+0x294>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d86f      	bhi.n	80034ae <HAL_GPIO_Init+0x12e>
 80033ce:	4a92      	ldr	r2, [pc, #584]	; (8003618 <HAL_GPIO_Init+0x298>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d052      	beq.n	800347a <HAL_GPIO_Init+0xfa>
 80033d4:	4a90      	ldr	r2, [pc, #576]	; (8003618 <HAL_GPIO_Init+0x298>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d869      	bhi.n	80034ae <HAL_GPIO_Init+0x12e>
 80033da:	4a90      	ldr	r2, [pc, #576]	; (800361c <HAL_GPIO_Init+0x29c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d04c      	beq.n	800347a <HAL_GPIO_Init+0xfa>
 80033e0:	4a8e      	ldr	r2, [pc, #568]	; (800361c <HAL_GPIO_Init+0x29c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d863      	bhi.n	80034ae <HAL_GPIO_Init+0x12e>
 80033e6:	4a8e      	ldr	r2, [pc, #568]	; (8003620 <HAL_GPIO_Init+0x2a0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d046      	beq.n	800347a <HAL_GPIO_Init+0xfa>
 80033ec:	4a8c      	ldr	r2, [pc, #560]	; (8003620 <HAL_GPIO_Init+0x2a0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d85d      	bhi.n	80034ae <HAL_GPIO_Init+0x12e>
 80033f2:	2b12      	cmp	r3, #18
 80033f4:	d82a      	bhi.n	800344c <HAL_GPIO_Init+0xcc>
 80033f6:	2b12      	cmp	r3, #18
 80033f8:	d859      	bhi.n	80034ae <HAL_GPIO_Init+0x12e>
 80033fa:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <HAL_GPIO_Init+0x80>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	0800347b 	.word	0x0800347b
 8003404:	08003455 	.word	0x08003455
 8003408:	08003467 	.word	0x08003467
 800340c:	080034a9 	.word	0x080034a9
 8003410:	080034af 	.word	0x080034af
 8003414:	080034af 	.word	0x080034af
 8003418:	080034af 	.word	0x080034af
 800341c:	080034af 	.word	0x080034af
 8003420:	080034af 	.word	0x080034af
 8003424:	080034af 	.word	0x080034af
 8003428:	080034af 	.word	0x080034af
 800342c:	080034af 	.word	0x080034af
 8003430:	080034af 	.word	0x080034af
 8003434:	080034af 	.word	0x080034af
 8003438:	080034af 	.word	0x080034af
 800343c:	080034af 	.word	0x080034af
 8003440:	080034af 	.word	0x080034af
 8003444:	0800345d 	.word	0x0800345d
 8003448:	08003471 	.word	0x08003471
 800344c:	4a75      	ldr	r2, [pc, #468]	; (8003624 <HAL_GPIO_Init+0x2a4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003452:	e02c      	b.n	80034ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	623b      	str	r3, [r7, #32]
          break;
 800345a:	e029      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	3304      	adds	r3, #4
 8003462:	623b      	str	r3, [r7, #32]
          break;
 8003464:	e024      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	3308      	adds	r3, #8
 800346c:	623b      	str	r3, [r7, #32]
          break;
 800346e:	e01f      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	330c      	adds	r3, #12
 8003476:	623b      	str	r3, [r7, #32]
          break;
 8003478:	e01a      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003482:	2304      	movs	r3, #4
 8003484:	623b      	str	r3, [r7, #32]
          break;
 8003486:	e013      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d105      	bne.n	800349c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003490:	2308      	movs	r3, #8
 8003492:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	611a      	str	r2, [r3, #16]
          break;
 800349a:	e009      	b.n	80034b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800349c:	2308      	movs	r3, #8
 800349e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	615a      	str	r2, [r3, #20]
          break;
 80034a6:	e003      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034a8:	2300      	movs	r3, #0
 80034aa:	623b      	str	r3, [r7, #32]
          break;
 80034ac:	e000      	b.n	80034b0 <HAL_GPIO_Init+0x130>
          break;
 80034ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2bff      	cmp	r3, #255	; 0xff
 80034b4:	d801      	bhi.n	80034ba <HAL_GPIO_Init+0x13a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	e001      	b.n	80034be <HAL_GPIO_Init+0x13e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2bff      	cmp	r3, #255	; 0xff
 80034c4:	d802      	bhi.n	80034cc <HAL_GPIO_Init+0x14c>
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	e002      	b.n	80034d2 <HAL_GPIO_Init+0x152>
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	3b08      	subs	r3, #8
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	210f      	movs	r1, #15
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	401a      	ands	r2, r3
 80034e4:	6a39      	ldr	r1, [r7, #32]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	431a      	orrs	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80c1 	beq.w	8003682 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003500:	4b49      	ldr	r3, [pc, #292]	; (8003628 <HAL_GPIO_Init+0x2a8>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4a48      	ldr	r2, [pc, #288]	; (8003628 <HAL_GPIO_Init+0x2a8>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6193      	str	r3, [r2, #24]
 800350c:	4b46      	ldr	r3, [pc, #280]	; (8003628 <HAL_GPIO_Init+0x2a8>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003518:	4a44      	ldr	r2, [pc, #272]	; (800362c <HAL_GPIO_Init+0x2ac>)
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	3302      	adds	r3, #2
 8003520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003524:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	220f      	movs	r2, #15
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3c      	ldr	r2, [pc, #240]	; (8003630 <HAL_GPIO_Init+0x2b0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d01f      	beq.n	8003584 <HAL_GPIO_Init+0x204>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3b      	ldr	r2, [pc, #236]	; (8003634 <HAL_GPIO_Init+0x2b4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d019      	beq.n	8003580 <HAL_GPIO_Init+0x200>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3a      	ldr	r2, [pc, #232]	; (8003638 <HAL_GPIO_Init+0x2b8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d013      	beq.n	800357c <HAL_GPIO_Init+0x1fc>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a39      	ldr	r2, [pc, #228]	; (800363c <HAL_GPIO_Init+0x2bc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00d      	beq.n	8003578 <HAL_GPIO_Init+0x1f8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a38      	ldr	r2, [pc, #224]	; (8003640 <HAL_GPIO_Init+0x2c0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d007      	beq.n	8003574 <HAL_GPIO_Init+0x1f4>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a37      	ldr	r2, [pc, #220]	; (8003644 <HAL_GPIO_Init+0x2c4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d101      	bne.n	8003570 <HAL_GPIO_Init+0x1f0>
 800356c:	2305      	movs	r3, #5
 800356e:	e00a      	b.n	8003586 <HAL_GPIO_Init+0x206>
 8003570:	2306      	movs	r3, #6
 8003572:	e008      	b.n	8003586 <HAL_GPIO_Init+0x206>
 8003574:	2304      	movs	r3, #4
 8003576:	e006      	b.n	8003586 <HAL_GPIO_Init+0x206>
 8003578:	2303      	movs	r3, #3
 800357a:	e004      	b.n	8003586 <HAL_GPIO_Init+0x206>
 800357c:	2302      	movs	r3, #2
 800357e:	e002      	b.n	8003586 <HAL_GPIO_Init+0x206>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_GPIO_Init+0x206>
 8003584:	2300      	movs	r3, #0
 8003586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003588:	f002 0203 	and.w	r2, r2, #3
 800358c:	0092      	lsls	r2, r2, #2
 800358e:	4093      	lsls	r3, r2
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003596:	4925      	ldr	r1, [pc, #148]	; (800362c <HAL_GPIO_Init+0x2ac>)
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	3302      	adds	r3, #2
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d006      	beq.n	80035be <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <HAL_GPIO_Init+0x2c8>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4924      	ldr	r1, [pc, #144]	; (8003648 <HAL_GPIO_Init+0x2c8>)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]
 80035bc:	e006      	b.n	80035cc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035be:	4b22      	ldr	r3, [pc, #136]	; (8003648 <HAL_GPIO_Init+0x2c8>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	4920      	ldr	r1, [pc, #128]	; (8003648 <HAL_GPIO_Init+0x2c8>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d006      	beq.n	80035e6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_GPIO_Init+0x2c8>)
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	491a      	ldr	r1, [pc, #104]	; (8003648 <HAL_GPIO_Init+0x2c8>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
 80035e4:	e006      	b.n	80035f4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035e6:	4b18      	ldr	r3, [pc, #96]	; (8003648 <HAL_GPIO_Init+0x2c8>)
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	4916      	ldr	r1, [pc, #88]	; (8003648 <HAL_GPIO_Init+0x2c8>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d025      	beq.n	800364c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_GPIO_Init+0x2c8>)
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	4910      	ldr	r1, [pc, #64]	; (8003648 <HAL_GPIO_Init+0x2c8>)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	4313      	orrs	r3, r2
 800360a:	608b      	str	r3, [r1, #8]
 800360c:	e025      	b.n	800365a <HAL_GPIO_Init+0x2da>
 800360e:	bf00      	nop
 8003610:	10320000 	.word	0x10320000
 8003614:	10310000 	.word	0x10310000
 8003618:	10220000 	.word	0x10220000
 800361c:	10210000 	.word	0x10210000
 8003620:	10120000 	.word	0x10120000
 8003624:	10110000 	.word	0x10110000
 8003628:	40021000 	.word	0x40021000
 800362c:	40010000 	.word	0x40010000
 8003630:	40010800 	.word	0x40010800
 8003634:	40010c00 	.word	0x40010c00
 8003638:	40011000 	.word	0x40011000
 800363c:	40011400 	.word	0x40011400
 8003640:	40011800 	.word	0x40011800
 8003644:	40011c00 	.word	0x40011c00
 8003648:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800364c:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <HAL_GPIO_Init+0x324>)
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	43db      	mvns	r3, r3
 8003654:	4913      	ldr	r1, [pc, #76]	; (80036a4 <HAL_GPIO_Init+0x324>)
 8003656:	4013      	ands	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003666:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <HAL_GPIO_Init+0x324>)
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	490e      	ldr	r1, [pc, #56]	; (80036a4 <HAL_GPIO_Init+0x324>)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	4313      	orrs	r3, r2
 8003670:	60cb      	str	r3, [r1, #12]
 8003672:	e006      	b.n	8003682 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_GPIO_Init+0x324>)
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	43db      	mvns	r3, r3
 800367c:	4909      	ldr	r1, [pc, #36]	; (80036a4 <HAL_GPIO_Init+0x324>)
 800367e:	4013      	ands	r3, r2
 8003680:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	3301      	adds	r3, #1
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	fa22 f303 	lsr.w	r3, r2, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	f47f ae7e 	bne.w	8003394 <HAL_GPIO_Init+0x14>
  }
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	372c      	adds	r7, #44	; 0x2c
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	40010400 	.word	0x40010400

080036a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e272      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8087 	beq.w	80037d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036c8:	4b92      	ldr	r3, [pc, #584]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d00c      	beq.n	80036ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036d4:	4b8f      	ldr	r3, [pc, #572]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d112      	bne.n	8003706 <HAL_RCC_OscConfig+0x5e>
 80036e0:	4b8c      	ldr	r3, [pc, #560]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ec:	d10b      	bne.n	8003706 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ee:	4b89      	ldr	r3, [pc, #548]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d06c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x12c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d168      	bne.n	80037d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e24c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x76>
 8003710:	4b80      	ldr	r3, [pc, #512]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a7f      	ldr	r2, [pc, #508]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	e02e      	b.n	800377c <HAL_RCC_OscConfig+0xd4>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0x98>
 8003726:	4b7b      	ldr	r3, [pc, #492]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7a      	ldr	r2, [pc, #488]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800372c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b78      	ldr	r3, [pc, #480]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a77      	ldr	r2, [pc, #476]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e01d      	b.n	800377c <HAL_RCC_OscConfig+0xd4>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0xbc>
 800374a:	4b72      	ldr	r3, [pc, #456]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a71      	ldr	r2, [pc, #452]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b6f      	ldr	r3, [pc, #444]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a6e      	ldr	r2, [pc, #440]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e00b      	b.n	800377c <HAL_RCC_OscConfig+0xd4>
 8003764:	4b6b      	ldr	r3, [pc, #428]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a6a      	ldr	r2, [pc, #424]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800376a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4b68      	ldr	r3, [pc, #416]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a67      	ldr	r2, [pc, #412]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d013      	beq.n	80037ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe fe1a 	bl	80023bc <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800378c:	f7fe fe16 	bl	80023bc <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e200      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	4b5d      	ldr	r3, [pc, #372]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0xe4>
 80037aa:	e014      	b.n	80037d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe fe06 	bl	80023bc <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fe fe02 	bl	80023bc <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1ec      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c6:	4b53      	ldr	r3, [pc, #332]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x10c>
 80037d2:	e000      	b.n	80037d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d063      	beq.n	80038aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e2:	4b4c      	ldr	r3, [pc, #304]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037ee:	4b49      	ldr	r3, [pc, #292]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d11c      	bne.n	8003834 <HAL_RCC_OscConfig+0x18c>
 80037fa:	4b46      	ldr	r3, [pc, #280]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d116      	bne.n	8003834 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003806:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_RCC_OscConfig+0x176>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d001      	beq.n	800381e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e1c0      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381e:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4939      	ldr	r1, [pc, #228]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003832:	e03a      	b.n	80038aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d020      	beq.n	800387e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800383c:	4b36      	ldr	r3, [pc, #216]	; (8003918 <HAL_RCC_OscConfig+0x270>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fe fdbb 	bl	80023bc <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384a:	f7fe fdb7 	bl	80023bc <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e1a1      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385c:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4927      	ldr	r1, [pc, #156]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]
 800387c:	e015      	b.n	80038aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <HAL_RCC_OscConfig+0x270>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7fe fd9a 	bl	80023bc <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388c:	f7fe fd96 	bl	80023bc <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e180      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d03a      	beq.n	800392c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d019      	beq.n	80038f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038be:	4b17      	ldr	r3, [pc, #92]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c4:	f7fe fd7a 	bl	80023bc <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038cc:	f7fe fd76 	bl	80023bc <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e160      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038ea:	2001      	movs	r0, #1
 80038ec:	f000 fad8 	bl	8003ea0 <RCC_Delay>
 80038f0:	e01c      	b.n	800392c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f8:	f7fe fd60 	bl	80023bc <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fe:	e00f      	b.n	8003920 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003900:	f7fe fd5c 	bl	80023bc <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d908      	bls.n	8003920 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e146      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	42420000 	.word	0x42420000
 800391c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003920:	4b92      	ldr	r3, [pc, #584]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e9      	bne.n	8003900 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80a6 	beq.w	8003a86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393a:	2300      	movs	r3, #0
 800393c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393e:	4b8b      	ldr	r3, [pc, #556]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10d      	bne.n	8003966 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	4b88      	ldr	r3, [pc, #544]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	4a87      	ldr	r2, [pc, #540]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003954:	61d3      	str	r3, [r2, #28]
 8003956:	4b85      	ldr	r3, [pc, #532]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003962:	2301      	movs	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003966:	4b82      	ldr	r3, [pc, #520]	; (8003b70 <HAL_RCC_OscConfig+0x4c8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d118      	bne.n	80039a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003972:	4b7f      	ldr	r3, [pc, #508]	; (8003b70 <HAL_RCC_OscConfig+0x4c8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a7e      	ldr	r2, [pc, #504]	; (8003b70 <HAL_RCC_OscConfig+0x4c8>)
 8003978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800397e:	f7fe fd1d 	bl	80023bc <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003986:	f7fe fd19 	bl	80023bc <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b64      	cmp	r3, #100	; 0x64
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e103      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003998:	4b75      	ldr	r3, [pc, #468]	; (8003b70 <HAL_RCC_OscConfig+0x4c8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x312>
 80039ac:	4b6f      	ldr	r3, [pc, #444]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	4a6e      	ldr	r2, [pc, #440]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6213      	str	r3, [r2, #32]
 80039b8:	e02d      	b.n	8003a16 <HAL_RCC_OscConfig+0x36e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x334>
 80039c2:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	6213      	str	r3, [r2, #32]
 80039ce:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4a66      	ldr	r2, [pc, #408]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	f023 0304 	bic.w	r3, r3, #4
 80039d8:	6213      	str	r3, [r2, #32]
 80039da:	e01c      	b.n	8003a16 <HAL_RCC_OscConfig+0x36e>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d10c      	bne.n	80039fe <HAL_RCC_OscConfig+0x356>
 80039e4:	4b61      	ldr	r3, [pc, #388]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4a60      	ldr	r2, [pc, #384]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	f043 0304 	orr.w	r3, r3, #4
 80039ee:	6213      	str	r3, [r2, #32]
 80039f0:	4b5e      	ldr	r3, [pc, #376]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4a5d      	ldr	r2, [pc, #372]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6213      	str	r3, [r2, #32]
 80039fc:	e00b      	b.n	8003a16 <HAL_RCC_OscConfig+0x36e>
 80039fe:	4b5b      	ldr	r3, [pc, #364]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4a5a      	ldr	r2, [pc, #360]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	6213      	str	r3, [r2, #32]
 8003a0a:	4b58      	ldr	r3, [pc, #352]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	4a57      	ldr	r2, [pc, #348]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a10:	f023 0304 	bic.w	r3, r3, #4
 8003a14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d015      	beq.n	8003a4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1e:	f7fe fccd 	bl	80023bc <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a24:	e00a      	b.n	8003a3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a26:	f7fe fcc9 	bl	80023bc <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e0b1      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3c:	4b4b      	ldr	r3, [pc, #300]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ee      	beq.n	8003a26 <HAL_RCC_OscConfig+0x37e>
 8003a48:	e014      	b.n	8003a74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fcb7 	bl	80023bc <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fe fcb3 	bl	80023bc <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e09b      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a68:	4b40      	ldr	r3, [pc, #256]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ee      	bne.n	8003a52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a7a:	4b3c      	ldr	r3, [pc, #240]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4a3b      	ldr	r2, [pc, #236]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8087 	beq.w	8003b9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a90:	4b36      	ldr	r3, [pc, #216]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d061      	beq.n	8003b60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d146      	bne.n	8003b32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa4:	4b33      	ldr	r3, [pc, #204]	; (8003b74 <HAL_RCC_OscConfig+0x4cc>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fe fc87 	bl	80023bc <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab2:	f7fe fc83 	bl	80023bc <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e06d      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac4:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d108      	bne.n	8003aec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ada:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	4921      	ldr	r1, [pc, #132]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aec:	4b1f      	ldr	r3, [pc, #124]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a19      	ldr	r1, [r3, #32]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	430b      	orrs	r3, r1
 8003afe:	491b      	ldr	r1, [pc, #108]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b04:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <HAL_RCC_OscConfig+0x4cc>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fe fc57 	bl	80023bc <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fe fc53 	bl	80023bc <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e03d      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x46a>
 8003b30:	e035      	b.n	8003b9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <HAL_RCC_OscConfig+0x4cc>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fe fc40 	bl	80023bc <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fe fc3c 	bl	80023bc <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e026      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x498>
 8003b5e:	e01e      	b.n	8003b9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e019      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40007000 	.word	0x40007000
 8003b74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_OscConfig+0x500>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d106      	bne.n	8003b9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d001      	beq.n	8003b9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000

08003bac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0d0      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b6a      	ldr	r3, [pc, #424]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d910      	bls.n	8003bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b67      	ldr	r3, [pc, #412]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 0207 	bic.w	r2, r3, #7
 8003bd6:	4965      	ldr	r1, [pc, #404]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b63      	ldr	r3, [pc, #396]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0b8      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d020      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c08:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c20:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a52      	ldr	r2, [pc, #328]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c2c:	4b50      	ldr	r3, [pc, #320]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	494d      	ldr	r1, [pc, #308]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d040      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d115      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e07f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d107      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6a:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e073      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7a:	4b3d      	ldr	r3, [pc, #244]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e06b      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c8a:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f023 0203 	bic.w	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4936      	ldr	r1, [pc, #216]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c9c:	f7fe fb8e 	bl	80023bc <HAL_GetTick>
 8003ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca4:	f7fe fb8a 	bl	80023bc <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e053      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 020c 	and.w	r2, r3, #12
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d1eb      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d210      	bcs.n	8003cfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 0207 	bic.w	r2, r3, #7
 8003ce2:	4922      	ldr	r1, [pc, #136]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e032      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4916      	ldr	r1, [pc, #88]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d26:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	490e      	ldr	r1, [pc, #56]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d3a:	f000 f821 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	490a      	ldr	r1, [pc, #40]	; (8003d74 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4c:	5ccb      	ldrb	r3, [r1, r3]
 8003d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d52:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <HAL_RCC_ClockConfig+0x1cc>)
 8003d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d56:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_RCC_ClockConfig+0x1d0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe faec 	bl	8002338 <HAL_InitTick>

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40022000 	.word	0x40022000
 8003d70:	40021000 	.word	0x40021000
 8003d74:	08008320 	.word	0x08008320
 8003d78:	20000014 	.word	0x20000014
 8003d7c:	20000018 	.word	0x20000018

08003d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d80:	b490      	push	{r4, r7}
 8003d82:	b08a      	sub	sp, #40	; 0x28
 8003d84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xac>)
 8003d88:	1d3c      	adds	r4, r7, #4
 8003d8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d90:	f240 2301 	movw	r3, #513	; 0x201
 8003d94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003daa:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d002      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d003      	beq.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x46>
 8003dbe:	e02b      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dc0:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dc2:	623b      	str	r3, [r7, #32]
      break;
 8003dc4:	e02b      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	0c9b      	lsrs	r3, r3, #18
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	3328      	adds	r3, #40	; 0x28
 8003dd0:	443b      	add	r3, r7
 8003dd2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003dd6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d012      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003de2:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	0c5b      	lsrs	r3, r3, #17
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	3328      	adds	r3, #40	; 0x28
 8003dee:	443b      	add	r3, r7
 8003df0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003df4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dfa:	fb03 f202 	mul.w	r2, r3, r2
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	e004      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	4a0b      	ldr	r2, [pc, #44]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e0c:	fb02 f303 	mul.w	r3, r2, r3
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	623b      	str	r3, [r7, #32]
      break;
 8003e16:	e002      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e18:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e1a:	623b      	str	r3, [r7, #32]
      break;
 8003e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3728      	adds	r7, #40	; 0x28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc90      	pop	{r4, r7}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	08008310 	.word	0x08008310
 8003e30:	40021000 	.word	0x40021000
 8003e34:	007a1200 	.word	0x007a1200
 8003e38:	003d0900 	.word	0x003d0900

08003e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e40:	4b02      	ldr	r3, [pc, #8]	; (8003e4c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e42:	681b      	ldr	r3, [r3, #0]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	20000014 	.word	0x20000014

08003e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e54:	f7ff fff2 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	0a1b      	lsrs	r3, r3, #8
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	4903      	ldr	r1, [pc, #12]	; (8003e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40021000 	.word	0x40021000
 8003e74:	08008330 	.word	0x08008330

08003e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e7c:	f7ff ffde 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	0adb      	lsrs	r3, r3, #11
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	08008330 	.word	0x08008330

08003ea0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <RCC_Delay+0x34>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <RCC_Delay+0x38>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	0a5b      	lsrs	r3, r3, #9
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ebc:	bf00      	nop
  }
  while (Delay --);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1e5a      	subs	r2, r3, #1
 8003ec2:	60fa      	str	r2, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f9      	bne.n	8003ebc <RCC_Delay+0x1c>
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr
 8003ed4:	20000014 	.word	0x20000014
 8003ed8:	10624dd3 	.word	0x10624dd3

08003edc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d07d      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efc:	4b4f      	ldr	r3, [pc, #316]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10d      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f08:	4b4c      	ldr	r3, [pc, #304]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	4a4b      	ldr	r2, [pc, #300]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f12:	61d3      	str	r3, [r2, #28]
 8003f14:	4b49      	ldr	r3, [pc, #292]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f20:	2301      	movs	r3, #1
 8003f22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f24:	4b46      	ldr	r3, [pc, #280]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d118      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f30:	4b43      	ldr	r3, [pc, #268]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a42      	ldr	r2, [pc, #264]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3c:	f7fe fa3e 	bl	80023bc <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f42:	e008      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f44:	f7fe fa3a 	bl	80023bc <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e06d      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f56:	4b3a      	ldr	r3, [pc, #232]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f62:	4b36      	ldr	r3, [pc, #216]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d02e      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d027      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f80:	4b2e      	ldr	r3, [pc, #184]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f96:	4a29      	ldr	r2, [pc, #164]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d014      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fe fa09 	bl	80023bc <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe fa05 	bl	80023bc <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e036      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ee      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4917      	ldr	r1, [pc, #92]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fe2:	7dfb      	ldrb	r3, [r7, #23]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d105      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	4a13      	ldr	r2, [pc, #76]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004000:	4b0e      	ldr	r3, [pc, #56]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	490b      	ldr	r1, [pc, #44]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400e:	4313      	orrs	r3, r2
 8004010:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800401e:	4b07      	ldr	r3, [pc, #28]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	4904      	ldr	r1, [pc, #16]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000
 8004040:	40007000 	.word	0x40007000
 8004044:	42420440 	.word	0x42420440

08004048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e041      	b.n	80040de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd fefa 	bl	8001e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f000 fa80 	bl	800458c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d001      	beq.n	8004100 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e03c      	b.n	800417a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1d      	ldr	r2, [pc, #116]	; (8004184 <HAL_TIM_Base_Start+0x9c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d018      	beq.n	8004144 <HAL_TIM_Base_Start+0x5c>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1c      	ldr	r2, [pc, #112]	; (8004188 <HAL_TIM_Base_Start+0xa0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d013      	beq.n	8004144 <HAL_TIM_Base_Start+0x5c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004124:	d00e      	beq.n	8004144 <HAL_TIM_Base_Start+0x5c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a18      	ldr	r2, [pc, #96]	; (800418c <HAL_TIM_Base_Start+0xa4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d009      	beq.n	8004144 <HAL_TIM_Base_Start+0x5c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a16      	ldr	r2, [pc, #88]	; (8004190 <HAL_TIM_Base_Start+0xa8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d004      	beq.n	8004144 <HAL_TIM_Base_Start+0x5c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a15      	ldr	r2, [pc, #84]	; (8004194 <HAL_TIM_Base_Start+0xac>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d111      	bne.n	8004168 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b06      	cmp	r3, #6
 8004154:	d010      	beq.n	8004178 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0201 	orr.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004166:	e007      	b.n	8004178 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr
 8004184:	40012c00 	.word	0x40012c00
 8004188:	40013400 	.word	0x40013400
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800
 8004194:	40000c00 	.word	0x40000c00

08004198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d122      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d11b      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0202 	mvn.w	r2, #2
 80041c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f9ba 	bl	8004554 <HAL_TIM_IC_CaptureCallback>
 80041e0:	e005      	b.n	80041ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f9ad 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f9bc 	bl	8004566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d122      	bne.n	8004248 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b04      	cmp	r3, #4
 800420e:	d11b      	bne.n	8004248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0204 	mvn.w	r2, #4
 8004218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2202      	movs	r2, #2
 800421e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f990 	bl	8004554 <HAL_TIM_IC_CaptureCallback>
 8004234:	e005      	b.n	8004242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f983 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f992 	bl	8004566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b08      	cmp	r3, #8
 8004254:	d122      	bne.n	800429c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b08      	cmp	r3, #8
 8004262:	d11b      	bne.n	800429c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0208 	mvn.w	r2, #8
 800426c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2204      	movs	r2, #4
 8004272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f966 	bl	8004554 <HAL_TIM_IC_CaptureCallback>
 8004288:	e005      	b.n	8004296 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f959 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f968 	bl	8004566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b10      	cmp	r3, #16
 80042a8:	d122      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d11b      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0210 	mvn.w	r2, #16
 80042c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2208      	movs	r2, #8
 80042c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f93c 	bl	8004554 <HAL_TIM_IC_CaptureCallback>
 80042dc:	e005      	b.n	80042ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f92f 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f93e 	bl	8004566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d10e      	bne.n	800431c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b01      	cmp	r3, #1
 800430a:	d107      	bne.n	800431c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0201 	mvn.w	r2, #1
 8004314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f90a 	bl	8004530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004326:	2b80      	cmp	r3, #128	; 0x80
 8004328:	d10e      	bne.n	8004348 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004334:	2b80      	cmp	r3, #128	; 0x80
 8004336:	d107      	bne.n	8004348 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 faa7 	bl	8004896 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d10e      	bne.n	8004374 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004360:	2b40      	cmp	r3, #64	; 0x40
 8004362:	d107      	bne.n	8004374 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800436c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f902 	bl	8004578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b20      	cmp	r3, #32
 8004380:	d10e      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b20      	cmp	r3, #32
 800438e:	d107      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0220 	mvn.w	r2, #32
 8004398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fa72 	bl	8004884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a0:	bf00      	nop
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_TIM_ConfigClockSource+0x18>
 80043bc:	2302      	movs	r3, #2
 80043be:	e0b3      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x180>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f8:	d03e      	beq.n	8004478 <HAL_TIM_ConfigClockSource+0xd0>
 80043fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fe:	f200 8087 	bhi.w	8004510 <HAL_TIM_ConfigClockSource+0x168>
 8004402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004406:	f000 8085 	beq.w	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 800440a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440e:	d87f      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x168>
 8004410:	2b70      	cmp	r3, #112	; 0x70
 8004412:	d01a      	beq.n	800444a <HAL_TIM_ConfigClockSource+0xa2>
 8004414:	2b70      	cmp	r3, #112	; 0x70
 8004416:	d87b      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x168>
 8004418:	2b60      	cmp	r3, #96	; 0x60
 800441a:	d050      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x116>
 800441c:	2b60      	cmp	r3, #96	; 0x60
 800441e:	d877      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x168>
 8004420:	2b50      	cmp	r3, #80	; 0x50
 8004422:	d03c      	beq.n	800449e <HAL_TIM_ConfigClockSource+0xf6>
 8004424:	2b50      	cmp	r3, #80	; 0x50
 8004426:	d873      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x168>
 8004428:	2b40      	cmp	r3, #64	; 0x40
 800442a:	d058      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x136>
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	d86f      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x168>
 8004430:	2b30      	cmp	r3, #48	; 0x30
 8004432:	d064      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x156>
 8004434:	2b30      	cmp	r3, #48	; 0x30
 8004436:	d86b      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x168>
 8004438:	2b20      	cmp	r3, #32
 800443a:	d060      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x156>
 800443c:	2b20      	cmp	r3, #32
 800443e:	d867      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x168>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d05c      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x156>
 8004444:	2b10      	cmp	r3, #16
 8004446:	d05a      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004448:	e062      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6899      	ldr	r1, [r3, #8]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f000 f988 	bl	800476e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800446c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	609a      	str	r2, [r3, #8]
      break;
 8004476:	e04e      	b.n	8004516 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	6899      	ldr	r1, [r3, #8]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f000 f971 	bl	800476e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800449a:	609a      	str	r2, [r3, #8]
      break;
 800449c:	e03b      	b.n	8004516 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6859      	ldr	r1, [r3, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f000 f8e8 	bl	8004680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2150      	movs	r1, #80	; 0x50
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f93f 	bl	800473a <TIM_ITRx_SetConfig>
      break;
 80044bc:	e02b      	b.n	8004516 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f000 f906 	bl	80046dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2160      	movs	r1, #96	; 0x60
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f92f 	bl	800473a <TIM_ITRx_SetConfig>
      break;
 80044dc:	e01b      	b.n	8004516 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6859      	ldr	r1, [r3, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f000 f8c8 	bl	8004680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2140      	movs	r1, #64	; 0x40
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f91f 	bl	800473a <TIM_ITRx_SetConfig>
      break;
 80044fc:	e00b      	b.n	8004516 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f000 f916 	bl	800473a <TIM_ITRx_SetConfig>
        break;
 800450e:	e002      	b.n	8004516 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004510:	bf00      	nop
 8004512:	e000      	b.n	8004516 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004514:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr

08004566 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr
	...

0800458c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a33      	ldr	r2, [pc, #204]	; (800466c <TIM_Base_SetConfig+0xe0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d013      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a32      	ldr	r2, [pc, #200]	; (8004670 <TIM_Base_SetConfig+0xe4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00f      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b2:	d00b      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a2f      	ldr	r2, [pc, #188]	; (8004674 <TIM_Base_SetConfig+0xe8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d007      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a2e      	ldr	r2, [pc, #184]	; (8004678 <TIM_Base_SetConfig+0xec>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d003      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a2d      	ldr	r2, [pc, #180]	; (800467c <TIM_Base_SetConfig+0xf0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d108      	bne.n	80045de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a22      	ldr	r2, [pc, #136]	; (800466c <TIM_Base_SetConfig+0xe0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d013      	beq.n	800460e <TIM_Base_SetConfig+0x82>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a21      	ldr	r2, [pc, #132]	; (8004670 <TIM_Base_SetConfig+0xe4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00f      	beq.n	800460e <TIM_Base_SetConfig+0x82>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f4:	d00b      	beq.n	800460e <TIM_Base_SetConfig+0x82>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <TIM_Base_SetConfig+0xe8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d007      	beq.n	800460e <TIM_Base_SetConfig+0x82>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <TIM_Base_SetConfig+0xec>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d003      	beq.n	800460e <TIM_Base_SetConfig+0x82>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1c      	ldr	r2, [pc, #112]	; (800467c <TIM_Base_SetConfig+0xf0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d108      	bne.n	8004620 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a09      	ldr	r2, [pc, #36]	; (800466c <TIM_Base_SetConfig+0xe0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d003      	beq.n	8004654 <TIM_Base_SetConfig+0xc8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a08      	ldr	r2, [pc, #32]	; (8004670 <TIM_Base_SetConfig+0xe4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d103      	bne.n	800465c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	615a      	str	r2, [r3, #20]
}
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40013400 	.word	0x40013400
 8004674:	40000400 	.word	0x40000400
 8004678:	40000800 	.word	0x40000800
 800467c:	40000c00 	.word	0x40000c00

08004680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0201 	bic.w	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f023 030a 	bic.w	r3, r3, #10
 80046bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f023 0210 	bic.w	r2, r3, #16
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004706:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	031b      	lsls	r3, r3, #12
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004718:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	621a      	str	r2, [r3, #32]
}
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	f043 0307 	orr.w	r3, r3, #7
 800475c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	609a      	str	r2, [r3, #8]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800476e:	b480      	push	{r7}
 8004770:	b087      	sub	sp, #28
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004788:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	021a      	lsls	r2, r3, #8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	431a      	orrs	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4313      	orrs	r3, r2
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	609a      	str	r2, [r3, #8]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e050      	b.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d018      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a19      	ldr	r2, [pc, #100]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481a:	d00e      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a15      	ldr	r2, [pc, #84]	; (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a14      	ldr	r2, [pc, #80]	; (800487c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a12      	ldr	r2, [pc, #72]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d10c      	bne.n	8004854 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	4313      	orrs	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40013400 	.word	0x40013400
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40000c00 	.word	0x40000c00

08004884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e03f      	b.n	800493a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fd faee 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	; 0x24
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fd9b 	bl	8005428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b08a      	sub	sp, #40	; 0x28
 8004946:	af02      	add	r7, sp, #8
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b20      	cmp	r3, #32
 8004960:	d17c      	bne.n	8004a5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_UART_Transmit+0x2c>
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e075      	b.n	8004a5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_UART_Transmit+0x3e>
 800497c:	2302      	movs	r3, #2
 800497e:	e06e      	b.n	8004a5e <HAL_UART_Transmit+0x11c>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2221      	movs	r2, #33	; 0x21
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004996:	f7fd fd11 	bl	80023bc <HAL_GetTick>
 800499a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	88fa      	ldrh	r2, [r7, #6]
 80049a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	88fa      	ldrh	r2, [r7, #6]
 80049a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b0:	d108      	bne.n	80049c4 <HAL_UART_Transmit+0x82>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d104      	bne.n	80049c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e003      	b.n	80049cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049d4:	e02a      	b.n	8004a2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2200      	movs	r2, #0
 80049de:	2180      	movs	r1, #128	; 0x80
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fb0d 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e036      	b.n	8004a5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	3302      	adds	r3, #2
 8004a0a:	61bb      	str	r3, [r7, #24]
 8004a0c:	e007      	b.n	8004a1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	781a      	ldrb	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1cf      	bne.n	80049d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2140      	movs	r1, #64	; 0x40
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fadd 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e006      	b.n	8004a5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e000      	b.n	8004a5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a5c:	2302      	movs	r3, #2
  }
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b086      	sub	sp, #24
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	4613      	mov	r3, r2
 8004a72:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d13c      	bne.n	8004afa <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e035      	b.n	8004afc <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e02e      	b.n	8004afc <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 faee 	bl	8005094 <UART_Start_Receive_DMA>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d119      	bne.n	8004af6 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d113      	bne.n	8004af2 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0210 	orr.w	r2, r2, #16
 8004aee:	60da      	str	r2, [r3, #12]
 8004af0:	e001      	b.n	8004af6 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	e000      	b.n	8004afc <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
  }
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	; 0x28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10d      	bne.n	8004b56 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_UART_IRQHandler+0x52>
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fbc0 	bl	80052d4 <UART_Receive_IT>
      return;
 8004b54:	e17b      	b.n	8004e4e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 80b1 	beq.w	8004cc0 <HAL_UART_IRQHandler+0x1bc>
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d105      	bne.n	8004b74 <HAL_UART_IRQHandler+0x70>
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 80a6 	beq.w	8004cc0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_UART_IRQHandler+0x90>
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	f043 0201 	orr.w	r2, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_UART_IRQHandler+0xb0>
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	f043 0202 	orr.w	r2, r3, #2
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_UART_IRQHandler+0xd0>
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	f043 0204 	orr.w	r2, r3, #4
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00f      	beq.n	8004bfe <HAL_UART_IRQHandler+0xfa>
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d104      	bne.n	8004bf2 <HAL_UART_IRQHandler+0xee>
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f043 0208 	orr.w	r2, r3, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 811e 	beq.w	8004e44 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <HAL_UART_IRQHandler+0x11e>
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fb59 	bl	80052d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <HAL_UART_IRQHandler+0x146>
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d031      	beq.n	8004cae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa9b 	bl	8005186 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d023      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695a      	ldr	r2, [r3, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d013      	beq.n	8004c9e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	4a76      	ldr	r2, [pc, #472]	; (8004e54 <HAL_UART_IRQHandler+0x350>)
 8004c7c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe f80a 	bl	8002c9c <HAL_DMA_Abort_IT>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d016      	beq.n	8004cbc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c98:	4610      	mov	r0, r2
 8004c9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9c:	e00e      	b.n	8004cbc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f8f5 	bl	8004e8e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca4:	e00a      	b.n	8004cbc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f8f1 	bl	8004e8e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	e006      	b.n	8004cbc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f8ed 	bl	8004e8e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cba:	e0c3      	b.n	8004e44 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbc:	bf00      	nop
    return;
 8004cbe:	e0c1      	b.n	8004e44 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	f040 80a1 	bne.w	8004e0c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 809b 	beq.w	8004e0c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8095 	beq.w	8004e0c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d04e      	beq.n	8004da4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d10:	8a3b      	ldrh	r3, [r7, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8098 	beq.w	8004e48 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d1c:	8a3a      	ldrh	r2, [r7, #16]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	f080 8092 	bcs.w	8004e48 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8a3a      	ldrh	r2, [r7, #16]
 8004d28:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d02b      	beq.n	8004d8c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d42:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695a      	ldr	r2, [r3, #20]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0201 	bic.w	r2, r2, #1
 8004d52:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d62:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0210 	bic.w	r2, r2, #16
 8004d80:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fd ff4d 	bl	8002c26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7fc fc65 	bl	800166c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004da2:	e051      	b.n	8004e48 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d047      	beq.n	8004e4c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004dbc:	8a7b      	ldrh	r3, [r7, #18]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d044      	beq.n	8004e4c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dd0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0201 	bic.w	r2, r2, #1
 8004de0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0210 	bic.w	r2, r2, #16
 8004dfe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e00:	8a7b      	ldrh	r3, [r7, #18]
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fc fc31 	bl	800166c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e0a:	e01f      	b.n	8004e4c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <HAL_UART_IRQHandler+0x324>
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f9f0 	bl	8005206 <UART_Transmit_IT>
    return;
 8004e26:	e012      	b.n	8004e4e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00d      	beq.n	8004e4e <HAL_UART_IRQHandler+0x34a>
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d008      	beq.n	8004e4e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fa31 	bl	80052a4 <UART_EndTransmit_IT>
    return;
 8004e42:	e004      	b.n	8004e4e <HAL_UART_IRQHandler+0x34a>
    return;
 8004e44:	bf00      	nop
 8004e46:	e002      	b.n	8004e4e <HAL_UART_IRQHandler+0x34a>
      return;
 8004e48:	bf00      	nop
 8004e4a:	e000      	b.n	8004e4e <HAL_UART_IRQHandler+0x34a>
      return;
 8004e4c:	bf00      	nop
  }
}
 8004e4e:	3728      	adds	r7, #40	; 0x28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	080051df 	.word	0x080051df

08004e58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d12a      	bne.n	8004f12 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ed0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695a      	ldr	r2, [r3, #20]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d107      	bne.n	8004f12 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0210 	bic.w	r2, r2, #16
 8004f10:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d106      	bne.n	8004f28 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f1e:	4619      	mov	r1, r3
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7fc fba3 	bl	800166c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f26:	e002      	b.n	8004f2e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f7ff ff9e 	bl	8004e6a <HAL_UART_RxCpltCallback>
}
 8004f2e:	bf00      	nop
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d108      	bne.n	8004f5e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	4619      	mov	r1, r3
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7fc fb88 	bl	800166c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f5c:	e002      	b.n	8004f64 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff ff8c 	bl	8004e7c <HAL_UART_RxHalfCpltCallback>
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf14      	ite	ne
 8004f8c:	2301      	movne	r3, #1
 8004f8e:	2300      	moveq	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b21      	cmp	r3, #33	; 0x21
 8004f9e:	d108      	bne.n	8004fb2 <UART_DMAError+0x46>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004fac:	68b8      	ldr	r0, [r7, #8]
 8004fae:	f000 f8d5 	bl	800515c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf14      	ite	ne
 8004fc0:	2301      	movne	r3, #1
 8004fc2:	2300      	moveq	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b22      	cmp	r3, #34	; 0x22
 8004fd2:	d108      	bne.n	8004fe6 <UART_DMAError+0x7a>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004fe0:	68b8      	ldr	r0, [r7, #8]
 8004fe2:	f000 f8d0 	bl	8005186 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	f043 0210 	orr.w	r2, r3, #16
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ff2:	68b8      	ldr	r0, [r7, #8]
 8004ff4:	f7ff ff4b 	bl	8004e8e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ff8:	bf00      	nop
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005010:	e02c      	b.n	800506c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d028      	beq.n	800506c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0x30>
 8005020:	f7fd f9cc 	bl	80023bc <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	429a      	cmp	r2, r3
 800502e:	d21d      	bcs.n	800506c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800503e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695a      	ldr	r2, [r3, #20]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e00f      	b.n	800508c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4013      	ands	r3, r2
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	429a      	cmp	r2, r3
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	429a      	cmp	r2, r3
 8005088:	d0c3      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	4613      	mov	r3, r2
 80050a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	88fa      	ldrh	r2, [r7, #6]
 80050ac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2222      	movs	r2, #34	; 0x22
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	4a23      	ldr	r2, [pc, #140]	; (8005150 <UART_Start_Receive_DMA+0xbc>)
 80050c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	4a22      	ldr	r2, [pc, #136]	; (8005154 <UART_Start_Receive_DMA+0xc0>)
 80050ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	4a21      	ldr	r2, [pc, #132]	; (8005158 <UART_Start_Receive_DMA+0xc4>)
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	2200      	movs	r2, #0
 80050da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80050dc:	f107 0308 	add.w	r3, r7, #8
 80050e0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4619      	mov	r1, r3
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	f7fd fd38 	bl	8002b68 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005124:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005144:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	08004ea1 	.word	0x08004ea1
 8005154:	08004f37 	.word	0x08004f37
 8005158:	08004f6d 	.word	0x08004f6d

0800515c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005172:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr

08005186 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800519c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695a      	ldr	r2, [r3, #20]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0201 	bic.w	r2, r2, #1
 80051ac:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d107      	bne.n	80051c6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0210 	bic.w	r2, r2, #16
 80051c4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr

080051de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff fe48 	bl	8004e8e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b21      	cmp	r3, #33	; 0x21
 8005218:	d13e      	bne.n	8005298 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005222:	d114      	bne.n	800524e <UART_Transmit_IT+0x48>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d110      	bne.n	800524e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005240:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	1c9a      	adds	r2, r3, #2
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	621a      	str	r2, [r3, #32]
 800524c:	e008      	b.n	8005260 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	1c59      	adds	r1, r3, #1
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6211      	str	r1, [r2, #32]
 8005258:	781a      	ldrb	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29b      	uxth	r3, r3
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4619      	mov	r1, r3
 800526e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10f      	bne.n	8005294 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005282:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005292:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005294:	2300      	movs	r3, #0
 8005296:	e000      	b.n	800529a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005298:	2302      	movs	r3, #2
  }
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr

080052a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff fdc7 	bl	8004e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b22      	cmp	r3, #34	; 0x22
 80052e6:	f040 8099 	bne.w	800541c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f2:	d117      	bne.n	8005324 <UART_Receive_IT+0x50>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d113      	bne.n	8005324 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005312:	b29a      	uxth	r2, r3
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	1c9a      	adds	r2, r3, #2
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	629a      	str	r2, [r3, #40]	; 0x28
 8005322:	e026      	b.n	8005372 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005336:	d007      	beq.n	8005348 <UART_Receive_IT+0x74>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <UART_Receive_IT+0x82>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d106      	bne.n	8005356 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	b2da      	uxtb	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	e008      	b.n	8005368 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005362:	b2da      	uxtb	r2, r3
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29b      	uxth	r3, r3
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	4619      	mov	r1, r3
 8005380:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005382:	2b00      	cmp	r3, #0
 8005384:	d148      	bne.n	8005418 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0220 	bic.w	r2, r2, #32
 8005394:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d123      	bne.n	800540e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0210 	bic.w	r2, r2, #16
 80053da:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	2b10      	cmp	r3, #16
 80053e8:	d10a      	bne.n	8005400 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fc f930 	bl	800166c <HAL_UARTEx_RxEventCallback>
 800540c:	e002      	b.n	8005414 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff fd2b 	bl	8004e6a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	e002      	b.n	800541e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	e000      	b.n	800541e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005462:	f023 030c 	bic.w	r3, r3, #12
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6812      	ldr	r2, [r2, #0]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	430b      	orrs	r3, r1
 800546e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2c      	ldr	r2, [pc, #176]	; (800553c <UART_SetConfig+0x114>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d103      	bne.n	8005498 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005490:	f7fe fcf2 	bl	8003e78 <HAL_RCC_GetPCLK2Freq>
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	e002      	b.n	800549e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005498:	f7fe fcda 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 800549c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009a      	lsls	r2, r3, #2
 80054a8:	441a      	add	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	4a22      	ldr	r2, [pc, #136]	; (8005540 <UART_SetConfig+0x118>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	0119      	lsls	r1, r3, #4
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	009a      	lsls	r2, r3, #2
 80054c8:	441a      	add	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054d4:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <UART_SetConfig+0x118>)
 80054d6:	fba3 0302 	umull	r0, r3, r3, r2
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2064      	movs	r0, #100	; 0x64
 80054de:	fb00 f303 	mul.w	r3, r0, r3
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	3332      	adds	r3, #50	; 0x32
 80054e8:	4a15      	ldr	r2, [pc, #84]	; (8005540 <UART_SetConfig+0x118>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054f4:	4419      	add	r1, r3
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	009a      	lsls	r2, r3, #2
 8005500:	441a      	add	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	fbb2 f2f3 	udiv	r2, r2, r3
 800550c:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <UART_SetConfig+0x118>)
 800550e:	fba3 0302 	umull	r0, r3, r3, r2
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	2064      	movs	r0, #100	; 0x64
 8005516:	fb00 f303 	mul.w	r3, r0, r3
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	3332      	adds	r3, #50	; 0x32
 8005520:	4a07      	ldr	r2, [pc, #28]	; (8005540 <UART_SetConfig+0x118>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	f003 020f 	and.w	r2, r3, #15
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	440a      	add	r2, r1
 8005532:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005534:	bf00      	nop
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40013800 	.word	0x40013800
 8005540:	51eb851f 	.word	0x51eb851f

08005544 <atan2f>:
 8005544:	f000 b800 	b.w	8005548 <__ieee754_atan2f>

08005548 <__ieee754_atan2f>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800554e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005552:	4603      	mov	r3, r0
 8005554:	dc05      	bgt.n	8005562 <__ieee754_atan2f+0x1a>
 8005556:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800555a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800555e:	4607      	mov	r7, r0
 8005560:	dd04      	ble.n	800556c <__ieee754_atan2f+0x24>
 8005562:	4618      	mov	r0, r3
 8005564:	f7fb fb52 	bl	8000c0c <__addsf3>
 8005568:	4603      	mov	r3, r0
 800556a:	e011      	b.n	8005590 <__ieee754_atan2f+0x48>
 800556c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8005570:	d103      	bne.n	800557a <__ieee754_atan2f+0x32>
 8005572:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005576:	f000 b86d 	b.w	8005654 <atanf>
 800557a:	178c      	asrs	r4, r1, #30
 800557c:	f004 0402 	and.w	r4, r4, #2
 8005580:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005584:	b932      	cbnz	r2, 8005594 <__ieee754_atan2f+0x4c>
 8005586:	2c02      	cmp	r4, #2
 8005588:	d04c      	beq.n	8005624 <__ieee754_atan2f+0xdc>
 800558a:	2c03      	cmp	r4, #3
 800558c:	d100      	bne.n	8005590 <__ieee754_atan2f+0x48>
 800558e:	4b29      	ldr	r3, [pc, #164]	; (8005634 <__ieee754_atan2f+0xec>)
 8005590:	4618      	mov	r0, r3
 8005592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005594:	b91e      	cbnz	r6, 800559e <__ieee754_atan2f+0x56>
 8005596:	2f00      	cmp	r7, #0
 8005598:	da4a      	bge.n	8005630 <__ieee754_atan2f+0xe8>
 800559a:	4b27      	ldr	r3, [pc, #156]	; (8005638 <__ieee754_atan2f+0xf0>)
 800559c:	e7f8      	b.n	8005590 <__ieee754_atan2f+0x48>
 800559e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80055a2:	d10e      	bne.n	80055c2 <__ieee754_atan2f+0x7a>
 80055a4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80055a8:	f104 34ff 	add.w	r4, r4, #4294967295
 80055ac:	d105      	bne.n	80055ba <__ieee754_atan2f+0x72>
 80055ae:	2c02      	cmp	r4, #2
 80055b0:	d83a      	bhi.n	8005628 <__ieee754_atan2f+0xe0>
 80055b2:	4b22      	ldr	r3, [pc, #136]	; (800563c <__ieee754_atan2f+0xf4>)
 80055b4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80055b8:	e7ea      	b.n	8005590 <__ieee754_atan2f+0x48>
 80055ba:	2c02      	cmp	r4, #2
 80055bc:	d836      	bhi.n	800562c <__ieee754_atan2f+0xe4>
 80055be:	4b20      	ldr	r3, [pc, #128]	; (8005640 <__ieee754_atan2f+0xf8>)
 80055c0:	e7f8      	b.n	80055b4 <__ieee754_atan2f+0x6c>
 80055c2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80055c6:	d0e6      	beq.n	8005596 <__ieee754_atan2f+0x4e>
 80055c8:	1b92      	subs	r2, r2, r6
 80055ca:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 80055ce:	ea4f 50e2 	mov.w	r0, r2, asr #23
 80055d2:	da17      	bge.n	8005604 <__ieee754_atan2f+0xbc>
 80055d4:	2900      	cmp	r1, #0
 80055d6:	da01      	bge.n	80055dc <__ieee754_atan2f+0x94>
 80055d8:	303c      	adds	r0, #60	; 0x3c
 80055da:	db15      	blt.n	8005608 <__ieee754_atan2f+0xc0>
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fb fcd1 	bl	8000f84 <__aeabi_fdiv>
 80055e2:	f000 f943 	bl	800586c <fabsf>
 80055e6:	f000 f835 	bl	8005654 <atanf>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2c01      	cmp	r4, #1
 80055ee:	d00d      	beq.n	800560c <__ieee754_atan2f+0xc4>
 80055f0:	2c02      	cmp	r4, #2
 80055f2:	d00e      	beq.n	8005612 <__ieee754_atan2f+0xca>
 80055f4:	2c00      	cmp	r4, #0
 80055f6:	d0cb      	beq.n	8005590 <__ieee754_atan2f+0x48>
 80055f8:	4912      	ldr	r1, [pc, #72]	; (8005644 <__ieee754_atan2f+0xfc>)
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fb fb06 	bl	8000c0c <__addsf3>
 8005600:	4911      	ldr	r1, [pc, #68]	; (8005648 <__ieee754_atan2f+0x100>)
 8005602:	e00c      	b.n	800561e <__ieee754_atan2f+0xd6>
 8005604:	4b11      	ldr	r3, [pc, #68]	; (800564c <__ieee754_atan2f+0x104>)
 8005606:	e7f1      	b.n	80055ec <__ieee754_atan2f+0xa4>
 8005608:	2300      	movs	r3, #0
 800560a:	e7ef      	b.n	80055ec <__ieee754_atan2f+0xa4>
 800560c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005610:	e7be      	b.n	8005590 <__ieee754_atan2f+0x48>
 8005612:	490c      	ldr	r1, [pc, #48]	; (8005644 <__ieee754_atan2f+0xfc>)
 8005614:	4618      	mov	r0, r3
 8005616:	f7fb faf9 	bl	8000c0c <__addsf3>
 800561a:	4601      	mov	r1, r0
 800561c:	480a      	ldr	r0, [pc, #40]	; (8005648 <__ieee754_atan2f+0x100>)
 800561e:	f7fb faf3 	bl	8000c08 <__aeabi_fsub>
 8005622:	e7a1      	b.n	8005568 <__ieee754_atan2f+0x20>
 8005624:	4b08      	ldr	r3, [pc, #32]	; (8005648 <__ieee754_atan2f+0x100>)
 8005626:	e7b3      	b.n	8005590 <__ieee754_atan2f+0x48>
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <__ieee754_atan2f+0x108>)
 800562a:	e7b1      	b.n	8005590 <__ieee754_atan2f+0x48>
 800562c:	2300      	movs	r3, #0
 800562e:	e7af      	b.n	8005590 <__ieee754_atan2f+0x48>
 8005630:	4b06      	ldr	r3, [pc, #24]	; (800564c <__ieee754_atan2f+0x104>)
 8005632:	e7ad      	b.n	8005590 <__ieee754_atan2f+0x48>
 8005634:	c0490fdb 	.word	0xc0490fdb
 8005638:	bfc90fdb 	.word	0xbfc90fdb
 800563c:	08008338 	.word	0x08008338
 8005640:	08008344 	.word	0x08008344
 8005644:	33bbbd2e 	.word	0x33bbbd2e
 8005648:	40490fdb 	.word	0x40490fdb
 800564c:	3fc90fdb 	.word	0x3fc90fdb
 8005650:	3f490fdb 	.word	0x3f490fdb

08005654 <atanf>:
 8005654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005658:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800565c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8005660:	4604      	mov	r4, r0
 8005662:	4680      	mov	r8, r0
 8005664:	db0e      	blt.n	8005684 <atanf+0x30>
 8005666:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800566a:	dd04      	ble.n	8005676 <atanf+0x22>
 800566c:	4601      	mov	r1, r0
 800566e:	f7fb facd 	bl	8000c0c <__addsf3>
 8005672:	4604      	mov	r4, r0
 8005674:	e003      	b.n	800567e <atanf+0x2a>
 8005676:	2800      	cmp	r0, #0
 8005678:	f300 80ce 	bgt.w	8005818 <atanf+0x1c4>
 800567c:	4c67      	ldr	r4, [pc, #412]	; (800581c <atanf+0x1c8>)
 800567e:	4620      	mov	r0, r4
 8005680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005684:	4b66      	ldr	r3, [pc, #408]	; (8005820 <atanf+0x1cc>)
 8005686:	429d      	cmp	r5, r3
 8005688:	dc0e      	bgt.n	80056a8 <atanf+0x54>
 800568a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800568e:	da08      	bge.n	80056a2 <atanf+0x4e>
 8005690:	4964      	ldr	r1, [pc, #400]	; (8005824 <atanf+0x1d0>)
 8005692:	f7fb fabb 	bl	8000c0c <__addsf3>
 8005696:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800569a:	f7fb fd7b 	bl	8001194 <__aeabi_fcmpgt>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d1ed      	bne.n	800567e <atanf+0x2a>
 80056a2:	f04f 36ff 	mov.w	r6, #4294967295
 80056a6:	e01c      	b.n	80056e2 <atanf+0x8e>
 80056a8:	f000 f8e0 	bl	800586c <fabsf>
 80056ac:	4b5e      	ldr	r3, [pc, #376]	; (8005828 <atanf+0x1d4>)
 80056ae:	4604      	mov	r4, r0
 80056b0:	429d      	cmp	r5, r3
 80056b2:	dc7c      	bgt.n	80057ae <atanf+0x15a>
 80056b4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80056b8:	429d      	cmp	r5, r3
 80056ba:	dc67      	bgt.n	800578c <atanf+0x138>
 80056bc:	4601      	mov	r1, r0
 80056be:	f7fb faa5 	bl	8000c0c <__addsf3>
 80056c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80056c6:	f7fb fa9f 	bl	8000c08 <__aeabi_fsub>
 80056ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80056ce:	4605      	mov	r5, r0
 80056d0:	4620      	mov	r0, r4
 80056d2:	f7fb fa9b 	bl	8000c0c <__addsf3>
 80056d6:	4601      	mov	r1, r0
 80056d8:	4628      	mov	r0, r5
 80056da:	f7fb fc53 	bl	8000f84 <__aeabi_fdiv>
 80056de:	2600      	movs	r6, #0
 80056e0:	4604      	mov	r4, r0
 80056e2:	4621      	mov	r1, r4
 80056e4:	4620      	mov	r0, r4
 80056e6:	f7fb fb99 	bl	8000e1c <__aeabi_fmul>
 80056ea:	4601      	mov	r1, r0
 80056ec:	4607      	mov	r7, r0
 80056ee:	f7fb fb95 	bl	8000e1c <__aeabi_fmul>
 80056f2:	4605      	mov	r5, r0
 80056f4:	494d      	ldr	r1, [pc, #308]	; (800582c <atanf+0x1d8>)
 80056f6:	f7fb fb91 	bl	8000e1c <__aeabi_fmul>
 80056fa:	494d      	ldr	r1, [pc, #308]	; (8005830 <atanf+0x1dc>)
 80056fc:	f7fb fa86 	bl	8000c0c <__addsf3>
 8005700:	4629      	mov	r1, r5
 8005702:	f7fb fb8b 	bl	8000e1c <__aeabi_fmul>
 8005706:	494b      	ldr	r1, [pc, #300]	; (8005834 <atanf+0x1e0>)
 8005708:	f7fb fa80 	bl	8000c0c <__addsf3>
 800570c:	4629      	mov	r1, r5
 800570e:	f7fb fb85 	bl	8000e1c <__aeabi_fmul>
 8005712:	4949      	ldr	r1, [pc, #292]	; (8005838 <atanf+0x1e4>)
 8005714:	f7fb fa7a 	bl	8000c0c <__addsf3>
 8005718:	4629      	mov	r1, r5
 800571a:	f7fb fb7f 	bl	8000e1c <__aeabi_fmul>
 800571e:	4947      	ldr	r1, [pc, #284]	; (800583c <atanf+0x1e8>)
 8005720:	f7fb fa74 	bl	8000c0c <__addsf3>
 8005724:	4629      	mov	r1, r5
 8005726:	f7fb fb79 	bl	8000e1c <__aeabi_fmul>
 800572a:	4945      	ldr	r1, [pc, #276]	; (8005840 <atanf+0x1ec>)
 800572c:	f7fb fa6e 	bl	8000c0c <__addsf3>
 8005730:	4639      	mov	r1, r7
 8005732:	f7fb fb73 	bl	8000e1c <__aeabi_fmul>
 8005736:	4943      	ldr	r1, [pc, #268]	; (8005844 <atanf+0x1f0>)
 8005738:	4607      	mov	r7, r0
 800573a:	4628      	mov	r0, r5
 800573c:	f7fb fb6e 	bl	8000e1c <__aeabi_fmul>
 8005740:	4941      	ldr	r1, [pc, #260]	; (8005848 <atanf+0x1f4>)
 8005742:	f7fb fa61 	bl	8000c08 <__aeabi_fsub>
 8005746:	4629      	mov	r1, r5
 8005748:	f7fb fb68 	bl	8000e1c <__aeabi_fmul>
 800574c:	493f      	ldr	r1, [pc, #252]	; (800584c <atanf+0x1f8>)
 800574e:	f7fb fa5b 	bl	8000c08 <__aeabi_fsub>
 8005752:	4629      	mov	r1, r5
 8005754:	f7fb fb62 	bl	8000e1c <__aeabi_fmul>
 8005758:	493d      	ldr	r1, [pc, #244]	; (8005850 <atanf+0x1fc>)
 800575a:	f7fb fa55 	bl	8000c08 <__aeabi_fsub>
 800575e:	4629      	mov	r1, r5
 8005760:	f7fb fb5c 	bl	8000e1c <__aeabi_fmul>
 8005764:	493b      	ldr	r1, [pc, #236]	; (8005854 <atanf+0x200>)
 8005766:	f7fb fa4f 	bl	8000c08 <__aeabi_fsub>
 800576a:	4629      	mov	r1, r5
 800576c:	f7fb fb56 	bl	8000e1c <__aeabi_fmul>
 8005770:	4601      	mov	r1, r0
 8005772:	4638      	mov	r0, r7
 8005774:	f7fb fa4a 	bl	8000c0c <__addsf3>
 8005778:	4621      	mov	r1, r4
 800577a:	f7fb fb4f 	bl	8000e1c <__aeabi_fmul>
 800577e:	1c73      	adds	r3, r6, #1
 8005780:	4601      	mov	r1, r0
 8005782:	d133      	bne.n	80057ec <atanf+0x198>
 8005784:	4620      	mov	r0, r4
 8005786:	f7fb fa3f 	bl	8000c08 <__aeabi_fsub>
 800578a:	e772      	b.n	8005672 <atanf+0x1e>
 800578c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005790:	f7fb fa3a 	bl	8000c08 <__aeabi_fsub>
 8005794:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005798:	4605      	mov	r5, r0
 800579a:	4620      	mov	r0, r4
 800579c:	f7fb fa36 	bl	8000c0c <__addsf3>
 80057a0:	4601      	mov	r1, r0
 80057a2:	4628      	mov	r0, r5
 80057a4:	f7fb fbee 	bl	8000f84 <__aeabi_fdiv>
 80057a8:	2601      	movs	r6, #1
 80057aa:	4604      	mov	r4, r0
 80057ac:	e799      	b.n	80056e2 <atanf+0x8e>
 80057ae:	4b2a      	ldr	r3, [pc, #168]	; (8005858 <atanf+0x204>)
 80057b0:	429d      	cmp	r5, r3
 80057b2:	dc14      	bgt.n	80057de <atanf+0x18a>
 80057b4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80057b8:	f7fb fa26 	bl	8000c08 <__aeabi_fsub>
 80057bc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80057c0:	4605      	mov	r5, r0
 80057c2:	4620      	mov	r0, r4
 80057c4:	f7fb fb2a 	bl	8000e1c <__aeabi_fmul>
 80057c8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80057cc:	f7fb fa1e 	bl	8000c0c <__addsf3>
 80057d0:	4601      	mov	r1, r0
 80057d2:	4628      	mov	r0, r5
 80057d4:	f7fb fbd6 	bl	8000f84 <__aeabi_fdiv>
 80057d8:	2602      	movs	r6, #2
 80057da:	4604      	mov	r4, r0
 80057dc:	e781      	b.n	80056e2 <atanf+0x8e>
 80057de:	4601      	mov	r1, r0
 80057e0:	481e      	ldr	r0, [pc, #120]	; (800585c <atanf+0x208>)
 80057e2:	f7fb fbcf 	bl	8000f84 <__aeabi_fdiv>
 80057e6:	2603      	movs	r6, #3
 80057e8:	4604      	mov	r4, r0
 80057ea:	e77a      	b.n	80056e2 <atanf+0x8e>
 80057ec:	4b1c      	ldr	r3, [pc, #112]	; (8005860 <atanf+0x20c>)
 80057ee:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80057f2:	f7fb fa09 	bl	8000c08 <__aeabi_fsub>
 80057f6:	4621      	mov	r1, r4
 80057f8:	f7fb fa06 	bl	8000c08 <__aeabi_fsub>
 80057fc:	4b19      	ldr	r3, [pc, #100]	; (8005864 <atanf+0x210>)
 80057fe:	4601      	mov	r1, r0
 8005800:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005804:	f7fb fa00 	bl	8000c08 <__aeabi_fsub>
 8005808:	f1b8 0f00 	cmp.w	r8, #0
 800580c:	4604      	mov	r4, r0
 800580e:	f6bf af36 	bge.w	800567e <atanf+0x2a>
 8005812:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005816:	e72c      	b.n	8005672 <atanf+0x1e>
 8005818:	4c13      	ldr	r4, [pc, #76]	; (8005868 <atanf+0x214>)
 800581a:	e730      	b.n	800567e <atanf+0x2a>
 800581c:	bfc90fdb 	.word	0xbfc90fdb
 8005820:	3edfffff 	.word	0x3edfffff
 8005824:	7149f2ca 	.word	0x7149f2ca
 8005828:	3f97ffff 	.word	0x3f97ffff
 800582c:	3c8569d7 	.word	0x3c8569d7
 8005830:	3d4bda59 	.word	0x3d4bda59
 8005834:	3d886b35 	.word	0x3d886b35
 8005838:	3dba2e6e 	.word	0x3dba2e6e
 800583c:	3e124925 	.word	0x3e124925
 8005840:	3eaaaaab 	.word	0x3eaaaaab
 8005844:	bd15a221 	.word	0xbd15a221
 8005848:	3d6ef16b 	.word	0x3d6ef16b
 800584c:	3d9d8795 	.word	0x3d9d8795
 8005850:	3de38e38 	.word	0x3de38e38
 8005854:	3e4ccccd 	.word	0x3e4ccccd
 8005858:	401bffff 	.word	0x401bffff
 800585c:	bf800000 	.word	0xbf800000
 8005860:	08008360 	.word	0x08008360
 8005864:	08008350 	.word	0x08008350
 8005868:	3fc90fdb 	.word	0x3fc90fdb

0800586c <fabsf>:
 800586c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005870:	4770      	bx	lr
	...

08005874 <__errno>:
 8005874:	4b01      	ldr	r3, [pc, #4]	; (800587c <__errno+0x8>)
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000020 	.word	0x20000020

08005880 <__libc_init_array>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	2600      	movs	r6, #0
 8005884:	4d0c      	ldr	r5, [pc, #48]	; (80058b8 <__libc_init_array+0x38>)
 8005886:	4c0d      	ldr	r4, [pc, #52]	; (80058bc <__libc_init_array+0x3c>)
 8005888:	1b64      	subs	r4, r4, r5
 800588a:	10a4      	asrs	r4, r4, #2
 800588c:	42a6      	cmp	r6, r4
 800588e:	d109      	bne.n	80058a4 <__libc_init_array+0x24>
 8005890:	f002 fd30 	bl	80082f4 <_init>
 8005894:	2600      	movs	r6, #0
 8005896:	4d0a      	ldr	r5, [pc, #40]	; (80058c0 <__libc_init_array+0x40>)
 8005898:	4c0a      	ldr	r4, [pc, #40]	; (80058c4 <__libc_init_array+0x44>)
 800589a:	1b64      	subs	r4, r4, r5
 800589c:	10a4      	asrs	r4, r4, #2
 800589e:	42a6      	cmp	r6, r4
 80058a0:	d105      	bne.n	80058ae <__libc_init_array+0x2e>
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a8:	4798      	blx	r3
 80058aa:	3601      	adds	r6, #1
 80058ac:	e7ee      	b.n	800588c <__libc_init_array+0xc>
 80058ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b2:	4798      	blx	r3
 80058b4:	3601      	adds	r6, #1
 80058b6:	e7f2      	b.n	800589e <__libc_init_array+0x1e>
 80058b8:	0800874c 	.word	0x0800874c
 80058bc:	0800874c 	.word	0x0800874c
 80058c0:	0800874c 	.word	0x0800874c
 80058c4:	08008754 	.word	0x08008754

080058c8 <memcpy>:
 80058c8:	440a      	add	r2, r1
 80058ca:	4291      	cmp	r1, r2
 80058cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80058d0:	d100      	bne.n	80058d4 <memcpy+0xc>
 80058d2:	4770      	bx	lr
 80058d4:	b510      	push	{r4, lr}
 80058d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058da:	4291      	cmp	r1, r2
 80058dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058e0:	d1f9      	bne.n	80058d6 <memcpy+0xe>
 80058e2:	bd10      	pop	{r4, pc}

080058e4 <memset>:
 80058e4:	4603      	mov	r3, r0
 80058e6:	4402      	add	r2, r0
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d100      	bne.n	80058ee <memset+0xa>
 80058ec:	4770      	bx	lr
 80058ee:	f803 1b01 	strb.w	r1, [r3], #1
 80058f2:	e7f9      	b.n	80058e8 <memset+0x4>

080058f4 <__cvt>:
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058fa:	461f      	mov	r7, r3
 80058fc:	bfbb      	ittet	lt
 80058fe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005902:	461f      	movlt	r7, r3
 8005904:	2300      	movge	r3, #0
 8005906:	232d      	movlt	r3, #45	; 0x2d
 8005908:	b088      	sub	sp, #32
 800590a:	4614      	mov	r4, r2
 800590c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800590e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005910:	7013      	strb	r3, [r2, #0]
 8005912:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005914:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005918:	f023 0820 	bic.w	r8, r3, #32
 800591c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005920:	d005      	beq.n	800592e <__cvt+0x3a>
 8005922:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005926:	d100      	bne.n	800592a <__cvt+0x36>
 8005928:	3501      	adds	r5, #1
 800592a:	2302      	movs	r3, #2
 800592c:	e000      	b.n	8005930 <__cvt+0x3c>
 800592e:	2303      	movs	r3, #3
 8005930:	aa07      	add	r2, sp, #28
 8005932:	9204      	str	r2, [sp, #16]
 8005934:	aa06      	add	r2, sp, #24
 8005936:	e9cd a202 	strd	sl, r2, [sp, #8]
 800593a:	e9cd 3500 	strd	r3, r5, [sp]
 800593e:	4622      	mov	r2, r4
 8005940:	463b      	mov	r3, r7
 8005942:	f000 fcc5 	bl	80062d0 <_dtoa_r>
 8005946:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800594a:	4606      	mov	r6, r0
 800594c:	d102      	bne.n	8005954 <__cvt+0x60>
 800594e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005950:	07db      	lsls	r3, r3, #31
 8005952:	d522      	bpl.n	800599a <__cvt+0xa6>
 8005954:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005958:	eb06 0905 	add.w	r9, r6, r5
 800595c:	d110      	bne.n	8005980 <__cvt+0x8c>
 800595e:	7833      	ldrb	r3, [r6, #0]
 8005960:	2b30      	cmp	r3, #48	; 0x30
 8005962:	d10a      	bne.n	800597a <__cvt+0x86>
 8005964:	2200      	movs	r2, #0
 8005966:	2300      	movs	r3, #0
 8005968:	4620      	mov	r0, r4
 800596a:	4639      	mov	r1, r7
 800596c:	f7fb f888 	bl	8000a80 <__aeabi_dcmpeq>
 8005970:	b918      	cbnz	r0, 800597a <__cvt+0x86>
 8005972:	f1c5 0501 	rsb	r5, r5, #1
 8005976:	f8ca 5000 	str.w	r5, [sl]
 800597a:	f8da 3000 	ldr.w	r3, [sl]
 800597e:	4499      	add	r9, r3
 8005980:	2200      	movs	r2, #0
 8005982:	2300      	movs	r3, #0
 8005984:	4620      	mov	r0, r4
 8005986:	4639      	mov	r1, r7
 8005988:	f7fb f87a 	bl	8000a80 <__aeabi_dcmpeq>
 800598c:	b108      	cbz	r0, 8005992 <__cvt+0x9e>
 800598e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005992:	2230      	movs	r2, #48	; 0x30
 8005994:	9b07      	ldr	r3, [sp, #28]
 8005996:	454b      	cmp	r3, r9
 8005998:	d307      	bcc.n	80059aa <__cvt+0xb6>
 800599a:	4630      	mov	r0, r6
 800599c:	9b07      	ldr	r3, [sp, #28]
 800599e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80059a0:	1b9b      	subs	r3, r3, r6
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	b008      	add	sp, #32
 80059a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059aa:	1c59      	adds	r1, r3, #1
 80059ac:	9107      	str	r1, [sp, #28]
 80059ae:	701a      	strb	r2, [r3, #0]
 80059b0:	e7f0      	b.n	8005994 <__cvt+0xa0>

080059b2 <__exponent>:
 80059b2:	4603      	mov	r3, r0
 80059b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059b6:	2900      	cmp	r1, #0
 80059b8:	f803 2b02 	strb.w	r2, [r3], #2
 80059bc:	bfb6      	itet	lt
 80059be:	222d      	movlt	r2, #45	; 0x2d
 80059c0:	222b      	movge	r2, #43	; 0x2b
 80059c2:	4249      	neglt	r1, r1
 80059c4:	2909      	cmp	r1, #9
 80059c6:	7042      	strb	r2, [r0, #1]
 80059c8:	dd2b      	ble.n	8005a22 <__exponent+0x70>
 80059ca:	f10d 0407 	add.w	r4, sp, #7
 80059ce:	46a4      	mov	ip, r4
 80059d0:	270a      	movs	r7, #10
 80059d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80059d6:	460a      	mov	r2, r1
 80059d8:	46a6      	mov	lr, r4
 80059da:	fb07 1516 	mls	r5, r7, r6, r1
 80059de:	2a63      	cmp	r2, #99	; 0x63
 80059e0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80059e4:	4631      	mov	r1, r6
 80059e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80059ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059ee:	dcf0      	bgt.n	80059d2 <__exponent+0x20>
 80059f0:	3130      	adds	r1, #48	; 0x30
 80059f2:	f1ae 0502 	sub.w	r5, lr, #2
 80059f6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059fa:	4629      	mov	r1, r5
 80059fc:	1c44      	adds	r4, r0, #1
 80059fe:	4561      	cmp	r1, ip
 8005a00:	d30a      	bcc.n	8005a18 <__exponent+0x66>
 8005a02:	f10d 0209 	add.w	r2, sp, #9
 8005a06:	eba2 020e 	sub.w	r2, r2, lr
 8005a0a:	4565      	cmp	r5, ip
 8005a0c:	bf88      	it	hi
 8005a0e:	2200      	movhi	r2, #0
 8005a10:	4413      	add	r3, r2
 8005a12:	1a18      	subs	r0, r3, r0
 8005a14:	b003      	add	sp, #12
 8005a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a1c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a20:	e7ed      	b.n	80059fe <__exponent+0x4c>
 8005a22:	2330      	movs	r3, #48	; 0x30
 8005a24:	3130      	adds	r1, #48	; 0x30
 8005a26:	7083      	strb	r3, [r0, #2]
 8005a28:	70c1      	strb	r1, [r0, #3]
 8005a2a:	1d03      	adds	r3, r0, #4
 8005a2c:	e7f1      	b.n	8005a12 <__exponent+0x60>
	...

08005a30 <_printf_float>:
 8005a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a34:	b091      	sub	sp, #68	; 0x44
 8005a36:	460c      	mov	r4, r1
 8005a38:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	461f      	mov	r7, r3
 8005a40:	4605      	mov	r5, r0
 8005a42:	f001 fa33 	bl	8006eac <_localeconv_r>
 8005a46:	6803      	ldr	r3, [r0, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4c:	f7fa fbec 	bl	8000228 <strlen>
 8005a50:	2300      	movs	r3, #0
 8005a52:	930e      	str	r3, [sp, #56]	; 0x38
 8005a54:	f8d8 3000 	ldr.w	r3, [r8]
 8005a58:	900a      	str	r0, [sp, #40]	; 0x28
 8005a5a:	3307      	adds	r3, #7
 8005a5c:	f023 0307 	bic.w	r3, r3, #7
 8005a60:	f103 0208 	add.w	r2, r3, #8
 8005a64:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005a68:	f8d4 b000 	ldr.w	fp, [r4]
 8005a6c:	f8c8 2000 	str.w	r2, [r8]
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a78:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005a7c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a82:	f04f 32ff 	mov.w	r2, #4294967295
 8005a86:	4640      	mov	r0, r8
 8005a88:	4b9c      	ldr	r3, [pc, #624]	; (8005cfc <_printf_float+0x2cc>)
 8005a8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a8c:	f7fb f82a 	bl	8000ae4 <__aeabi_dcmpun>
 8005a90:	bb70      	cbnz	r0, 8005af0 <_printf_float+0xc0>
 8005a92:	f04f 32ff 	mov.w	r2, #4294967295
 8005a96:	4640      	mov	r0, r8
 8005a98:	4b98      	ldr	r3, [pc, #608]	; (8005cfc <_printf_float+0x2cc>)
 8005a9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a9c:	f7fb f804 	bl	8000aa8 <__aeabi_dcmple>
 8005aa0:	bb30      	cbnz	r0, 8005af0 <_printf_float+0xc0>
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	4651      	mov	r1, sl
 8005aaa:	f7fa fff3 	bl	8000a94 <__aeabi_dcmplt>
 8005aae:	b110      	cbz	r0, 8005ab6 <_printf_float+0x86>
 8005ab0:	232d      	movs	r3, #45	; 0x2d
 8005ab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab6:	4b92      	ldr	r3, [pc, #584]	; (8005d00 <_printf_float+0x2d0>)
 8005ab8:	4892      	ldr	r0, [pc, #584]	; (8005d04 <_printf_float+0x2d4>)
 8005aba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005abe:	bf94      	ite	ls
 8005ac0:	4698      	movls	r8, r3
 8005ac2:	4680      	movhi	r8, r0
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	f04f 0a00 	mov.w	sl, #0
 8005aca:	6123      	str	r3, [r4, #16]
 8005acc:	f02b 0304 	bic.w	r3, fp, #4
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	4633      	mov	r3, r6
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	9700      	str	r7, [sp, #0]
 8005ada:	aa0f      	add	r2, sp, #60	; 0x3c
 8005adc:	f000 f9d4 	bl	8005e88 <_printf_common>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f040 8090 	bne.w	8005c06 <_printf_float+0x1d6>
 8005ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aea:	b011      	add	sp, #68	; 0x44
 8005aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af0:	4642      	mov	r2, r8
 8005af2:	4653      	mov	r3, sl
 8005af4:	4640      	mov	r0, r8
 8005af6:	4651      	mov	r1, sl
 8005af8:	f7fa fff4 	bl	8000ae4 <__aeabi_dcmpun>
 8005afc:	b148      	cbz	r0, 8005b12 <_printf_float+0xe2>
 8005afe:	f1ba 0f00 	cmp.w	sl, #0
 8005b02:	bfb8      	it	lt
 8005b04:	232d      	movlt	r3, #45	; 0x2d
 8005b06:	4880      	ldr	r0, [pc, #512]	; (8005d08 <_printf_float+0x2d8>)
 8005b08:	bfb8      	it	lt
 8005b0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b0e:	4b7f      	ldr	r3, [pc, #508]	; (8005d0c <_printf_float+0x2dc>)
 8005b10:	e7d3      	b.n	8005aba <_printf_float+0x8a>
 8005b12:	6863      	ldr	r3, [r4, #4]
 8005b14:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	d142      	bne.n	8005ba2 <_printf_float+0x172>
 8005b1c:	2306      	movs	r3, #6
 8005b1e:	6063      	str	r3, [r4, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	9206      	str	r2, [sp, #24]
 8005b24:	aa0e      	add	r2, sp, #56	; 0x38
 8005b26:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005b2a:	aa0d      	add	r2, sp, #52	; 0x34
 8005b2c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005b30:	9203      	str	r2, [sp, #12]
 8005b32:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005b36:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	6863      	ldr	r3, [r4, #4]
 8005b3e:	4642      	mov	r2, r8
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	4628      	mov	r0, r5
 8005b44:	4653      	mov	r3, sl
 8005b46:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b48:	f7ff fed4 	bl	80058f4 <__cvt>
 8005b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b4e:	4680      	mov	r8, r0
 8005b50:	2947      	cmp	r1, #71	; 0x47
 8005b52:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b54:	d108      	bne.n	8005b68 <_printf_float+0x138>
 8005b56:	1cc8      	adds	r0, r1, #3
 8005b58:	db02      	blt.n	8005b60 <_printf_float+0x130>
 8005b5a:	6863      	ldr	r3, [r4, #4]
 8005b5c:	4299      	cmp	r1, r3
 8005b5e:	dd40      	ble.n	8005be2 <_printf_float+0x1b2>
 8005b60:	f1a9 0902 	sub.w	r9, r9, #2
 8005b64:	fa5f f989 	uxtb.w	r9, r9
 8005b68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b6c:	d81f      	bhi.n	8005bae <_printf_float+0x17e>
 8005b6e:	464a      	mov	r2, r9
 8005b70:	3901      	subs	r1, #1
 8005b72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b76:	910d      	str	r1, [sp, #52]	; 0x34
 8005b78:	f7ff ff1b 	bl	80059b2 <__exponent>
 8005b7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b7e:	4682      	mov	sl, r0
 8005b80:	1813      	adds	r3, r2, r0
 8005b82:	2a01      	cmp	r2, #1
 8005b84:	6123      	str	r3, [r4, #16]
 8005b86:	dc02      	bgt.n	8005b8e <_printf_float+0x15e>
 8005b88:	6822      	ldr	r2, [r4, #0]
 8005b8a:	07d2      	lsls	r2, r2, #31
 8005b8c:	d501      	bpl.n	8005b92 <_printf_float+0x162>
 8005b8e:	3301      	adds	r3, #1
 8005b90:	6123      	str	r3, [r4, #16]
 8005b92:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d09b      	beq.n	8005ad2 <_printf_float+0xa2>
 8005b9a:	232d      	movs	r3, #45	; 0x2d
 8005b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba0:	e797      	b.n	8005ad2 <_printf_float+0xa2>
 8005ba2:	2947      	cmp	r1, #71	; 0x47
 8005ba4:	d1bc      	bne.n	8005b20 <_printf_float+0xf0>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1ba      	bne.n	8005b20 <_printf_float+0xf0>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e7b7      	b.n	8005b1e <_printf_float+0xee>
 8005bae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005bb2:	d118      	bne.n	8005be6 <_printf_float+0x1b6>
 8005bb4:	2900      	cmp	r1, #0
 8005bb6:	6863      	ldr	r3, [r4, #4]
 8005bb8:	dd0b      	ble.n	8005bd2 <_printf_float+0x1a2>
 8005bba:	6121      	str	r1, [r4, #16]
 8005bbc:	b913      	cbnz	r3, 8005bc4 <_printf_float+0x194>
 8005bbe:	6822      	ldr	r2, [r4, #0]
 8005bc0:	07d0      	lsls	r0, r2, #31
 8005bc2:	d502      	bpl.n	8005bca <_printf_float+0x19a>
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	440b      	add	r3, r1
 8005bc8:	6123      	str	r3, [r4, #16]
 8005bca:	f04f 0a00 	mov.w	sl, #0
 8005bce:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bd0:	e7df      	b.n	8005b92 <_printf_float+0x162>
 8005bd2:	b913      	cbnz	r3, 8005bda <_printf_float+0x1aa>
 8005bd4:	6822      	ldr	r2, [r4, #0]
 8005bd6:	07d2      	lsls	r2, r2, #31
 8005bd8:	d501      	bpl.n	8005bde <_printf_float+0x1ae>
 8005bda:	3302      	adds	r3, #2
 8005bdc:	e7f4      	b.n	8005bc8 <_printf_float+0x198>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e7f2      	b.n	8005bc8 <_printf_float+0x198>
 8005be2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005be8:	4299      	cmp	r1, r3
 8005bea:	db05      	blt.n	8005bf8 <_printf_float+0x1c8>
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	6121      	str	r1, [r4, #16]
 8005bf0:	07d8      	lsls	r0, r3, #31
 8005bf2:	d5ea      	bpl.n	8005bca <_printf_float+0x19a>
 8005bf4:	1c4b      	adds	r3, r1, #1
 8005bf6:	e7e7      	b.n	8005bc8 <_printf_float+0x198>
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	bfcc      	ite	gt
 8005bfc:	2201      	movgt	r2, #1
 8005bfe:	f1c1 0202 	rsble	r2, r1, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	e7e0      	b.n	8005bc8 <_printf_float+0x198>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	055a      	lsls	r2, r3, #21
 8005c0a:	d407      	bmi.n	8005c1c <_printf_float+0x1ec>
 8005c0c:	6923      	ldr	r3, [r4, #16]
 8005c0e:	4642      	mov	r2, r8
 8005c10:	4631      	mov	r1, r6
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b8      	blx	r7
 8005c16:	3001      	adds	r0, #1
 8005c18:	d12b      	bne.n	8005c72 <_printf_float+0x242>
 8005c1a:	e764      	b.n	8005ae6 <_printf_float+0xb6>
 8005c1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005c20:	f240 80dd 	bls.w	8005dde <_printf_float+0x3ae>
 8005c24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f7fa ff28 	bl	8000a80 <__aeabi_dcmpeq>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d033      	beq.n	8005c9c <_printf_float+0x26c>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4631      	mov	r1, r6
 8005c38:	4628      	mov	r0, r5
 8005c3a:	4a35      	ldr	r2, [pc, #212]	; (8005d10 <_printf_float+0x2e0>)
 8005c3c:	47b8      	blx	r7
 8005c3e:	3001      	adds	r0, #1
 8005c40:	f43f af51 	beq.w	8005ae6 <_printf_float+0xb6>
 8005c44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	db02      	blt.n	8005c52 <_printf_float+0x222>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	07d8      	lsls	r0, r3, #31
 8005c50:	d50f      	bpl.n	8005c72 <_printf_float+0x242>
 8005c52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	f43f af42 	beq.w	8005ae6 <_printf_float+0xb6>
 8005c62:	f04f 0800 	mov.w	r8, #0
 8005c66:	f104 091a 	add.w	r9, r4, #26
 8005c6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	4543      	cmp	r3, r8
 8005c70:	dc09      	bgt.n	8005c86 <_printf_float+0x256>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	079b      	lsls	r3, r3, #30
 8005c76:	f100 8102 	bmi.w	8005e7e <_printf_float+0x44e>
 8005c7a:	68e0      	ldr	r0, [r4, #12]
 8005c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c7e:	4298      	cmp	r0, r3
 8005c80:	bfb8      	it	lt
 8005c82:	4618      	movlt	r0, r3
 8005c84:	e731      	b.n	8005aea <_printf_float+0xba>
 8005c86:	2301      	movs	r3, #1
 8005c88:	464a      	mov	r2, r9
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	47b8      	blx	r7
 8005c90:	3001      	adds	r0, #1
 8005c92:	f43f af28 	beq.w	8005ae6 <_printf_float+0xb6>
 8005c96:	f108 0801 	add.w	r8, r8, #1
 8005c9a:	e7e6      	b.n	8005c6a <_printf_float+0x23a>
 8005c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	dc38      	bgt.n	8005d14 <_printf_float+0x2e4>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	4a19      	ldr	r2, [pc, #100]	; (8005d10 <_printf_float+0x2e0>)
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	f43f af1a 	beq.w	8005ae6 <_printf_float+0xb6>
 8005cb2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	d102      	bne.n	8005cc0 <_printf_float+0x290>
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	07d9      	lsls	r1, r3, #31
 8005cbe:	d5d8      	bpl.n	8005c72 <_printf_float+0x242>
 8005cc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cc4:	4631      	mov	r1, r6
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	47b8      	blx	r7
 8005cca:	3001      	adds	r0, #1
 8005ccc:	f43f af0b 	beq.w	8005ae6 <_printf_float+0xb6>
 8005cd0:	f04f 0900 	mov.w	r9, #0
 8005cd4:	f104 0a1a 	add.w	sl, r4, #26
 8005cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cda:	425b      	negs	r3, r3
 8005cdc:	454b      	cmp	r3, r9
 8005cde:	dc01      	bgt.n	8005ce4 <_printf_float+0x2b4>
 8005ce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ce2:	e794      	b.n	8005c0e <_printf_float+0x1de>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	4652      	mov	r2, sl
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4628      	mov	r0, r5
 8005cec:	47b8      	blx	r7
 8005cee:	3001      	adds	r0, #1
 8005cf0:	f43f aef9 	beq.w	8005ae6 <_printf_float+0xb6>
 8005cf4:	f109 0901 	add.w	r9, r9, #1
 8005cf8:	e7ee      	b.n	8005cd8 <_printf_float+0x2a8>
 8005cfa:	bf00      	nop
 8005cfc:	7fefffff 	.word	0x7fefffff
 8005d00:	08008374 	.word	0x08008374
 8005d04:	08008378 	.word	0x08008378
 8005d08:	08008380 	.word	0x08008380
 8005d0c:	0800837c 	.word	0x0800837c
 8005d10:	08008384 	.word	0x08008384
 8005d14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	bfa8      	it	ge
 8005d1c:	461a      	movge	r2, r3
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	4691      	mov	r9, r2
 8005d22:	dc37      	bgt.n	8005d94 <_printf_float+0x364>
 8005d24:	f04f 0b00 	mov.w	fp, #0
 8005d28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d2c:	f104 021a 	add.w	r2, r4, #26
 8005d30:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005d34:	ebaa 0309 	sub.w	r3, sl, r9
 8005d38:	455b      	cmp	r3, fp
 8005d3a:	dc33      	bgt.n	8005da4 <_printf_float+0x374>
 8005d3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d40:	429a      	cmp	r2, r3
 8005d42:	db3b      	blt.n	8005dbc <_printf_float+0x38c>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	07da      	lsls	r2, r3, #31
 8005d48:	d438      	bmi.n	8005dbc <_printf_float+0x38c>
 8005d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d4c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d4e:	eba3 020a 	sub.w	r2, r3, sl
 8005d52:	eba3 0901 	sub.w	r9, r3, r1
 8005d56:	4591      	cmp	r9, r2
 8005d58:	bfa8      	it	ge
 8005d5a:	4691      	movge	r9, r2
 8005d5c:	f1b9 0f00 	cmp.w	r9, #0
 8005d60:	dc34      	bgt.n	8005dcc <_printf_float+0x39c>
 8005d62:	f04f 0800 	mov.w	r8, #0
 8005d66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d6a:	f104 0a1a 	add.w	sl, r4, #26
 8005d6e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d72:	1a9b      	subs	r3, r3, r2
 8005d74:	eba3 0309 	sub.w	r3, r3, r9
 8005d78:	4543      	cmp	r3, r8
 8005d7a:	f77f af7a 	ble.w	8005c72 <_printf_float+0x242>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4652      	mov	r2, sl
 8005d82:	4631      	mov	r1, r6
 8005d84:	4628      	mov	r0, r5
 8005d86:	47b8      	blx	r7
 8005d88:	3001      	adds	r0, #1
 8005d8a:	f43f aeac 	beq.w	8005ae6 <_printf_float+0xb6>
 8005d8e:	f108 0801 	add.w	r8, r8, #1
 8005d92:	e7ec      	b.n	8005d6e <_printf_float+0x33e>
 8005d94:	4613      	mov	r3, r2
 8005d96:	4631      	mov	r1, r6
 8005d98:	4642      	mov	r2, r8
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	47b8      	blx	r7
 8005d9e:	3001      	adds	r0, #1
 8005da0:	d1c0      	bne.n	8005d24 <_printf_float+0x2f4>
 8005da2:	e6a0      	b.n	8005ae6 <_printf_float+0xb6>
 8005da4:	2301      	movs	r3, #1
 8005da6:	4631      	mov	r1, r6
 8005da8:	4628      	mov	r0, r5
 8005daa:	920b      	str	r2, [sp, #44]	; 0x2c
 8005dac:	47b8      	blx	r7
 8005dae:	3001      	adds	r0, #1
 8005db0:	f43f ae99 	beq.w	8005ae6 <_printf_float+0xb6>
 8005db4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005db6:	f10b 0b01 	add.w	fp, fp, #1
 8005dba:	e7b9      	b.n	8005d30 <_printf_float+0x300>
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	47b8      	blx	r7
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	d1bf      	bne.n	8005d4a <_printf_float+0x31a>
 8005dca:	e68c      	b.n	8005ae6 <_printf_float+0xb6>
 8005dcc:	464b      	mov	r3, r9
 8005dce:	4631      	mov	r1, r6
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	eb08 020a 	add.w	r2, r8, sl
 8005dd6:	47b8      	blx	r7
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d1c2      	bne.n	8005d62 <_printf_float+0x332>
 8005ddc:	e683      	b.n	8005ae6 <_printf_float+0xb6>
 8005dde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005de0:	2a01      	cmp	r2, #1
 8005de2:	dc01      	bgt.n	8005de8 <_printf_float+0x3b8>
 8005de4:	07db      	lsls	r3, r3, #31
 8005de6:	d537      	bpl.n	8005e58 <_printf_float+0x428>
 8005de8:	2301      	movs	r3, #1
 8005dea:	4642      	mov	r2, r8
 8005dec:	4631      	mov	r1, r6
 8005dee:	4628      	mov	r0, r5
 8005df0:	47b8      	blx	r7
 8005df2:	3001      	adds	r0, #1
 8005df4:	f43f ae77 	beq.w	8005ae6 <_printf_float+0xb6>
 8005df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	4628      	mov	r0, r5
 8005e00:	47b8      	blx	r7
 8005e02:	3001      	adds	r0, #1
 8005e04:	f43f ae6f 	beq.w	8005ae6 <_printf_float+0xb6>
 8005e08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f7fa fe36 	bl	8000a80 <__aeabi_dcmpeq>
 8005e14:	b9d8      	cbnz	r0, 8005e4e <_printf_float+0x41e>
 8005e16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e18:	f108 0201 	add.w	r2, r8, #1
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	d10e      	bne.n	8005e46 <_printf_float+0x416>
 8005e28:	e65d      	b.n	8005ae6 <_printf_float+0xb6>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	464a      	mov	r2, r9
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b8      	blx	r7
 8005e34:	3001      	adds	r0, #1
 8005e36:	f43f ae56 	beq.w	8005ae6 <_printf_float+0xb6>
 8005e3a:	f108 0801 	add.w	r8, r8, #1
 8005e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e40:	3b01      	subs	r3, #1
 8005e42:	4543      	cmp	r3, r8
 8005e44:	dcf1      	bgt.n	8005e2a <_printf_float+0x3fa>
 8005e46:	4653      	mov	r3, sl
 8005e48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e4c:	e6e0      	b.n	8005c10 <_printf_float+0x1e0>
 8005e4e:	f04f 0800 	mov.w	r8, #0
 8005e52:	f104 091a 	add.w	r9, r4, #26
 8005e56:	e7f2      	b.n	8005e3e <_printf_float+0x40e>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	4642      	mov	r2, r8
 8005e5c:	e7df      	b.n	8005e1e <_printf_float+0x3ee>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	464a      	mov	r2, r9
 8005e62:	4631      	mov	r1, r6
 8005e64:	4628      	mov	r0, r5
 8005e66:	47b8      	blx	r7
 8005e68:	3001      	adds	r0, #1
 8005e6a:	f43f ae3c 	beq.w	8005ae6 <_printf_float+0xb6>
 8005e6e:	f108 0801 	add.w	r8, r8, #1
 8005e72:	68e3      	ldr	r3, [r4, #12]
 8005e74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e76:	1a5b      	subs	r3, r3, r1
 8005e78:	4543      	cmp	r3, r8
 8005e7a:	dcf0      	bgt.n	8005e5e <_printf_float+0x42e>
 8005e7c:	e6fd      	b.n	8005c7a <_printf_float+0x24a>
 8005e7e:	f04f 0800 	mov.w	r8, #0
 8005e82:	f104 0919 	add.w	r9, r4, #25
 8005e86:	e7f4      	b.n	8005e72 <_printf_float+0x442>

08005e88 <_printf_common>:
 8005e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8c:	4616      	mov	r6, r2
 8005e8e:	4699      	mov	r9, r3
 8005e90:	688a      	ldr	r2, [r1, #8]
 8005e92:	690b      	ldr	r3, [r1, #16]
 8005e94:	4607      	mov	r7, r0
 8005e96:	4293      	cmp	r3, r2
 8005e98:	bfb8      	it	lt
 8005e9a:	4613      	movlt	r3, r2
 8005e9c:	6033      	str	r3, [r6, #0]
 8005e9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ea8:	b10a      	cbz	r2, 8005eae <_printf_common+0x26>
 8005eaa:	3301      	adds	r3, #1
 8005eac:	6033      	str	r3, [r6, #0]
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	0699      	lsls	r1, r3, #26
 8005eb2:	bf42      	ittt	mi
 8005eb4:	6833      	ldrmi	r3, [r6, #0]
 8005eb6:	3302      	addmi	r3, #2
 8005eb8:	6033      	strmi	r3, [r6, #0]
 8005eba:	6825      	ldr	r5, [r4, #0]
 8005ebc:	f015 0506 	ands.w	r5, r5, #6
 8005ec0:	d106      	bne.n	8005ed0 <_printf_common+0x48>
 8005ec2:	f104 0a19 	add.w	sl, r4, #25
 8005ec6:	68e3      	ldr	r3, [r4, #12]
 8005ec8:	6832      	ldr	r2, [r6, #0]
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	42ab      	cmp	r3, r5
 8005ece:	dc28      	bgt.n	8005f22 <_printf_common+0x9a>
 8005ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ed4:	1e13      	subs	r3, r2, #0
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	bf18      	it	ne
 8005eda:	2301      	movne	r3, #1
 8005edc:	0692      	lsls	r2, r2, #26
 8005ede:	d42d      	bmi.n	8005f3c <_printf_common+0xb4>
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ee8:	47c0      	blx	r8
 8005eea:	3001      	adds	r0, #1
 8005eec:	d020      	beq.n	8005f30 <_printf_common+0xa8>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	68e5      	ldr	r5, [r4, #12]
 8005ef2:	f003 0306 	and.w	r3, r3, #6
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	bf18      	it	ne
 8005efa:	2500      	movne	r5, #0
 8005efc:	6832      	ldr	r2, [r6, #0]
 8005efe:	f04f 0600 	mov.w	r6, #0
 8005f02:	68a3      	ldr	r3, [r4, #8]
 8005f04:	bf08      	it	eq
 8005f06:	1aad      	subeq	r5, r5, r2
 8005f08:	6922      	ldr	r2, [r4, #16]
 8005f0a:	bf08      	it	eq
 8005f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f10:	4293      	cmp	r3, r2
 8005f12:	bfc4      	itt	gt
 8005f14:	1a9b      	subgt	r3, r3, r2
 8005f16:	18ed      	addgt	r5, r5, r3
 8005f18:	341a      	adds	r4, #26
 8005f1a:	42b5      	cmp	r5, r6
 8005f1c:	d11a      	bne.n	8005f54 <_printf_common+0xcc>
 8005f1e:	2000      	movs	r0, #0
 8005f20:	e008      	b.n	8005f34 <_printf_common+0xac>
 8005f22:	2301      	movs	r3, #1
 8005f24:	4652      	mov	r2, sl
 8005f26:	4649      	mov	r1, r9
 8005f28:	4638      	mov	r0, r7
 8005f2a:	47c0      	blx	r8
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d103      	bne.n	8005f38 <_printf_common+0xb0>
 8005f30:	f04f 30ff 	mov.w	r0, #4294967295
 8005f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f38:	3501      	adds	r5, #1
 8005f3a:	e7c4      	b.n	8005ec6 <_printf_common+0x3e>
 8005f3c:	2030      	movs	r0, #48	; 0x30
 8005f3e:	18e1      	adds	r1, r4, r3
 8005f40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f4a:	4422      	add	r2, r4
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f52:	e7c5      	b.n	8005ee0 <_printf_common+0x58>
 8005f54:	2301      	movs	r3, #1
 8005f56:	4622      	mov	r2, r4
 8005f58:	4649      	mov	r1, r9
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	47c0      	blx	r8
 8005f5e:	3001      	adds	r0, #1
 8005f60:	d0e6      	beq.n	8005f30 <_printf_common+0xa8>
 8005f62:	3601      	adds	r6, #1
 8005f64:	e7d9      	b.n	8005f1a <_printf_common+0x92>
	...

08005f68 <_printf_i>:
 8005f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f6c:	7e0f      	ldrb	r7, [r1, #24]
 8005f6e:	4691      	mov	r9, r2
 8005f70:	2f78      	cmp	r7, #120	; 0x78
 8005f72:	4680      	mov	r8, r0
 8005f74:	460c      	mov	r4, r1
 8005f76:	469a      	mov	sl, r3
 8005f78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f7e:	d807      	bhi.n	8005f90 <_printf_i+0x28>
 8005f80:	2f62      	cmp	r7, #98	; 0x62
 8005f82:	d80a      	bhi.n	8005f9a <_printf_i+0x32>
 8005f84:	2f00      	cmp	r7, #0
 8005f86:	f000 80d9 	beq.w	800613c <_printf_i+0x1d4>
 8005f8a:	2f58      	cmp	r7, #88	; 0x58
 8005f8c:	f000 80a4 	beq.w	80060d8 <_printf_i+0x170>
 8005f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f98:	e03a      	b.n	8006010 <_printf_i+0xa8>
 8005f9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f9e:	2b15      	cmp	r3, #21
 8005fa0:	d8f6      	bhi.n	8005f90 <_printf_i+0x28>
 8005fa2:	a101      	add	r1, pc, #4	; (adr r1, 8005fa8 <_printf_i+0x40>)
 8005fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fa8:	08006001 	.word	0x08006001
 8005fac:	08006015 	.word	0x08006015
 8005fb0:	08005f91 	.word	0x08005f91
 8005fb4:	08005f91 	.word	0x08005f91
 8005fb8:	08005f91 	.word	0x08005f91
 8005fbc:	08005f91 	.word	0x08005f91
 8005fc0:	08006015 	.word	0x08006015
 8005fc4:	08005f91 	.word	0x08005f91
 8005fc8:	08005f91 	.word	0x08005f91
 8005fcc:	08005f91 	.word	0x08005f91
 8005fd0:	08005f91 	.word	0x08005f91
 8005fd4:	08006123 	.word	0x08006123
 8005fd8:	08006045 	.word	0x08006045
 8005fdc:	08006105 	.word	0x08006105
 8005fe0:	08005f91 	.word	0x08005f91
 8005fe4:	08005f91 	.word	0x08005f91
 8005fe8:	08006145 	.word	0x08006145
 8005fec:	08005f91 	.word	0x08005f91
 8005ff0:	08006045 	.word	0x08006045
 8005ff4:	08005f91 	.word	0x08005f91
 8005ff8:	08005f91 	.word	0x08005f91
 8005ffc:	0800610d 	.word	0x0800610d
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	1d1a      	adds	r2, r3, #4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	602a      	str	r2, [r5, #0]
 8006008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800600c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006010:	2301      	movs	r3, #1
 8006012:	e0a4      	b.n	800615e <_printf_i+0x1f6>
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	6829      	ldr	r1, [r5, #0]
 8006018:	0606      	lsls	r6, r0, #24
 800601a:	f101 0304 	add.w	r3, r1, #4
 800601e:	d50a      	bpl.n	8006036 <_printf_i+0xce>
 8006020:	680e      	ldr	r6, [r1, #0]
 8006022:	602b      	str	r3, [r5, #0]
 8006024:	2e00      	cmp	r6, #0
 8006026:	da03      	bge.n	8006030 <_printf_i+0xc8>
 8006028:	232d      	movs	r3, #45	; 0x2d
 800602a:	4276      	negs	r6, r6
 800602c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006030:	230a      	movs	r3, #10
 8006032:	485e      	ldr	r0, [pc, #376]	; (80061ac <_printf_i+0x244>)
 8006034:	e019      	b.n	800606a <_printf_i+0x102>
 8006036:	680e      	ldr	r6, [r1, #0]
 8006038:	f010 0f40 	tst.w	r0, #64	; 0x40
 800603c:	602b      	str	r3, [r5, #0]
 800603e:	bf18      	it	ne
 8006040:	b236      	sxthne	r6, r6
 8006042:	e7ef      	b.n	8006024 <_printf_i+0xbc>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	6820      	ldr	r0, [r4, #0]
 8006048:	1d19      	adds	r1, r3, #4
 800604a:	6029      	str	r1, [r5, #0]
 800604c:	0601      	lsls	r1, r0, #24
 800604e:	d501      	bpl.n	8006054 <_printf_i+0xec>
 8006050:	681e      	ldr	r6, [r3, #0]
 8006052:	e002      	b.n	800605a <_printf_i+0xf2>
 8006054:	0646      	lsls	r6, r0, #25
 8006056:	d5fb      	bpl.n	8006050 <_printf_i+0xe8>
 8006058:	881e      	ldrh	r6, [r3, #0]
 800605a:	2f6f      	cmp	r7, #111	; 0x6f
 800605c:	bf0c      	ite	eq
 800605e:	2308      	moveq	r3, #8
 8006060:	230a      	movne	r3, #10
 8006062:	4852      	ldr	r0, [pc, #328]	; (80061ac <_printf_i+0x244>)
 8006064:	2100      	movs	r1, #0
 8006066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800606a:	6865      	ldr	r5, [r4, #4]
 800606c:	2d00      	cmp	r5, #0
 800606e:	bfa8      	it	ge
 8006070:	6821      	ldrge	r1, [r4, #0]
 8006072:	60a5      	str	r5, [r4, #8]
 8006074:	bfa4      	itt	ge
 8006076:	f021 0104 	bicge.w	r1, r1, #4
 800607a:	6021      	strge	r1, [r4, #0]
 800607c:	b90e      	cbnz	r6, 8006082 <_printf_i+0x11a>
 800607e:	2d00      	cmp	r5, #0
 8006080:	d04d      	beq.n	800611e <_printf_i+0x1b6>
 8006082:	4615      	mov	r5, r2
 8006084:	fbb6 f1f3 	udiv	r1, r6, r3
 8006088:	fb03 6711 	mls	r7, r3, r1, r6
 800608c:	5dc7      	ldrb	r7, [r0, r7]
 800608e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006092:	4637      	mov	r7, r6
 8006094:	42bb      	cmp	r3, r7
 8006096:	460e      	mov	r6, r1
 8006098:	d9f4      	bls.n	8006084 <_printf_i+0x11c>
 800609a:	2b08      	cmp	r3, #8
 800609c:	d10b      	bne.n	80060b6 <_printf_i+0x14e>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	07de      	lsls	r6, r3, #31
 80060a2:	d508      	bpl.n	80060b6 <_printf_i+0x14e>
 80060a4:	6923      	ldr	r3, [r4, #16]
 80060a6:	6861      	ldr	r1, [r4, #4]
 80060a8:	4299      	cmp	r1, r3
 80060aa:	bfde      	ittt	le
 80060ac:	2330      	movle	r3, #48	; 0x30
 80060ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060b6:	1b52      	subs	r2, r2, r5
 80060b8:	6122      	str	r2, [r4, #16]
 80060ba:	464b      	mov	r3, r9
 80060bc:	4621      	mov	r1, r4
 80060be:	4640      	mov	r0, r8
 80060c0:	f8cd a000 	str.w	sl, [sp]
 80060c4:	aa03      	add	r2, sp, #12
 80060c6:	f7ff fedf 	bl	8005e88 <_printf_common>
 80060ca:	3001      	adds	r0, #1
 80060cc:	d14c      	bne.n	8006168 <_printf_i+0x200>
 80060ce:	f04f 30ff 	mov.w	r0, #4294967295
 80060d2:	b004      	add	sp, #16
 80060d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d8:	4834      	ldr	r0, [pc, #208]	; (80061ac <_printf_i+0x244>)
 80060da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060de:	6829      	ldr	r1, [r5, #0]
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80060e6:	6029      	str	r1, [r5, #0]
 80060e8:	061d      	lsls	r5, r3, #24
 80060ea:	d514      	bpl.n	8006116 <_printf_i+0x1ae>
 80060ec:	07df      	lsls	r7, r3, #31
 80060ee:	bf44      	itt	mi
 80060f0:	f043 0320 	orrmi.w	r3, r3, #32
 80060f4:	6023      	strmi	r3, [r4, #0]
 80060f6:	b91e      	cbnz	r6, 8006100 <_printf_i+0x198>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	f023 0320 	bic.w	r3, r3, #32
 80060fe:	6023      	str	r3, [r4, #0]
 8006100:	2310      	movs	r3, #16
 8006102:	e7af      	b.n	8006064 <_printf_i+0xfc>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	f043 0320 	orr.w	r3, r3, #32
 800610a:	6023      	str	r3, [r4, #0]
 800610c:	2378      	movs	r3, #120	; 0x78
 800610e:	4828      	ldr	r0, [pc, #160]	; (80061b0 <_printf_i+0x248>)
 8006110:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006114:	e7e3      	b.n	80060de <_printf_i+0x176>
 8006116:	0659      	lsls	r1, r3, #25
 8006118:	bf48      	it	mi
 800611a:	b2b6      	uxthmi	r6, r6
 800611c:	e7e6      	b.n	80060ec <_printf_i+0x184>
 800611e:	4615      	mov	r5, r2
 8006120:	e7bb      	b.n	800609a <_printf_i+0x132>
 8006122:	682b      	ldr	r3, [r5, #0]
 8006124:	6826      	ldr	r6, [r4, #0]
 8006126:	1d18      	adds	r0, r3, #4
 8006128:	6961      	ldr	r1, [r4, #20]
 800612a:	6028      	str	r0, [r5, #0]
 800612c:	0635      	lsls	r5, r6, #24
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	d501      	bpl.n	8006136 <_printf_i+0x1ce>
 8006132:	6019      	str	r1, [r3, #0]
 8006134:	e002      	b.n	800613c <_printf_i+0x1d4>
 8006136:	0670      	lsls	r0, r6, #25
 8006138:	d5fb      	bpl.n	8006132 <_printf_i+0x1ca>
 800613a:	8019      	strh	r1, [r3, #0]
 800613c:	2300      	movs	r3, #0
 800613e:	4615      	mov	r5, r2
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	e7ba      	b.n	80060ba <_printf_i+0x152>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	2100      	movs	r1, #0
 8006148:	1d1a      	adds	r2, r3, #4
 800614a:	602a      	str	r2, [r5, #0]
 800614c:	681d      	ldr	r5, [r3, #0]
 800614e:	6862      	ldr	r2, [r4, #4]
 8006150:	4628      	mov	r0, r5
 8006152:	f000 feb7 	bl	8006ec4 <memchr>
 8006156:	b108      	cbz	r0, 800615c <_printf_i+0x1f4>
 8006158:	1b40      	subs	r0, r0, r5
 800615a:	6060      	str	r0, [r4, #4]
 800615c:	6863      	ldr	r3, [r4, #4]
 800615e:	6123      	str	r3, [r4, #16]
 8006160:	2300      	movs	r3, #0
 8006162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006166:	e7a8      	b.n	80060ba <_printf_i+0x152>
 8006168:	462a      	mov	r2, r5
 800616a:	4649      	mov	r1, r9
 800616c:	4640      	mov	r0, r8
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	47d0      	blx	sl
 8006172:	3001      	adds	r0, #1
 8006174:	d0ab      	beq.n	80060ce <_printf_i+0x166>
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	079b      	lsls	r3, r3, #30
 800617a:	d413      	bmi.n	80061a4 <_printf_i+0x23c>
 800617c:	68e0      	ldr	r0, [r4, #12]
 800617e:	9b03      	ldr	r3, [sp, #12]
 8006180:	4298      	cmp	r0, r3
 8006182:	bfb8      	it	lt
 8006184:	4618      	movlt	r0, r3
 8006186:	e7a4      	b.n	80060d2 <_printf_i+0x16a>
 8006188:	2301      	movs	r3, #1
 800618a:	4632      	mov	r2, r6
 800618c:	4649      	mov	r1, r9
 800618e:	4640      	mov	r0, r8
 8006190:	47d0      	blx	sl
 8006192:	3001      	adds	r0, #1
 8006194:	d09b      	beq.n	80060ce <_printf_i+0x166>
 8006196:	3501      	adds	r5, #1
 8006198:	68e3      	ldr	r3, [r4, #12]
 800619a:	9903      	ldr	r1, [sp, #12]
 800619c:	1a5b      	subs	r3, r3, r1
 800619e:	42ab      	cmp	r3, r5
 80061a0:	dcf2      	bgt.n	8006188 <_printf_i+0x220>
 80061a2:	e7eb      	b.n	800617c <_printf_i+0x214>
 80061a4:	2500      	movs	r5, #0
 80061a6:	f104 0619 	add.w	r6, r4, #25
 80061aa:	e7f5      	b.n	8006198 <_printf_i+0x230>
 80061ac:	08008386 	.word	0x08008386
 80061b0:	08008397 	.word	0x08008397

080061b4 <quorem>:
 80061b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b8:	6903      	ldr	r3, [r0, #16]
 80061ba:	690c      	ldr	r4, [r1, #16]
 80061bc:	4607      	mov	r7, r0
 80061be:	42a3      	cmp	r3, r4
 80061c0:	f2c0 8082 	blt.w	80062c8 <quorem+0x114>
 80061c4:	3c01      	subs	r4, #1
 80061c6:	f100 0514 	add.w	r5, r0, #20
 80061ca:	f101 0814 	add.w	r8, r1, #20
 80061ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061dc:	3301      	adds	r3, #1
 80061de:	429a      	cmp	r2, r3
 80061e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80061e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061ec:	d331      	bcc.n	8006252 <quorem+0x9e>
 80061ee:	f04f 0e00 	mov.w	lr, #0
 80061f2:	4640      	mov	r0, r8
 80061f4:	46ac      	mov	ip, r5
 80061f6:	46f2      	mov	sl, lr
 80061f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80061fc:	b293      	uxth	r3, r2
 80061fe:	fb06 e303 	mla	r3, r6, r3, lr
 8006202:	0c12      	lsrs	r2, r2, #16
 8006204:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006208:	b29b      	uxth	r3, r3
 800620a:	fb06 e202 	mla	r2, r6, r2, lr
 800620e:	ebaa 0303 	sub.w	r3, sl, r3
 8006212:	f8dc a000 	ldr.w	sl, [ip]
 8006216:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800621a:	fa1f fa8a 	uxth.w	sl, sl
 800621e:	4453      	add	r3, sl
 8006220:	f8dc a000 	ldr.w	sl, [ip]
 8006224:	b292      	uxth	r2, r2
 8006226:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800622a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800622e:	b29b      	uxth	r3, r3
 8006230:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006234:	4581      	cmp	r9, r0
 8006236:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800623a:	f84c 3b04 	str.w	r3, [ip], #4
 800623e:	d2db      	bcs.n	80061f8 <quorem+0x44>
 8006240:	f855 300b 	ldr.w	r3, [r5, fp]
 8006244:	b92b      	cbnz	r3, 8006252 <quorem+0x9e>
 8006246:	9b01      	ldr	r3, [sp, #4]
 8006248:	3b04      	subs	r3, #4
 800624a:	429d      	cmp	r5, r3
 800624c:	461a      	mov	r2, r3
 800624e:	d32f      	bcc.n	80062b0 <quorem+0xfc>
 8006250:	613c      	str	r4, [r7, #16]
 8006252:	4638      	mov	r0, r7
 8006254:	f001 f8c2 	bl	80073dc <__mcmp>
 8006258:	2800      	cmp	r0, #0
 800625a:	db25      	blt.n	80062a8 <quorem+0xf4>
 800625c:	4628      	mov	r0, r5
 800625e:	f04f 0c00 	mov.w	ip, #0
 8006262:	3601      	adds	r6, #1
 8006264:	f858 1b04 	ldr.w	r1, [r8], #4
 8006268:	f8d0 e000 	ldr.w	lr, [r0]
 800626c:	b28b      	uxth	r3, r1
 800626e:	ebac 0303 	sub.w	r3, ip, r3
 8006272:	fa1f f28e 	uxth.w	r2, lr
 8006276:	4413      	add	r3, r2
 8006278:	0c0a      	lsrs	r2, r1, #16
 800627a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800627e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006282:	b29b      	uxth	r3, r3
 8006284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006288:	45c1      	cmp	r9, r8
 800628a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800628e:	f840 3b04 	str.w	r3, [r0], #4
 8006292:	d2e7      	bcs.n	8006264 <quorem+0xb0>
 8006294:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006298:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800629c:	b922      	cbnz	r2, 80062a8 <quorem+0xf4>
 800629e:	3b04      	subs	r3, #4
 80062a0:	429d      	cmp	r5, r3
 80062a2:	461a      	mov	r2, r3
 80062a4:	d30a      	bcc.n	80062bc <quorem+0x108>
 80062a6:	613c      	str	r4, [r7, #16]
 80062a8:	4630      	mov	r0, r6
 80062aa:	b003      	add	sp, #12
 80062ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b0:	6812      	ldr	r2, [r2, #0]
 80062b2:	3b04      	subs	r3, #4
 80062b4:	2a00      	cmp	r2, #0
 80062b6:	d1cb      	bne.n	8006250 <quorem+0x9c>
 80062b8:	3c01      	subs	r4, #1
 80062ba:	e7c6      	b.n	800624a <quorem+0x96>
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	3b04      	subs	r3, #4
 80062c0:	2a00      	cmp	r2, #0
 80062c2:	d1f0      	bne.n	80062a6 <quorem+0xf2>
 80062c4:	3c01      	subs	r4, #1
 80062c6:	e7eb      	b.n	80062a0 <quorem+0xec>
 80062c8:	2000      	movs	r0, #0
 80062ca:	e7ee      	b.n	80062aa <quorem+0xf6>
 80062cc:	0000      	movs	r0, r0
	...

080062d0 <_dtoa_r>:
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	4616      	mov	r6, r2
 80062d6:	461f      	mov	r7, r3
 80062d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80062da:	b099      	sub	sp, #100	; 0x64
 80062dc:	4605      	mov	r5, r0
 80062de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80062e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80062e6:	b974      	cbnz	r4, 8006306 <_dtoa_r+0x36>
 80062e8:	2010      	movs	r0, #16
 80062ea:	f000 fde3 	bl	8006eb4 <malloc>
 80062ee:	4602      	mov	r2, r0
 80062f0:	6268      	str	r0, [r5, #36]	; 0x24
 80062f2:	b920      	cbnz	r0, 80062fe <_dtoa_r+0x2e>
 80062f4:	21ea      	movs	r1, #234	; 0xea
 80062f6:	4ba8      	ldr	r3, [pc, #672]	; (8006598 <_dtoa_r+0x2c8>)
 80062f8:	48a8      	ldr	r0, [pc, #672]	; (800659c <_dtoa_r+0x2cc>)
 80062fa:	f001 fa73 	bl	80077e4 <__assert_func>
 80062fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006302:	6004      	str	r4, [r0, #0]
 8006304:	60c4      	str	r4, [r0, #12]
 8006306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006308:	6819      	ldr	r1, [r3, #0]
 800630a:	b151      	cbz	r1, 8006322 <_dtoa_r+0x52>
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	2301      	movs	r3, #1
 8006310:	4093      	lsls	r3, r2
 8006312:	604a      	str	r2, [r1, #4]
 8006314:	608b      	str	r3, [r1, #8]
 8006316:	4628      	mov	r0, r5
 8006318:	f000 fe22 	bl	8006f60 <_Bfree>
 800631c:	2200      	movs	r2, #0
 800631e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	1e3b      	subs	r3, r7, #0
 8006324:	bfaf      	iteee	ge
 8006326:	2300      	movge	r3, #0
 8006328:	2201      	movlt	r2, #1
 800632a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800632e:	9305      	strlt	r3, [sp, #20]
 8006330:	bfa8      	it	ge
 8006332:	f8c8 3000 	strge.w	r3, [r8]
 8006336:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800633a:	4b99      	ldr	r3, [pc, #612]	; (80065a0 <_dtoa_r+0x2d0>)
 800633c:	bfb8      	it	lt
 800633e:	f8c8 2000 	strlt.w	r2, [r8]
 8006342:	ea33 0309 	bics.w	r3, r3, r9
 8006346:	d119      	bne.n	800637c <_dtoa_r+0xac>
 8006348:	f242 730f 	movw	r3, #9999	; 0x270f
 800634c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006354:	4333      	orrs	r3, r6
 8006356:	f000 857f 	beq.w	8006e58 <_dtoa_r+0xb88>
 800635a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800635c:	b953      	cbnz	r3, 8006374 <_dtoa_r+0xa4>
 800635e:	4b91      	ldr	r3, [pc, #580]	; (80065a4 <_dtoa_r+0x2d4>)
 8006360:	e022      	b.n	80063a8 <_dtoa_r+0xd8>
 8006362:	4b91      	ldr	r3, [pc, #580]	; (80065a8 <_dtoa_r+0x2d8>)
 8006364:	9303      	str	r3, [sp, #12]
 8006366:	3308      	adds	r3, #8
 8006368:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	9803      	ldr	r0, [sp, #12]
 800636e:	b019      	add	sp, #100	; 0x64
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006374:	4b8b      	ldr	r3, [pc, #556]	; (80065a4 <_dtoa_r+0x2d4>)
 8006376:	9303      	str	r3, [sp, #12]
 8006378:	3303      	adds	r3, #3
 800637a:	e7f5      	b.n	8006368 <_dtoa_r+0x98>
 800637c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006380:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006384:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006388:	2200      	movs	r2, #0
 800638a:	2300      	movs	r3, #0
 800638c:	f7fa fb78 	bl	8000a80 <__aeabi_dcmpeq>
 8006390:	4680      	mov	r8, r0
 8006392:	b158      	cbz	r0, 80063ac <_dtoa_r+0xdc>
 8006394:	2301      	movs	r3, #1
 8006396:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 8558 	beq.w	8006e52 <_dtoa_r+0xb82>
 80063a2:	4882      	ldr	r0, [pc, #520]	; (80065ac <_dtoa_r+0x2dc>)
 80063a4:	6018      	str	r0, [r3, #0]
 80063a6:	1e43      	subs	r3, r0, #1
 80063a8:	9303      	str	r3, [sp, #12]
 80063aa:	e7df      	b.n	800636c <_dtoa_r+0x9c>
 80063ac:	ab16      	add	r3, sp, #88	; 0x58
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	ab17      	add	r3, sp, #92	; 0x5c
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	4628      	mov	r0, r5
 80063b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063ba:	f001 f8b7 	bl	800752c <__d2b>
 80063be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80063c2:	4683      	mov	fp, r0
 80063c4:	2c00      	cmp	r4, #0
 80063c6:	d07f      	beq.n	80064c8 <_dtoa_r+0x1f8>
 80063c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80063d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80063da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80063de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80063e2:	2200      	movs	r2, #0
 80063e4:	4b72      	ldr	r3, [pc, #456]	; (80065b0 <_dtoa_r+0x2e0>)
 80063e6:	f7f9 ff2b 	bl	8000240 <__aeabi_dsub>
 80063ea:	a365      	add	r3, pc, #404	; (adr r3, 8006580 <_dtoa_r+0x2b0>)
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	f7fa f8de 	bl	80005b0 <__aeabi_dmul>
 80063f4:	a364      	add	r3, pc, #400	; (adr r3, 8006588 <_dtoa_r+0x2b8>)
 80063f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fa:	f7f9 ff23 	bl	8000244 <__adddf3>
 80063fe:	4606      	mov	r6, r0
 8006400:	4620      	mov	r0, r4
 8006402:	460f      	mov	r7, r1
 8006404:	f7fa f86a 	bl	80004dc <__aeabi_i2d>
 8006408:	a361      	add	r3, pc, #388	; (adr r3, 8006590 <_dtoa_r+0x2c0>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7fa f8cf 	bl	80005b0 <__aeabi_dmul>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4630      	mov	r0, r6
 8006418:	4639      	mov	r1, r7
 800641a:	f7f9 ff13 	bl	8000244 <__adddf3>
 800641e:	4606      	mov	r6, r0
 8006420:	460f      	mov	r7, r1
 8006422:	f7fa fb75 	bl	8000b10 <__aeabi_d2iz>
 8006426:	2200      	movs	r2, #0
 8006428:	4682      	mov	sl, r0
 800642a:	2300      	movs	r3, #0
 800642c:	4630      	mov	r0, r6
 800642e:	4639      	mov	r1, r7
 8006430:	f7fa fb30 	bl	8000a94 <__aeabi_dcmplt>
 8006434:	b148      	cbz	r0, 800644a <_dtoa_r+0x17a>
 8006436:	4650      	mov	r0, sl
 8006438:	f7fa f850 	bl	80004dc <__aeabi_i2d>
 800643c:	4632      	mov	r2, r6
 800643e:	463b      	mov	r3, r7
 8006440:	f7fa fb1e 	bl	8000a80 <__aeabi_dcmpeq>
 8006444:	b908      	cbnz	r0, 800644a <_dtoa_r+0x17a>
 8006446:	f10a 3aff 	add.w	sl, sl, #4294967295
 800644a:	f1ba 0f16 	cmp.w	sl, #22
 800644e:	d858      	bhi.n	8006502 <_dtoa_r+0x232>
 8006450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006454:	4b57      	ldr	r3, [pc, #348]	; (80065b4 <_dtoa_r+0x2e4>)
 8006456:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f7fa fb19 	bl	8000a94 <__aeabi_dcmplt>
 8006462:	2800      	cmp	r0, #0
 8006464:	d04f      	beq.n	8006506 <_dtoa_r+0x236>
 8006466:	2300      	movs	r3, #0
 8006468:	f10a 3aff 	add.w	sl, sl, #4294967295
 800646c:	930f      	str	r3, [sp, #60]	; 0x3c
 800646e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006470:	1b1c      	subs	r4, r3, r4
 8006472:	1e63      	subs	r3, r4, #1
 8006474:	9309      	str	r3, [sp, #36]	; 0x24
 8006476:	bf49      	itett	mi
 8006478:	f1c4 0301 	rsbmi	r3, r4, #1
 800647c:	2300      	movpl	r3, #0
 800647e:	9306      	strmi	r3, [sp, #24]
 8006480:	2300      	movmi	r3, #0
 8006482:	bf54      	ite	pl
 8006484:	9306      	strpl	r3, [sp, #24]
 8006486:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006488:	f1ba 0f00 	cmp.w	sl, #0
 800648c:	db3d      	blt.n	800650a <_dtoa_r+0x23a>
 800648e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006490:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006494:	4453      	add	r3, sl
 8006496:	9309      	str	r3, [sp, #36]	; 0x24
 8006498:	2300      	movs	r3, #0
 800649a:	930a      	str	r3, [sp, #40]	; 0x28
 800649c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800649e:	2b09      	cmp	r3, #9
 80064a0:	f200 808c 	bhi.w	80065bc <_dtoa_r+0x2ec>
 80064a4:	2b05      	cmp	r3, #5
 80064a6:	bfc4      	itt	gt
 80064a8:	3b04      	subgt	r3, #4
 80064aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80064ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064ae:	bfc8      	it	gt
 80064b0:	2400      	movgt	r4, #0
 80064b2:	f1a3 0302 	sub.w	r3, r3, #2
 80064b6:	bfd8      	it	le
 80064b8:	2401      	movle	r4, #1
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	f200 808a 	bhi.w	80065d4 <_dtoa_r+0x304>
 80064c0:	e8df f003 	tbb	[pc, r3]
 80064c4:	5b4d4f2d 	.word	0x5b4d4f2d
 80064c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80064cc:	441c      	add	r4, r3
 80064ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	bfc3      	ittte	gt
 80064d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80064de:	fa09 f303 	lslgt.w	r3, r9, r3
 80064e2:	f1c3 0320 	rsble	r3, r3, #32
 80064e6:	bfc6      	itte	gt
 80064e8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80064ec:	4318      	orrgt	r0, r3
 80064ee:	fa06 f003 	lslle.w	r0, r6, r3
 80064f2:	f7f9 ffe3 	bl	80004bc <__aeabi_ui2d>
 80064f6:	2301      	movs	r3, #1
 80064f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80064fc:	3c01      	subs	r4, #1
 80064fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8006500:	e76f      	b.n	80063e2 <_dtoa_r+0x112>
 8006502:	2301      	movs	r3, #1
 8006504:	e7b2      	b.n	800646c <_dtoa_r+0x19c>
 8006506:	900f      	str	r0, [sp, #60]	; 0x3c
 8006508:	e7b1      	b.n	800646e <_dtoa_r+0x19e>
 800650a:	9b06      	ldr	r3, [sp, #24]
 800650c:	eba3 030a 	sub.w	r3, r3, sl
 8006510:	9306      	str	r3, [sp, #24]
 8006512:	f1ca 0300 	rsb	r3, sl, #0
 8006516:	930a      	str	r3, [sp, #40]	; 0x28
 8006518:	2300      	movs	r3, #0
 800651a:	930e      	str	r3, [sp, #56]	; 0x38
 800651c:	e7be      	b.n	800649c <_dtoa_r+0x1cc>
 800651e:	2300      	movs	r3, #0
 8006520:	930b      	str	r3, [sp, #44]	; 0x2c
 8006522:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006524:	2b00      	cmp	r3, #0
 8006526:	dc58      	bgt.n	80065da <_dtoa_r+0x30a>
 8006528:	f04f 0901 	mov.w	r9, #1
 800652c:	464b      	mov	r3, r9
 800652e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006532:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006536:	2200      	movs	r2, #0
 8006538:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800653a:	6042      	str	r2, [r0, #4]
 800653c:	2204      	movs	r2, #4
 800653e:	f102 0614 	add.w	r6, r2, #20
 8006542:	429e      	cmp	r6, r3
 8006544:	6841      	ldr	r1, [r0, #4]
 8006546:	d94e      	bls.n	80065e6 <_dtoa_r+0x316>
 8006548:	4628      	mov	r0, r5
 800654a:	f000 fcc9 	bl	8006ee0 <_Balloc>
 800654e:	9003      	str	r0, [sp, #12]
 8006550:	2800      	cmp	r0, #0
 8006552:	d14c      	bne.n	80065ee <_dtoa_r+0x31e>
 8006554:	4602      	mov	r2, r0
 8006556:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800655a:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <_dtoa_r+0x2e8>)
 800655c:	e6cc      	b.n	80062f8 <_dtoa_r+0x28>
 800655e:	2301      	movs	r3, #1
 8006560:	e7de      	b.n	8006520 <_dtoa_r+0x250>
 8006562:	2300      	movs	r3, #0
 8006564:	930b      	str	r3, [sp, #44]	; 0x2c
 8006566:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006568:	eb0a 0903 	add.w	r9, sl, r3
 800656c:	f109 0301 	add.w	r3, r9, #1
 8006570:	2b01      	cmp	r3, #1
 8006572:	9308      	str	r3, [sp, #32]
 8006574:	bfb8      	it	lt
 8006576:	2301      	movlt	r3, #1
 8006578:	e7dd      	b.n	8006536 <_dtoa_r+0x266>
 800657a:	2301      	movs	r3, #1
 800657c:	e7f2      	b.n	8006564 <_dtoa_r+0x294>
 800657e:	bf00      	nop
 8006580:	636f4361 	.word	0x636f4361
 8006584:	3fd287a7 	.word	0x3fd287a7
 8006588:	8b60c8b3 	.word	0x8b60c8b3
 800658c:	3fc68a28 	.word	0x3fc68a28
 8006590:	509f79fb 	.word	0x509f79fb
 8006594:	3fd34413 	.word	0x3fd34413
 8006598:	080083b5 	.word	0x080083b5
 800659c:	080083cc 	.word	0x080083cc
 80065a0:	7ff00000 	.word	0x7ff00000
 80065a4:	080083b1 	.word	0x080083b1
 80065a8:	080083a8 	.word	0x080083a8
 80065ac:	08008385 	.word	0x08008385
 80065b0:	3ff80000 	.word	0x3ff80000
 80065b4:	080084c0 	.word	0x080084c0
 80065b8:	08008427 	.word	0x08008427
 80065bc:	2401      	movs	r4, #1
 80065be:	2300      	movs	r3, #0
 80065c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80065c2:	9322      	str	r3, [sp, #136]	; 0x88
 80065c4:	f04f 39ff 	mov.w	r9, #4294967295
 80065c8:	2200      	movs	r2, #0
 80065ca:	2312      	movs	r3, #18
 80065cc:	f8cd 9020 	str.w	r9, [sp, #32]
 80065d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80065d2:	e7b0      	b.n	8006536 <_dtoa_r+0x266>
 80065d4:	2301      	movs	r3, #1
 80065d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80065d8:	e7f4      	b.n	80065c4 <_dtoa_r+0x2f4>
 80065da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80065de:	464b      	mov	r3, r9
 80065e0:	f8cd 9020 	str.w	r9, [sp, #32]
 80065e4:	e7a7      	b.n	8006536 <_dtoa_r+0x266>
 80065e6:	3101      	adds	r1, #1
 80065e8:	6041      	str	r1, [r0, #4]
 80065ea:	0052      	lsls	r2, r2, #1
 80065ec:	e7a7      	b.n	800653e <_dtoa_r+0x26e>
 80065ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065f0:	9a03      	ldr	r2, [sp, #12]
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	9b08      	ldr	r3, [sp, #32]
 80065f6:	2b0e      	cmp	r3, #14
 80065f8:	f200 80a8 	bhi.w	800674c <_dtoa_r+0x47c>
 80065fc:	2c00      	cmp	r4, #0
 80065fe:	f000 80a5 	beq.w	800674c <_dtoa_r+0x47c>
 8006602:	f1ba 0f00 	cmp.w	sl, #0
 8006606:	dd34      	ble.n	8006672 <_dtoa_r+0x3a2>
 8006608:	4a9a      	ldr	r2, [pc, #616]	; (8006874 <_dtoa_r+0x5a4>)
 800660a:	f00a 030f 	and.w	r3, sl, #15
 800660e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006612:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006616:	e9d3 3400 	ldrd	r3, r4, [r3]
 800661a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800661e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006622:	d016      	beq.n	8006652 <_dtoa_r+0x382>
 8006624:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006628:	4b93      	ldr	r3, [pc, #588]	; (8006878 <_dtoa_r+0x5a8>)
 800662a:	2703      	movs	r7, #3
 800662c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006630:	f7fa f8e8 	bl	8000804 <__aeabi_ddiv>
 8006634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006638:	f004 040f 	and.w	r4, r4, #15
 800663c:	4e8e      	ldr	r6, [pc, #568]	; (8006878 <_dtoa_r+0x5a8>)
 800663e:	b954      	cbnz	r4, 8006656 <_dtoa_r+0x386>
 8006640:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006644:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006648:	f7fa f8dc 	bl	8000804 <__aeabi_ddiv>
 800664c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006650:	e029      	b.n	80066a6 <_dtoa_r+0x3d6>
 8006652:	2702      	movs	r7, #2
 8006654:	e7f2      	b.n	800663c <_dtoa_r+0x36c>
 8006656:	07e1      	lsls	r1, r4, #31
 8006658:	d508      	bpl.n	800666c <_dtoa_r+0x39c>
 800665a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800665e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006662:	f7f9 ffa5 	bl	80005b0 <__aeabi_dmul>
 8006666:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800666a:	3701      	adds	r7, #1
 800666c:	1064      	asrs	r4, r4, #1
 800666e:	3608      	adds	r6, #8
 8006670:	e7e5      	b.n	800663e <_dtoa_r+0x36e>
 8006672:	f000 80a5 	beq.w	80067c0 <_dtoa_r+0x4f0>
 8006676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800667a:	f1ca 0400 	rsb	r4, sl, #0
 800667e:	4b7d      	ldr	r3, [pc, #500]	; (8006874 <_dtoa_r+0x5a4>)
 8006680:	f004 020f 	and.w	r2, r4, #15
 8006684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	f7f9 ff90 	bl	80005b0 <__aeabi_dmul>
 8006690:	2702      	movs	r7, #2
 8006692:	2300      	movs	r3, #0
 8006694:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006698:	4e77      	ldr	r6, [pc, #476]	; (8006878 <_dtoa_r+0x5a8>)
 800669a:	1124      	asrs	r4, r4, #4
 800669c:	2c00      	cmp	r4, #0
 800669e:	f040 8084 	bne.w	80067aa <_dtoa_r+0x4da>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1d2      	bne.n	800664c <_dtoa_r+0x37c>
 80066a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 808b 	beq.w	80067c4 <_dtoa_r+0x4f4>
 80066ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80066b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066ba:	2200      	movs	r2, #0
 80066bc:	4b6f      	ldr	r3, [pc, #444]	; (800687c <_dtoa_r+0x5ac>)
 80066be:	f7fa f9e9 	bl	8000a94 <__aeabi_dcmplt>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d07e      	beq.n	80067c4 <_dtoa_r+0x4f4>
 80066c6:	9b08      	ldr	r3, [sp, #32]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d07b      	beq.n	80067c4 <_dtoa_r+0x4f4>
 80066cc:	f1b9 0f00 	cmp.w	r9, #0
 80066d0:	dd38      	ble.n	8006744 <_dtoa_r+0x474>
 80066d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066d6:	2200      	movs	r2, #0
 80066d8:	4b69      	ldr	r3, [pc, #420]	; (8006880 <_dtoa_r+0x5b0>)
 80066da:	f7f9 ff69 	bl	80005b0 <__aeabi_dmul>
 80066de:	464c      	mov	r4, r9
 80066e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066e4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80066e8:	3701      	adds	r7, #1
 80066ea:	4638      	mov	r0, r7
 80066ec:	f7f9 fef6 	bl	80004dc <__aeabi_i2d>
 80066f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066f4:	f7f9 ff5c 	bl	80005b0 <__aeabi_dmul>
 80066f8:	2200      	movs	r2, #0
 80066fa:	4b62      	ldr	r3, [pc, #392]	; (8006884 <_dtoa_r+0x5b4>)
 80066fc:	f7f9 fda2 	bl	8000244 <__adddf3>
 8006700:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006704:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006708:	9611      	str	r6, [sp, #68]	; 0x44
 800670a:	2c00      	cmp	r4, #0
 800670c:	d15d      	bne.n	80067ca <_dtoa_r+0x4fa>
 800670e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006712:	2200      	movs	r2, #0
 8006714:	4b5c      	ldr	r3, [pc, #368]	; (8006888 <_dtoa_r+0x5b8>)
 8006716:	f7f9 fd93 	bl	8000240 <__aeabi_dsub>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006722:	4633      	mov	r3, r6
 8006724:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006726:	f7fa f9d3 	bl	8000ad0 <__aeabi_dcmpgt>
 800672a:	2800      	cmp	r0, #0
 800672c:	f040 829c 	bne.w	8006c68 <_dtoa_r+0x998>
 8006730:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006734:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006736:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800673a:	f7fa f9ab 	bl	8000a94 <__aeabi_dcmplt>
 800673e:	2800      	cmp	r0, #0
 8006740:	f040 8290 	bne.w	8006c64 <_dtoa_r+0x994>
 8006744:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006748:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800674c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800674e:	2b00      	cmp	r3, #0
 8006750:	f2c0 8152 	blt.w	80069f8 <_dtoa_r+0x728>
 8006754:	f1ba 0f0e 	cmp.w	sl, #14
 8006758:	f300 814e 	bgt.w	80069f8 <_dtoa_r+0x728>
 800675c:	4b45      	ldr	r3, [pc, #276]	; (8006874 <_dtoa_r+0x5a4>)
 800675e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006762:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006766:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800676a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800676c:	2b00      	cmp	r3, #0
 800676e:	f280 80db 	bge.w	8006928 <_dtoa_r+0x658>
 8006772:	9b08      	ldr	r3, [sp, #32]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f300 80d7 	bgt.w	8006928 <_dtoa_r+0x658>
 800677a:	f040 8272 	bne.w	8006c62 <_dtoa_r+0x992>
 800677e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006782:	2200      	movs	r2, #0
 8006784:	4b40      	ldr	r3, [pc, #256]	; (8006888 <_dtoa_r+0x5b8>)
 8006786:	f7f9 ff13 	bl	80005b0 <__aeabi_dmul>
 800678a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800678e:	f7fa f995 	bl	8000abc <__aeabi_dcmpge>
 8006792:	9c08      	ldr	r4, [sp, #32]
 8006794:	4626      	mov	r6, r4
 8006796:	2800      	cmp	r0, #0
 8006798:	f040 8248 	bne.w	8006c2c <_dtoa_r+0x95c>
 800679c:	2331      	movs	r3, #49	; 0x31
 800679e:	9f03      	ldr	r7, [sp, #12]
 80067a0:	f10a 0a01 	add.w	sl, sl, #1
 80067a4:	f807 3b01 	strb.w	r3, [r7], #1
 80067a8:	e244      	b.n	8006c34 <_dtoa_r+0x964>
 80067aa:	07e2      	lsls	r2, r4, #31
 80067ac:	d505      	bpl.n	80067ba <_dtoa_r+0x4ea>
 80067ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067b2:	f7f9 fefd 	bl	80005b0 <__aeabi_dmul>
 80067b6:	2301      	movs	r3, #1
 80067b8:	3701      	adds	r7, #1
 80067ba:	1064      	asrs	r4, r4, #1
 80067bc:	3608      	adds	r6, #8
 80067be:	e76d      	b.n	800669c <_dtoa_r+0x3cc>
 80067c0:	2702      	movs	r7, #2
 80067c2:	e770      	b.n	80066a6 <_dtoa_r+0x3d6>
 80067c4:	46d0      	mov	r8, sl
 80067c6:	9c08      	ldr	r4, [sp, #32]
 80067c8:	e78f      	b.n	80066ea <_dtoa_r+0x41a>
 80067ca:	9903      	ldr	r1, [sp, #12]
 80067cc:	4b29      	ldr	r3, [pc, #164]	; (8006874 <_dtoa_r+0x5a4>)
 80067ce:	4421      	add	r1, r4
 80067d0:	9112      	str	r1, [sp, #72]	; 0x48
 80067d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80067dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067e0:	2900      	cmp	r1, #0
 80067e2:	d055      	beq.n	8006890 <_dtoa_r+0x5c0>
 80067e4:	2000      	movs	r0, #0
 80067e6:	4929      	ldr	r1, [pc, #164]	; (800688c <_dtoa_r+0x5bc>)
 80067e8:	f7fa f80c 	bl	8000804 <__aeabi_ddiv>
 80067ec:	463b      	mov	r3, r7
 80067ee:	4632      	mov	r2, r6
 80067f0:	f7f9 fd26 	bl	8000240 <__aeabi_dsub>
 80067f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067f8:	9f03      	ldr	r7, [sp, #12]
 80067fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067fe:	f7fa f987 	bl	8000b10 <__aeabi_d2iz>
 8006802:	4604      	mov	r4, r0
 8006804:	f7f9 fe6a 	bl	80004dc <__aeabi_i2d>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006810:	f7f9 fd16 	bl	8000240 <__aeabi_dsub>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	3430      	adds	r4, #48	; 0x30
 800681a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800681e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006822:	f807 4b01 	strb.w	r4, [r7], #1
 8006826:	f7fa f935 	bl	8000a94 <__aeabi_dcmplt>
 800682a:	2800      	cmp	r0, #0
 800682c:	d174      	bne.n	8006918 <_dtoa_r+0x648>
 800682e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006832:	2000      	movs	r0, #0
 8006834:	4911      	ldr	r1, [pc, #68]	; (800687c <_dtoa_r+0x5ac>)
 8006836:	f7f9 fd03 	bl	8000240 <__aeabi_dsub>
 800683a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800683e:	f7fa f929 	bl	8000a94 <__aeabi_dcmplt>
 8006842:	2800      	cmp	r0, #0
 8006844:	f040 80b7 	bne.w	80069b6 <_dtoa_r+0x6e6>
 8006848:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800684a:	429f      	cmp	r7, r3
 800684c:	f43f af7a 	beq.w	8006744 <_dtoa_r+0x474>
 8006850:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006854:	2200      	movs	r2, #0
 8006856:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <_dtoa_r+0x5b0>)
 8006858:	f7f9 feaa 	bl	80005b0 <__aeabi_dmul>
 800685c:	2200      	movs	r2, #0
 800685e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <_dtoa_r+0x5b0>)
 8006868:	f7f9 fea2 	bl	80005b0 <__aeabi_dmul>
 800686c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006870:	e7c3      	b.n	80067fa <_dtoa_r+0x52a>
 8006872:	bf00      	nop
 8006874:	080084c0 	.word	0x080084c0
 8006878:	08008498 	.word	0x08008498
 800687c:	3ff00000 	.word	0x3ff00000
 8006880:	40240000 	.word	0x40240000
 8006884:	401c0000 	.word	0x401c0000
 8006888:	40140000 	.word	0x40140000
 800688c:	3fe00000 	.word	0x3fe00000
 8006890:	4630      	mov	r0, r6
 8006892:	4639      	mov	r1, r7
 8006894:	f7f9 fe8c 	bl	80005b0 <__aeabi_dmul>
 8006898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800689a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800689e:	9c03      	ldr	r4, [sp, #12]
 80068a0:	9314      	str	r3, [sp, #80]	; 0x50
 80068a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068a6:	f7fa f933 	bl	8000b10 <__aeabi_d2iz>
 80068aa:	9015      	str	r0, [sp, #84]	; 0x54
 80068ac:	f7f9 fe16 	bl	80004dc <__aeabi_i2d>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b8:	f7f9 fcc2 	bl	8000240 <__aeabi_dsub>
 80068bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068be:	4606      	mov	r6, r0
 80068c0:	3330      	adds	r3, #48	; 0x30
 80068c2:	f804 3b01 	strb.w	r3, [r4], #1
 80068c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068c8:	460f      	mov	r7, r1
 80068ca:	429c      	cmp	r4, r3
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	d124      	bne.n	800691c <_dtoa_r+0x64c>
 80068d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068d6:	4bb0      	ldr	r3, [pc, #704]	; (8006b98 <_dtoa_r+0x8c8>)
 80068d8:	f7f9 fcb4 	bl	8000244 <__adddf3>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4630      	mov	r0, r6
 80068e2:	4639      	mov	r1, r7
 80068e4:	f7fa f8f4 	bl	8000ad0 <__aeabi_dcmpgt>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d163      	bne.n	80069b4 <_dtoa_r+0x6e4>
 80068ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068f0:	2000      	movs	r0, #0
 80068f2:	49a9      	ldr	r1, [pc, #676]	; (8006b98 <_dtoa_r+0x8c8>)
 80068f4:	f7f9 fca4 	bl	8000240 <__aeabi_dsub>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f7fa f8c8 	bl	8000a94 <__aeabi_dcmplt>
 8006904:	2800      	cmp	r0, #0
 8006906:	f43f af1d 	beq.w	8006744 <_dtoa_r+0x474>
 800690a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800690c:	1e7b      	subs	r3, r7, #1
 800690e:	9314      	str	r3, [sp, #80]	; 0x50
 8006910:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006914:	2b30      	cmp	r3, #48	; 0x30
 8006916:	d0f8      	beq.n	800690a <_dtoa_r+0x63a>
 8006918:	46c2      	mov	sl, r8
 800691a:	e03b      	b.n	8006994 <_dtoa_r+0x6c4>
 800691c:	4b9f      	ldr	r3, [pc, #636]	; (8006b9c <_dtoa_r+0x8cc>)
 800691e:	f7f9 fe47 	bl	80005b0 <__aeabi_dmul>
 8006922:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006926:	e7bc      	b.n	80068a2 <_dtoa_r+0x5d2>
 8006928:	9f03      	ldr	r7, [sp, #12]
 800692a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800692e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006932:	4640      	mov	r0, r8
 8006934:	4649      	mov	r1, r9
 8006936:	f7f9 ff65 	bl	8000804 <__aeabi_ddiv>
 800693a:	f7fa f8e9 	bl	8000b10 <__aeabi_d2iz>
 800693e:	4604      	mov	r4, r0
 8006940:	f7f9 fdcc 	bl	80004dc <__aeabi_i2d>
 8006944:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006948:	f7f9 fe32 	bl	80005b0 <__aeabi_dmul>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4640      	mov	r0, r8
 8006952:	4649      	mov	r1, r9
 8006954:	f7f9 fc74 	bl	8000240 <__aeabi_dsub>
 8006958:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800695c:	f807 6b01 	strb.w	r6, [r7], #1
 8006960:	9e03      	ldr	r6, [sp, #12]
 8006962:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006966:	1bbe      	subs	r6, r7, r6
 8006968:	45b4      	cmp	ip, r6
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	d136      	bne.n	80069de <_dtoa_r+0x70e>
 8006970:	f7f9 fc68 	bl	8000244 <__adddf3>
 8006974:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006978:	4680      	mov	r8, r0
 800697a:	4689      	mov	r9, r1
 800697c:	f7fa f8a8 	bl	8000ad0 <__aeabi_dcmpgt>
 8006980:	bb58      	cbnz	r0, 80069da <_dtoa_r+0x70a>
 8006982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006986:	4640      	mov	r0, r8
 8006988:	4649      	mov	r1, r9
 800698a:	f7fa f879 	bl	8000a80 <__aeabi_dcmpeq>
 800698e:	b108      	cbz	r0, 8006994 <_dtoa_r+0x6c4>
 8006990:	07e1      	lsls	r1, r4, #31
 8006992:	d422      	bmi.n	80069da <_dtoa_r+0x70a>
 8006994:	4628      	mov	r0, r5
 8006996:	4659      	mov	r1, fp
 8006998:	f000 fae2 	bl	8006f60 <_Bfree>
 800699c:	2300      	movs	r3, #0
 800699e:	703b      	strb	r3, [r7, #0]
 80069a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80069a2:	f10a 0001 	add.w	r0, sl, #1
 80069a6:	6018      	str	r0, [r3, #0]
 80069a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f43f acde 	beq.w	800636c <_dtoa_r+0x9c>
 80069b0:	601f      	str	r7, [r3, #0]
 80069b2:	e4db      	b.n	800636c <_dtoa_r+0x9c>
 80069b4:	4627      	mov	r7, r4
 80069b6:	463b      	mov	r3, r7
 80069b8:	461f      	mov	r7, r3
 80069ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069be:	2a39      	cmp	r2, #57	; 0x39
 80069c0:	d107      	bne.n	80069d2 <_dtoa_r+0x702>
 80069c2:	9a03      	ldr	r2, [sp, #12]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d1f7      	bne.n	80069b8 <_dtoa_r+0x6e8>
 80069c8:	2230      	movs	r2, #48	; 0x30
 80069ca:	9903      	ldr	r1, [sp, #12]
 80069cc:	f108 0801 	add.w	r8, r8, #1
 80069d0:	700a      	strb	r2, [r1, #0]
 80069d2:	781a      	ldrb	r2, [r3, #0]
 80069d4:	3201      	adds	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]
 80069d8:	e79e      	b.n	8006918 <_dtoa_r+0x648>
 80069da:	46d0      	mov	r8, sl
 80069dc:	e7eb      	b.n	80069b6 <_dtoa_r+0x6e6>
 80069de:	2200      	movs	r2, #0
 80069e0:	4b6e      	ldr	r3, [pc, #440]	; (8006b9c <_dtoa_r+0x8cc>)
 80069e2:	f7f9 fde5 	bl	80005b0 <__aeabi_dmul>
 80069e6:	2200      	movs	r2, #0
 80069e8:	2300      	movs	r3, #0
 80069ea:	4680      	mov	r8, r0
 80069ec:	4689      	mov	r9, r1
 80069ee:	f7fa f847 	bl	8000a80 <__aeabi_dcmpeq>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d09b      	beq.n	800692e <_dtoa_r+0x65e>
 80069f6:	e7cd      	b.n	8006994 <_dtoa_r+0x6c4>
 80069f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069fa:	2a00      	cmp	r2, #0
 80069fc:	f000 80d0 	beq.w	8006ba0 <_dtoa_r+0x8d0>
 8006a00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a02:	2a01      	cmp	r2, #1
 8006a04:	f300 80ae 	bgt.w	8006b64 <_dtoa_r+0x894>
 8006a08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a0a:	2a00      	cmp	r2, #0
 8006a0c:	f000 80a6 	beq.w	8006b5c <_dtoa_r+0x88c>
 8006a10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a16:	9f06      	ldr	r7, [sp, #24]
 8006a18:	9a06      	ldr	r2, [sp, #24]
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	441a      	add	r2, r3
 8006a1e:	9206      	str	r2, [sp, #24]
 8006a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a22:	4628      	mov	r0, r5
 8006a24:	441a      	add	r2, r3
 8006a26:	9209      	str	r2, [sp, #36]	; 0x24
 8006a28:	f000 fb50 	bl	80070cc <__i2b>
 8006a2c:	4606      	mov	r6, r0
 8006a2e:	2f00      	cmp	r7, #0
 8006a30:	dd0c      	ble.n	8006a4c <_dtoa_r+0x77c>
 8006a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dd09      	ble.n	8006a4c <_dtoa_r+0x77c>
 8006a38:	42bb      	cmp	r3, r7
 8006a3a:	bfa8      	it	ge
 8006a3c:	463b      	movge	r3, r7
 8006a3e:	9a06      	ldr	r2, [sp, #24]
 8006a40:	1aff      	subs	r7, r7, r3
 8006a42:	1ad2      	subs	r2, r2, r3
 8006a44:	9206      	str	r2, [sp, #24]
 8006a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4e:	b1f3      	cbz	r3, 8006a8e <_dtoa_r+0x7be>
 8006a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80a8 	beq.w	8006ba8 <_dtoa_r+0x8d8>
 8006a58:	2c00      	cmp	r4, #0
 8006a5a:	dd10      	ble.n	8006a7e <_dtoa_r+0x7ae>
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4622      	mov	r2, r4
 8006a60:	4628      	mov	r0, r5
 8006a62:	f000 fbf1 	bl	8007248 <__pow5mult>
 8006a66:	465a      	mov	r2, fp
 8006a68:	4601      	mov	r1, r0
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f000 fb43 	bl	80070f8 <__multiply>
 8006a72:	4680      	mov	r8, r0
 8006a74:	4659      	mov	r1, fp
 8006a76:	4628      	mov	r0, r5
 8006a78:	f000 fa72 	bl	8006f60 <_Bfree>
 8006a7c:	46c3      	mov	fp, r8
 8006a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a80:	1b1a      	subs	r2, r3, r4
 8006a82:	d004      	beq.n	8006a8e <_dtoa_r+0x7be>
 8006a84:	4659      	mov	r1, fp
 8006a86:	4628      	mov	r0, r5
 8006a88:	f000 fbde 	bl	8007248 <__pow5mult>
 8006a8c:	4683      	mov	fp, r0
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4628      	mov	r0, r5
 8006a92:	f000 fb1b 	bl	80070cc <__i2b>
 8006a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a98:	4604      	mov	r4, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f340 8086 	ble.w	8006bac <_dtoa_r+0x8dc>
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 fbcf 	bl	8007248 <__pow5mult>
 8006aaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aac:	4604      	mov	r4, r0
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	dd7f      	ble.n	8006bb2 <_dtoa_r+0x8e2>
 8006ab2:	f04f 0800 	mov.w	r8, #0
 8006ab6:	6923      	ldr	r3, [r4, #16]
 8006ab8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006abc:	6918      	ldr	r0, [r3, #16]
 8006abe:	f000 fab7 	bl	8007030 <__hi0bits>
 8006ac2:	f1c0 0020 	rsb	r0, r0, #32
 8006ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac8:	4418      	add	r0, r3
 8006aca:	f010 001f 	ands.w	r0, r0, #31
 8006ace:	f000 8092 	beq.w	8006bf6 <_dtoa_r+0x926>
 8006ad2:	f1c0 0320 	rsb	r3, r0, #32
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	f340 808a 	ble.w	8006bf0 <_dtoa_r+0x920>
 8006adc:	f1c0 001c 	rsb	r0, r0, #28
 8006ae0:	9b06      	ldr	r3, [sp, #24]
 8006ae2:	4407      	add	r7, r0
 8006ae4:	4403      	add	r3, r0
 8006ae6:	9306      	str	r3, [sp, #24]
 8006ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aea:	4403      	add	r3, r0
 8006aec:	9309      	str	r3, [sp, #36]	; 0x24
 8006aee:	9b06      	ldr	r3, [sp, #24]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	dd05      	ble.n	8006b00 <_dtoa_r+0x830>
 8006af4:	4659      	mov	r1, fp
 8006af6:	461a      	mov	r2, r3
 8006af8:	4628      	mov	r0, r5
 8006afa:	f000 fbff 	bl	80072fc <__lshift>
 8006afe:	4683      	mov	fp, r0
 8006b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	dd05      	ble.n	8006b12 <_dtoa_r+0x842>
 8006b06:	4621      	mov	r1, r4
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f000 fbf6 	bl	80072fc <__lshift>
 8006b10:	4604      	mov	r4, r0
 8006b12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d070      	beq.n	8006bfa <_dtoa_r+0x92a>
 8006b18:	4621      	mov	r1, r4
 8006b1a:	4658      	mov	r0, fp
 8006b1c:	f000 fc5e 	bl	80073dc <__mcmp>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	da6a      	bge.n	8006bfa <_dtoa_r+0x92a>
 8006b24:	2300      	movs	r3, #0
 8006b26:	4659      	mov	r1, fp
 8006b28:	220a      	movs	r2, #10
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f000 fa3a 	bl	8006fa4 <__multadd>
 8006b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b32:	4683      	mov	fp, r0
 8006b34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 8194 	beq.w	8006e66 <_dtoa_r+0xb96>
 8006b3e:	4631      	mov	r1, r6
 8006b40:	2300      	movs	r3, #0
 8006b42:	220a      	movs	r2, #10
 8006b44:	4628      	mov	r0, r5
 8006b46:	f000 fa2d 	bl	8006fa4 <__multadd>
 8006b4a:	f1b9 0f00 	cmp.w	r9, #0
 8006b4e:	4606      	mov	r6, r0
 8006b50:	f300 8093 	bgt.w	8006c7a <_dtoa_r+0x9aa>
 8006b54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	dc57      	bgt.n	8006c0a <_dtoa_r+0x93a>
 8006b5a:	e08e      	b.n	8006c7a <_dtoa_r+0x9aa>
 8006b5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b62:	e757      	b.n	8006a14 <_dtoa_r+0x744>
 8006b64:	9b08      	ldr	r3, [sp, #32]
 8006b66:	1e5c      	subs	r4, r3, #1
 8006b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6a:	42a3      	cmp	r3, r4
 8006b6c:	bfb7      	itett	lt
 8006b6e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b70:	1b1c      	subge	r4, r3, r4
 8006b72:	1ae2      	sublt	r2, r4, r3
 8006b74:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006b76:	bfbe      	ittt	lt
 8006b78:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b7a:	189b      	addlt	r3, r3, r2
 8006b7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006b7e:	9b08      	ldr	r3, [sp, #32]
 8006b80:	bfb8      	it	lt
 8006b82:	2400      	movlt	r4, #0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	bfbb      	ittet	lt
 8006b88:	9b06      	ldrlt	r3, [sp, #24]
 8006b8a:	9a08      	ldrlt	r2, [sp, #32]
 8006b8c:	9f06      	ldrge	r7, [sp, #24]
 8006b8e:	1a9f      	sublt	r7, r3, r2
 8006b90:	bfac      	ite	ge
 8006b92:	9b08      	ldrge	r3, [sp, #32]
 8006b94:	2300      	movlt	r3, #0
 8006b96:	e73f      	b.n	8006a18 <_dtoa_r+0x748>
 8006b98:	3fe00000 	.word	0x3fe00000
 8006b9c:	40240000 	.word	0x40240000
 8006ba0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ba2:	9f06      	ldr	r7, [sp, #24]
 8006ba4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006ba6:	e742      	b.n	8006a2e <_dtoa_r+0x75e>
 8006ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006baa:	e76b      	b.n	8006a84 <_dtoa_r+0x7b4>
 8006bac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	dc19      	bgt.n	8006be6 <_dtoa_r+0x916>
 8006bb2:	9b04      	ldr	r3, [sp, #16]
 8006bb4:	b9bb      	cbnz	r3, 8006be6 <_dtoa_r+0x916>
 8006bb6:	9b05      	ldr	r3, [sp, #20]
 8006bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bbc:	b99b      	cbnz	r3, 8006be6 <_dtoa_r+0x916>
 8006bbe:	9b05      	ldr	r3, [sp, #20]
 8006bc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bc4:	0d1b      	lsrs	r3, r3, #20
 8006bc6:	051b      	lsls	r3, r3, #20
 8006bc8:	b183      	cbz	r3, 8006bec <_dtoa_r+0x91c>
 8006bca:	f04f 0801 	mov.w	r8, #1
 8006bce:	9b06      	ldr	r3, [sp, #24]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	9306      	str	r3, [sp, #24]
 8006bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f47f af6a 	bne.w	8006ab6 <_dtoa_r+0x7e6>
 8006be2:	2001      	movs	r0, #1
 8006be4:	e76f      	b.n	8006ac6 <_dtoa_r+0x7f6>
 8006be6:	f04f 0800 	mov.w	r8, #0
 8006bea:	e7f6      	b.n	8006bda <_dtoa_r+0x90a>
 8006bec:	4698      	mov	r8, r3
 8006bee:	e7f4      	b.n	8006bda <_dtoa_r+0x90a>
 8006bf0:	f43f af7d 	beq.w	8006aee <_dtoa_r+0x81e>
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	301c      	adds	r0, #28
 8006bf8:	e772      	b.n	8006ae0 <_dtoa_r+0x810>
 8006bfa:	9b08      	ldr	r3, [sp, #32]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	dc36      	bgt.n	8006c6e <_dtoa_r+0x99e>
 8006c00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	dd33      	ble.n	8006c6e <_dtoa_r+0x99e>
 8006c06:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c0a:	f1b9 0f00 	cmp.w	r9, #0
 8006c0e:	d10d      	bne.n	8006c2c <_dtoa_r+0x95c>
 8006c10:	4621      	mov	r1, r4
 8006c12:	464b      	mov	r3, r9
 8006c14:	2205      	movs	r2, #5
 8006c16:	4628      	mov	r0, r5
 8006c18:	f000 f9c4 	bl	8006fa4 <__multadd>
 8006c1c:	4601      	mov	r1, r0
 8006c1e:	4604      	mov	r4, r0
 8006c20:	4658      	mov	r0, fp
 8006c22:	f000 fbdb 	bl	80073dc <__mcmp>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f73f adb8 	bgt.w	800679c <_dtoa_r+0x4cc>
 8006c2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c2e:	9f03      	ldr	r7, [sp, #12]
 8006c30:	ea6f 0a03 	mvn.w	sl, r3
 8006c34:	f04f 0800 	mov.w	r8, #0
 8006c38:	4621      	mov	r1, r4
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f000 f990 	bl	8006f60 <_Bfree>
 8006c40:	2e00      	cmp	r6, #0
 8006c42:	f43f aea7 	beq.w	8006994 <_dtoa_r+0x6c4>
 8006c46:	f1b8 0f00 	cmp.w	r8, #0
 8006c4a:	d005      	beq.n	8006c58 <_dtoa_r+0x988>
 8006c4c:	45b0      	cmp	r8, r6
 8006c4e:	d003      	beq.n	8006c58 <_dtoa_r+0x988>
 8006c50:	4641      	mov	r1, r8
 8006c52:	4628      	mov	r0, r5
 8006c54:	f000 f984 	bl	8006f60 <_Bfree>
 8006c58:	4631      	mov	r1, r6
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f000 f980 	bl	8006f60 <_Bfree>
 8006c60:	e698      	b.n	8006994 <_dtoa_r+0x6c4>
 8006c62:	2400      	movs	r4, #0
 8006c64:	4626      	mov	r6, r4
 8006c66:	e7e1      	b.n	8006c2c <_dtoa_r+0x95c>
 8006c68:	46c2      	mov	sl, r8
 8006c6a:	4626      	mov	r6, r4
 8006c6c:	e596      	b.n	800679c <_dtoa_r+0x4cc>
 8006c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80fd 	beq.w	8006e74 <_dtoa_r+0xba4>
 8006c7a:	2f00      	cmp	r7, #0
 8006c7c:	dd05      	ble.n	8006c8a <_dtoa_r+0x9ba>
 8006c7e:	4631      	mov	r1, r6
 8006c80:	463a      	mov	r2, r7
 8006c82:	4628      	mov	r0, r5
 8006c84:	f000 fb3a 	bl	80072fc <__lshift>
 8006c88:	4606      	mov	r6, r0
 8006c8a:	f1b8 0f00 	cmp.w	r8, #0
 8006c8e:	d05c      	beq.n	8006d4a <_dtoa_r+0xa7a>
 8006c90:	4628      	mov	r0, r5
 8006c92:	6871      	ldr	r1, [r6, #4]
 8006c94:	f000 f924 	bl	8006ee0 <_Balloc>
 8006c98:	4607      	mov	r7, r0
 8006c9a:	b928      	cbnz	r0, 8006ca8 <_dtoa_r+0x9d8>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ca2:	4b7f      	ldr	r3, [pc, #508]	; (8006ea0 <_dtoa_r+0xbd0>)
 8006ca4:	f7ff bb28 	b.w	80062f8 <_dtoa_r+0x28>
 8006ca8:	6932      	ldr	r2, [r6, #16]
 8006caa:	f106 010c 	add.w	r1, r6, #12
 8006cae:	3202      	adds	r2, #2
 8006cb0:	0092      	lsls	r2, r2, #2
 8006cb2:	300c      	adds	r0, #12
 8006cb4:	f7fe fe08 	bl	80058c8 <memcpy>
 8006cb8:	2201      	movs	r2, #1
 8006cba:	4639      	mov	r1, r7
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f000 fb1d 	bl	80072fc <__lshift>
 8006cc2:	46b0      	mov	r8, r6
 8006cc4:	4606      	mov	r6, r0
 8006cc6:	9b03      	ldr	r3, [sp, #12]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	9308      	str	r3, [sp, #32]
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	444b      	add	r3, r9
 8006cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8006cd2:	9b04      	ldr	r3, [sp, #16]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cda:	9b08      	ldr	r3, [sp, #32]
 8006cdc:	4621      	mov	r1, r4
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	4658      	mov	r0, fp
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	f7ff fa66 	bl	80061b4 <quorem>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	4641      	mov	r1, r8
 8006cec:	3330      	adds	r3, #48	; 0x30
 8006cee:	9006      	str	r0, [sp, #24]
 8006cf0:	4658      	mov	r0, fp
 8006cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cf4:	f000 fb72 	bl	80073dc <__mcmp>
 8006cf8:	4632      	mov	r2, r6
 8006cfa:	4681      	mov	r9, r0
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f000 fb88 	bl	8007414 <__mdiff>
 8006d04:	68c2      	ldr	r2, [r0, #12]
 8006d06:	4607      	mov	r7, r0
 8006d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d0a:	bb02      	cbnz	r2, 8006d4e <_dtoa_r+0xa7e>
 8006d0c:	4601      	mov	r1, r0
 8006d0e:	4658      	mov	r0, fp
 8006d10:	f000 fb64 	bl	80073dc <__mcmp>
 8006d14:	4602      	mov	r2, r0
 8006d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d18:	4639      	mov	r1, r7
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006d20:	f000 f91e 	bl	8006f60 <_Bfree>
 8006d24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d28:	9f08      	ldr	r7, [sp, #32]
 8006d2a:	ea43 0102 	orr.w	r1, r3, r2
 8006d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d30:	430b      	orrs	r3, r1
 8006d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d34:	d10d      	bne.n	8006d52 <_dtoa_r+0xa82>
 8006d36:	2b39      	cmp	r3, #57	; 0x39
 8006d38:	d029      	beq.n	8006d8e <_dtoa_r+0xabe>
 8006d3a:	f1b9 0f00 	cmp.w	r9, #0
 8006d3e:	dd01      	ble.n	8006d44 <_dtoa_r+0xa74>
 8006d40:	9b06      	ldr	r3, [sp, #24]
 8006d42:	3331      	adds	r3, #49	; 0x31
 8006d44:	9a04      	ldr	r2, [sp, #16]
 8006d46:	7013      	strb	r3, [r2, #0]
 8006d48:	e776      	b.n	8006c38 <_dtoa_r+0x968>
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	e7b9      	b.n	8006cc2 <_dtoa_r+0x9f2>
 8006d4e:	2201      	movs	r2, #1
 8006d50:	e7e2      	b.n	8006d18 <_dtoa_r+0xa48>
 8006d52:	f1b9 0f00 	cmp.w	r9, #0
 8006d56:	db06      	blt.n	8006d66 <_dtoa_r+0xa96>
 8006d58:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006d5a:	ea41 0909 	orr.w	r9, r1, r9
 8006d5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d60:	ea59 0101 	orrs.w	r1, r9, r1
 8006d64:	d120      	bne.n	8006da8 <_dtoa_r+0xad8>
 8006d66:	2a00      	cmp	r2, #0
 8006d68:	ddec      	ble.n	8006d44 <_dtoa_r+0xa74>
 8006d6a:	4659      	mov	r1, fp
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	4628      	mov	r0, r5
 8006d70:	9308      	str	r3, [sp, #32]
 8006d72:	f000 fac3 	bl	80072fc <__lshift>
 8006d76:	4621      	mov	r1, r4
 8006d78:	4683      	mov	fp, r0
 8006d7a:	f000 fb2f 	bl	80073dc <__mcmp>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	9b08      	ldr	r3, [sp, #32]
 8006d82:	dc02      	bgt.n	8006d8a <_dtoa_r+0xaba>
 8006d84:	d1de      	bne.n	8006d44 <_dtoa_r+0xa74>
 8006d86:	07da      	lsls	r2, r3, #31
 8006d88:	d5dc      	bpl.n	8006d44 <_dtoa_r+0xa74>
 8006d8a:	2b39      	cmp	r3, #57	; 0x39
 8006d8c:	d1d8      	bne.n	8006d40 <_dtoa_r+0xa70>
 8006d8e:	2339      	movs	r3, #57	; 0x39
 8006d90:	9a04      	ldr	r2, [sp, #16]
 8006d92:	7013      	strb	r3, [r2, #0]
 8006d94:	463b      	mov	r3, r7
 8006d96:	461f      	mov	r7, r3
 8006d98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	2a39      	cmp	r2, #57	; 0x39
 8006da0:	d050      	beq.n	8006e44 <_dtoa_r+0xb74>
 8006da2:	3201      	adds	r2, #1
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	e747      	b.n	8006c38 <_dtoa_r+0x968>
 8006da8:	2a00      	cmp	r2, #0
 8006daa:	dd03      	ble.n	8006db4 <_dtoa_r+0xae4>
 8006dac:	2b39      	cmp	r3, #57	; 0x39
 8006dae:	d0ee      	beq.n	8006d8e <_dtoa_r+0xabe>
 8006db0:	3301      	adds	r3, #1
 8006db2:	e7c7      	b.n	8006d44 <_dtoa_r+0xa74>
 8006db4:	9a08      	ldr	r2, [sp, #32]
 8006db6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006db8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006dbc:	428a      	cmp	r2, r1
 8006dbe:	d02a      	beq.n	8006e16 <_dtoa_r+0xb46>
 8006dc0:	4659      	mov	r1, fp
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	220a      	movs	r2, #10
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 f8ec 	bl	8006fa4 <__multadd>
 8006dcc:	45b0      	cmp	r8, r6
 8006dce:	4683      	mov	fp, r0
 8006dd0:	f04f 0300 	mov.w	r3, #0
 8006dd4:	f04f 020a 	mov.w	r2, #10
 8006dd8:	4641      	mov	r1, r8
 8006dda:	4628      	mov	r0, r5
 8006ddc:	d107      	bne.n	8006dee <_dtoa_r+0xb1e>
 8006dde:	f000 f8e1 	bl	8006fa4 <__multadd>
 8006de2:	4680      	mov	r8, r0
 8006de4:	4606      	mov	r6, r0
 8006de6:	9b08      	ldr	r3, [sp, #32]
 8006de8:	3301      	adds	r3, #1
 8006dea:	9308      	str	r3, [sp, #32]
 8006dec:	e775      	b.n	8006cda <_dtoa_r+0xa0a>
 8006dee:	f000 f8d9 	bl	8006fa4 <__multadd>
 8006df2:	4631      	mov	r1, r6
 8006df4:	4680      	mov	r8, r0
 8006df6:	2300      	movs	r3, #0
 8006df8:	220a      	movs	r2, #10
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f000 f8d2 	bl	8006fa4 <__multadd>
 8006e00:	4606      	mov	r6, r0
 8006e02:	e7f0      	b.n	8006de6 <_dtoa_r+0xb16>
 8006e04:	f1b9 0f00 	cmp.w	r9, #0
 8006e08:	bfcc      	ite	gt
 8006e0a:	464f      	movgt	r7, r9
 8006e0c:	2701      	movle	r7, #1
 8006e0e:	f04f 0800 	mov.w	r8, #0
 8006e12:	9a03      	ldr	r2, [sp, #12]
 8006e14:	4417      	add	r7, r2
 8006e16:	4659      	mov	r1, fp
 8006e18:	2201      	movs	r2, #1
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	9308      	str	r3, [sp, #32]
 8006e1e:	f000 fa6d 	bl	80072fc <__lshift>
 8006e22:	4621      	mov	r1, r4
 8006e24:	4683      	mov	fp, r0
 8006e26:	f000 fad9 	bl	80073dc <__mcmp>
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	dcb2      	bgt.n	8006d94 <_dtoa_r+0xac4>
 8006e2e:	d102      	bne.n	8006e36 <_dtoa_r+0xb66>
 8006e30:	9b08      	ldr	r3, [sp, #32]
 8006e32:	07db      	lsls	r3, r3, #31
 8006e34:	d4ae      	bmi.n	8006d94 <_dtoa_r+0xac4>
 8006e36:	463b      	mov	r3, r7
 8006e38:	461f      	mov	r7, r3
 8006e3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e3e:	2a30      	cmp	r2, #48	; 0x30
 8006e40:	d0fa      	beq.n	8006e38 <_dtoa_r+0xb68>
 8006e42:	e6f9      	b.n	8006c38 <_dtoa_r+0x968>
 8006e44:	9a03      	ldr	r2, [sp, #12]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d1a5      	bne.n	8006d96 <_dtoa_r+0xac6>
 8006e4a:	2331      	movs	r3, #49	; 0x31
 8006e4c:	f10a 0a01 	add.w	sl, sl, #1
 8006e50:	e779      	b.n	8006d46 <_dtoa_r+0xa76>
 8006e52:	4b14      	ldr	r3, [pc, #80]	; (8006ea4 <_dtoa_r+0xbd4>)
 8006e54:	f7ff baa8 	b.w	80063a8 <_dtoa_r+0xd8>
 8006e58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f47f aa81 	bne.w	8006362 <_dtoa_r+0x92>
 8006e60:	4b11      	ldr	r3, [pc, #68]	; (8006ea8 <_dtoa_r+0xbd8>)
 8006e62:	f7ff baa1 	b.w	80063a8 <_dtoa_r+0xd8>
 8006e66:	f1b9 0f00 	cmp.w	r9, #0
 8006e6a:	dc03      	bgt.n	8006e74 <_dtoa_r+0xba4>
 8006e6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	f73f aecb 	bgt.w	8006c0a <_dtoa_r+0x93a>
 8006e74:	9f03      	ldr	r7, [sp, #12]
 8006e76:	4621      	mov	r1, r4
 8006e78:	4658      	mov	r0, fp
 8006e7a:	f7ff f99b 	bl	80061b4 <quorem>
 8006e7e:	9a03      	ldr	r2, [sp, #12]
 8006e80:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e84:	f807 3b01 	strb.w	r3, [r7], #1
 8006e88:	1aba      	subs	r2, r7, r2
 8006e8a:	4591      	cmp	r9, r2
 8006e8c:	ddba      	ble.n	8006e04 <_dtoa_r+0xb34>
 8006e8e:	4659      	mov	r1, fp
 8006e90:	2300      	movs	r3, #0
 8006e92:	220a      	movs	r2, #10
 8006e94:	4628      	mov	r0, r5
 8006e96:	f000 f885 	bl	8006fa4 <__multadd>
 8006e9a:	4683      	mov	fp, r0
 8006e9c:	e7eb      	b.n	8006e76 <_dtoa_r+0xba6>
 8006e9e:	bf00      	nop
 8006ea0:	08008427 	.word	0x08008427
 8006ea4:	08008384 	.word	0x08008384
 8006ea8:	080083a8 	.word	0x080083a8

08006eac <_localeconv_r>:
 8006eac:	4800      	ldr	r0, [pc, #0]	; (8006eb0 <_localeconv_r+0x4>)
 8006eae:	4770      	bx	lr
 8006eb0:	20000174 	.word	0x20000174

08006eb4 <malloc>:
 8006eb4:	4b02      	ldr	r3, [pc, #8]	; (8006ec0 <malloc+0xc>)
 8006eb6:	4601      	mov	r1, r0
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	f000 bc0f 	b.w	80076dc <_malloc_r>
 8006ebe:	bf00      	nop
 8006ec0:	20000020 	.word	0x20000020

08006ec4 <memchr>:
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	b510      	push	{r4, lr}
 8006ec8:	b2c9      	uxtb	r1, r1
 8006eca:	4402      	add	r2, r0
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	d101      	bne.n	8006ed6 <memchr+0x12>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	e003      	b.n	8006ede <memchr+0x1a>
 8006ed6:	7804      	ldrb	r4, [r0, #0]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	428c      	cmp	r4, r1
 8006edc:	d1f6      	bne.n	8006ecc <memchr+0x8>
 8006ede:	bd10      	pop	{r4, pc}

08006ee0 <_Balloc>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	460d      	mov	r5, r1
 8006ee8:	b976      	cbnz	r6, 8006f08 <_Balloc+0x28>
 8006eea:	2010      	movs	r0, #16
 8006eec:	f7ff ffe2 	bl	8006eb4 <malloc>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	6260      	str	r0, [r4, #36]	; 0x24
 8006ef4:	b920      	cbnz	r0, 8006f00 <_Balloc+0x20>
 8006ef6:	2166      	movs	r1, #102	; 0x66
 8006ef8:	4b17      	ldr	r3, [pc, #92]	; (8006f58 <_Balloc+0x78>)
 8006efa:	4818      	ldr	r0, [pc, #96]	; (8006f5c <_Balloc+0x7c>)
 8006efc:	f000 fc72 	bl	80077e4 <__assert_func>
 8006f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f04:	6006      	str	r6, [r0, #0]
 8006f06:	60c6      	str	r6, [r0, #12]
 8006f08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f0a:	68f3      	ldr	r3, [r6, #12]
 8006f0c:	b183      	cbz	r3, 8006f30 <_Balloc+0x50>
 8006f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f16:	b9b8      	cbnz	r0, 8006f48 <_Balloc+0x68>
 8006f18:	2101      	movs	r1, #1
 8006f1a:	fa01 f605 	lsl.w	r6, r1, r5
 8006f1e:	1d72      	adds	r2, r6, #5
 8006f20:	4620      	mov	r0, r4
 8006f22:	0092      	lsls	r2, r2, #2
 8006f24:	f000 fb5e 	bl	80075e4 <_calloc_r>
 8006f28:	b160      	cbz	r0, 8006f44 <_Balloc+0x64>
 8006f2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f2e:	e00e      	b.n	8006f4e <_Balloc+0x6e>
 8006f30:	2221      	movs	r2, #33	; 0x21
 8006f32:	2104      	movs	r1, #4
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 fb55 	bl	80075e4 <_calloc_r>
 8006f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f3c:	60f0      	str	r0, [r6, #12]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e4      	bne.n	8006f0e <_Balloc+0x2e>
 8006f44:	2000      	movs	r0, #0
 8006f46:	bd70      	pop	{r4, r5, r6, pc}
 8006f48:	6802      	ldr	r2, [r0, #0]
 8006f4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f54:	e7f7      	b.n	8006f46 <_Balloc+0x66>
 8006f56:	bf00      	nop
 8006f58:	080083b5 	.word	0x080083b5
 8006f5c:	08008438 	.word	0x08008438

08006f60 <_Bfree>:
 8006f60:	b570      	push	{r4, r5, r6, lr}
 8006f62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f64:	4605      	mov	r5, r0
 8006f66:	460c      	mov	r4, r1
 8006f68:	b976      	cbnz	r6, 8006f88 <_Bfree+0x28>
 8006f6a:	2010      	movs	r0, #16
 8006f6c:	f7ff ffa2 	bl	8006eb4 <malloc>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6268      	str	r0, [r5, #36]	; 0x24
 8006f74:	b920      	cbnz	r0, 8006f80 <_Bfree+0x20>
 8006f76:	218a      	movs	r1, #138	; 0x8a
 8006f78:	4b08      	ldr	r3, [pc, #32]	; (8006f9c <_Bfree+0x3c>)
 8006f7a:	4809      	ldr	r0, [pc, #36]	; (8006fa0 <_Bfree+0x40>)
 8006f7c:	f000 fc32 	bl	80077e4 <__assert_func>
 8006f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f84:	6006      	str	r6, [r0, #0]
 8006f86:	60c6      	str	r6, [r0, #12]
 8006f88:	b13c      	cbz	r4, 8006f9a <_Bfree+0x3a>
 8006f8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f8c:	6862      	ldr	r2, [r4, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f94:	6021      	str	r1, [r4, #0]
 8006f96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f9a:	bd70      	pop	{r4, r5, r6, pc}
 8006f9c:	080083b5 	.word	0x080083b5
 8006fa0:	08008438 	.word	0x08008438

08006fa4 <__multadd>:
 8006fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa8:	4607      	mov	r7, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	461e      	mov	r6, r3
 8006fae:	2000      	movs	r0, #0
 8006fb0:	690d      	ldr	r5, [r1, #16]
 8006fb2:	f101 0c14 	add.w	ip, r1, #20
 8006fb6:	f8dc 3000 	ldr.w	r3, [ip]
 8006fba:	3001      	adds	r0, #1
 8006fbc:	b299      	uxth	r1, r3
 8006fbe:	fb02 6101 	mla	r1, r2, r1, r6
 8006fc2:	0c1e      	lsrs	r6, r3, #16
 8006fc4:	0c0b      	lsrs	r3, r1, #16
 8006fc6:	fb02 3306 	mla	r3, r2, r6, r3
 8006fca:	b289      	uxth	r1, r1
 8006fcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fd0:	4285      	cmp	r5, r0
 8006fd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fd6:	f84c 1b04 	str.w	r1, [ip], #4
 8006fda:	dcec      	bgt.n	8006fb6 <__multadd+0x12>
 8006fdc:	b30e      	cbz	r6, 8007022 <__multadd+0x7e>
 8006fde:	68a3      	ldr	r3, [r4, #8]
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	dc19      	bgt.n	8007018 <__multadd+0x74>
 8006fe4:	6861      	ldr	r1, [r4, #4]
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	3101      	adds	r1, #1
 8006fea:	f7ff ff79 	bl	8006ee0 <_Balloc>
 8006fee:	4680      	mov	r8, r0
 8006ff0:	b928      	cbnz	r0, 8006ffe <__multadd+0x5a>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	21b5      	movs	r1, #181	; 0xb5
 8006ff6:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <__multadd+0x84>)
 8006ff8:	480c      	ldr	r0, [pc, #48]	; (800702c <__multadd+0x88>)
 8006ffa:	f000 fbf3 	bl	80077e4 <__assert_func>
 8006ffe:	6922      	ldr	r2, [r4, #16]
 8007000:	f104 010c 	add.w	r1, r4, #12
 8007004:	3202      	adds	r2, #2
 8007006:	0092      	lsls	r2, r2, #2
 8007008:	300c      	adds	r0, #12
 800700a:	f7fe fc5d 	bl	80058c8 <memcpy>
 800700e:	4621      	mov	r1, r4
 8007010:	4638      	mov	r0, r7
 8007012:	f7ff ffa5 	bl	8006f60 <_Bfree>
 8007016:	4644      	mov	r4, r8
 8007018:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800701c:	3501      	adds	r5, #1
 800701e:	615e      	str	r6, [r3, #20]
 8007020:	6125      	str	r5, [r4, #16]
 8007022:	4620      	mov	r0, r4
 8007024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007028:	08008427 	.word	0x08008427
 800702c:	08008438 	.word	0x08008438

08007030 <__hi0bits>:
 8007030:	0c02      	lsrs	r2, r0, #16
 8007032:	0412      	lsls	r2, r2, #16
 8007034:	4603      	mov	r3, r0
 8007036:	b9ca      	cbnz	r2, 800706c <__hi0bits+0x3c>
 8007038:	0403      	lsls	r3, r0, #16
 800703a:	2010      	movs	r0, #16
 800703c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007040:	bf04      	itt	eq
 8007042:	021b      	lsleq	r3, r3, #8
 8007044:	3008      	addeq	r0, #8
 8007046:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800704a:	bf04      	itt	eq
 800704c:	011b      	lsleq	r3, r3, #4
 800704e:	3004      	addeq	r0, #4
 8007050:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007054:	bf04      	itt	eq
 8007056:	009b      	lsleq	r3, r3, #2
 8007058:	3002      	addeq	r0, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	db05      	blt.n	800706a <__hi0bits+0x3a>
 800705e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007062:	f100 0001 	add.w	r0, r0, #1
 8007066:	bf08      	it	eq
 8007068:	2020      	moveq	r0, #32
 800706a:	4770      	bx	lr
 800706c:	2000      	movs	r0, #0
 800706e:	e7e5      	b.n	800703c <__hi0bits+0xc>

08007070 <__lo0bits>:
 8007070:	6803      	ldr	r3, [r0, #0]
 8007072:	4602      	mov	r2, r0
 8007074:	f013 0007 	ands.w	r0, r3, #7
 8007078:	d00b      	beq.n	8007092 <__lo0bits+0x22>
 800707a:	07d9      	lsls	r1, r3, #31
 800707c:	d421      	bmi.n	80070c2 <__lo0bits+0x52>
 800707e:	0798      	lsls	r0, r3, #30
 8007080:	bf49      	itett	mi
 8007082:	085b      	lsrmi	r3, r3, #1
 8007084:	089b      	lsrpl	r3, r3, #2
 8007086:	2001      	movmi	r0, #1
 8007088:	6013      	strmi	r3, [r2, #0]
 800708a:	bf5c      	itt	pl
 800708c:	2002      	movpl	r0, #2
 800708e:	6013      	strpl	r3, [r2, #0]
 8007090:	4770      	bx	lr
 8007092:	b299      	uxth	r1, r3
 8007094:	b909      	cbnz	r1, 800709a <__lo0bits+0x2a>
 8007096:	2010      	movs	r0, #16
 8007098:	0c1b      	lsrs	r3, r3, #16
 800709a:	b2d9      	uxtb	r1, r3
 800709c:	b909      	cbnz	r1, 80070a2 <__lo0bits+0x32>
 800709e:	3008      	adds	r0, #8
 80070a0:	0a1b      	lsrs	r3, r3, #8
 80070a2:	0719      	lsls	r1, r3, #28
 80070a4:	bf04      	itt	eq
 80070a6:	091b      	lsreq	r3, r3, #4
 80070a8:	3004      	addeq	r0, #4
 80070aa:	0799      	lsls	r1, r3, #30
 80070ac:	bf04      	itt	eq
 80070ae:	089b      	lsreq	r3, r3, #2
 80070b0:	3002      	addeq	r0, #2
 80070b2:	07d9      	lsls	r1, r3, #31
 80070b4:	d403      	bmi.n	80070be <__lo0bits+0x4e>
 80070b6:	085b      	lsrs	r3, r3, #1
 80070b8:	f100 0001 	add.w	r0, r0, #1
 80070bc:	d003      	beq.n	80070c6 <__lo0bits+0x56>
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	4770      	bx	lr
 80070c2:	2000      	movs	r0, #0
 80070c4:	4770      	bx	lr
 80070c6:	2020      	movs	r0, #32
 80070c8:	4770      	bx	lr
	...

080070cc <__i2b>:
 80070cc:	b510      	push	{r4, lr}
 80070ce:	460c      	mov	r4, r1
 80070d0:	2101      	movs	r1, #1
 80070d2:	f7ff ff05 	bl	8006ee0 <_Balloc>
 80070d6:	4602      	mov	r2, r0
 80070d8:	b928      	cbnz	r0, 80070e6 <__i2b+0x1a>
 80070da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80070de:	4b04      	ldr	r3, [pc, #16]	; (80070f0 <__i2b+0x24>)
 80070e0:	4804      	ldr	r0, [pc, #16]	; (80070f4 <__i2b+0x28>)
 80070e2:	f000 fb7f 	bl	80077e4 <__assert_func>
 80070e6:	2301      	movs	r3, #1
 80070e8:	6144      	str	r4, [r0, #20]
 80070ea:	6103      	str	r3, [r0, #16]
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	bf00      	nop
 80070f0:	08008427 	.word	0x08008427
 80070f4:	08008438 	.word	0x08008438

080070f8 <__multiply>:
 80070f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	4691      	mov	r9, r2
 80070fe:	690a      	ldr	r2, [r1, #16]
 8007100:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007104:	460c      	mov	r4, r1
 8007106:	429a      	cmp	r2, r3
 8007108:	bfbe      	ittt	lt
 800710a:	460b      	movlt	r3, r1
 800710c:	464c      	movlt	r4, r9
 800710e:	4699      	movlt	r9, r3
 8007110:	6927      	ldr	r7, [r4, #16]
 8007112:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007116:	68a3      	ldr	r3, [r4, #8]
 8007118:	6861      	ldr	r1, [r4, #4]
 800711a:	eb07 060a 	add.w	r6, r7, sl
 800711e:	42b3      	cmp	r3, r6
 8007120:	b085      	sub	sp, #20
 8007122:	bfb8      	it	lt
 8007124:	3101      	addlt	r1, #1
 8007126:	f7ff fedb 	bl	8006ee0 <_Balloc>
 800712a:	b930      	cbnz	r0, 800713a <__multiply+0x42>
 800712c:	4602      	mov	r2, r0
 800712e:	f240 115d 	movw	r1, #349	; 0x15d
 8007132:	4b43      	ldr	r3, [pc, #268]	; (8007240 <__multiply+0x148>)
 8007134:	4843      	ldr	r0, [pc, #268]	; (8007244 <__multiply+0x14c>)
 8007136:	f000 fb55 	bl	80077e4 <__assert_func>
 800713a:	f100 0514 	add.w	r5, r0, #20
 800713e:	462b      	mov	r3, r5
 8007140:	2200      	movs	r2, #0
 8007142:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007146:	4543      	cmp	r3, r8
 8007148:	d321      	bcc.n	800718e <__multiply+0x96>
 800714a:	f104 0314 	add.w	r3, r4, #20
 800714e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007152:	f109 0314 	add.w	r3, r9, #20
 8007156:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800715a:	9202      	str	r2, [sp, #8]
 800715c:	1b3a      	subs	r2, r7, r4
 800715e:	3a15      	subs	r2, #21
 8007160:	f022 0203 	bic.w	r2, r2, #3
 8007164:	3204      	adds	r2, #4
 8007166:	f104 0115 	add.w	r1, r4, #21
 800716a:	428f      	cmp	r7, r1
 800716c:	bf38      	it	cc
 800716e:	2204      	movcc	r2, #4
 8007170:	9201      	str	r2, [sp, #4]
 8007172:	9a02      	ldr	r2, [sp, #8]
 8007174:	9303      	str	r3, [sp, #12]
 8007176:	429a      	cmp	r2, r3
 8007178:	d80c      	bhi.n	8007194 <__multiply+0x9c>
 800717a:	2e00      	cmp	r6, #0
 800717c:	dd03      	ble.n	8007186 <__multiply+0x8e>
 800717e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007182:	2b00      	cmp	r3, #0
 8007184:	d059      	beq.n	800723a <__multiply+0x142>
 8007186:	6106      	str	r6, [r0, #16]
 8007188:	b005      	add	sp, #20
 800718a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718e:	f843 2b04 	str.w	r2, [r3], #4
 8007192:	e7d8      	b.n	8007146 <__multiply+0x4e>
 8007194:	f8b3 a000 	ldrh.w	sl, [r3]
 8007198:	f1ba 0f00 	cmp.w	sl, #0
 800719c:	d023      	beq.n	80071e6 <__multiply+0xee>
 800719e:	46a9      	mov	r9, r5
 80071a0:	f04f 0c00 	mov.w	ip, #0
 80071a4:	f104 0e14 	add.w	lr, r4, #20
 80071a8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071ac:	f8d9 1000 	ldr.w	r1, [r9]
 80071b0:	fa1f fb82 	uxth.w	fp, r2
 80071b4:	b289      	uxth	r1, r1
 80071b6:	fb0a 110b 	mla	r1, sl, fp, r1
 80071ba:	4461      	add	r1, ip
 80071bc:	f8d9 c000 	ldr.w	ip, [r9]
 80071c0:	0c12      	lsrs	r2, r2, #16
 80071c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80071c6:	fb0a c202 	mla	r2, sl, r2, ip
 80071ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071ce:	b289      	uxth	r1, r1
 80071d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071d4:	4577      	cmp	r7, lr
 80071d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071da:	f849 1b04 	str.w	r1, [r9], #4
 80071de:	d8e3      	bhi.n	80071a8 <__multiply+0xb0>
 80071e0:	9a01      	ldr	r2, [sp, #4]
 80071e2:	f845 c002 	str.w	ip, [r5, r2]
 80071e6:	9a03      	ldr	r2, [sp, #12]
 80071e8:	3304      	adds	r3, #4
 80071ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80071ee:	f1b9 0f00 	cmp.w	r9, #0
 80071f2:	d020      	beq.n	8007236 <__multiply+0x13e>
 80071f4:	46ae      	mov	lr, r5
 80071f6:	f04f 0a00 	mov.w	sl, #0
 80071fa:	6829      	ldr	r1, [r5, #0]
 80071fc:	f104 0c14 	add.w	ip, r4, #20
 8007200:	f8bc b000 	ldrh.w	fp, [ip]
 8007204:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007208:	b289      	uxth	r1, r1
 800720a:	fb09 220b 	mla	r2, r9, fp, r2
 800720e:	4492      	add	sl, r2
 8007210:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007214:	f84e 1b04 	str.w	r1, [lr], #4
 8007218:	f85c 2b04 	ldr.w	r2, [ip], #4
 800721c:	f8be 1000 	ldrh.w	r1, [lr]
 8007220:	0c12      	lsrs	r2, r2, #16
 8007222:	fb09 1102 	mla	r1, r9, r2, r1
 8007226:	4567      	cmp	r7, ip
 8007228:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800722c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007230:	d8e6      	bhi.n	8007200 <__multiply+0x108>
 8007232:	9a01      	ldr	r2, [sp, #4]
 8007234:	50a9      	str	r1, [r5, r2]
 8007236:	3504      	adds	r5, #4
 8007238:	e79b      	b.n	8007172 <__multiply+0x7a>
 800723a:	3e01      	subs	r6, #1
 800723c:	e79d      	b.n	800717a <__multiply+0x82>
 800723e:	bf00      	nop
 8007240:	08008427 	.word	0x08008427
 8007244:	08008438 	.word	0x08008438

08007248 <__pow5mult>:
 8007248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800724c:	4615      	mov	r5, r2
 800724e:	f012 0203 	ands.w	r2, r2, #3
 8007252:	4606      	mov	r6, r0
 8007254:	460f      	mov	r7, r1
 8007256:	d007      	beq.n	8007268 <__pow5mult+0x20>
 8007258:	4c25      	ldr	r4, [pc, #148]	; (80072f0 <__pow5mult+0xa8>)
 800725a:	3a01      	subs	r2, #1
 800725c:	2300      	movs	r3, #0
 800725e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007262:	f7ff fe9f 	bl	8006fa4 <__multadd>
 8007266:	4607      	mov	r7, r0
 8007268:	10ad      	asrs	r5, r5, #2
 800726a:	d03d      	beq.n	80072e8 <__pow5mult+0xa0>
 800726c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800726e:	b97c      	cbnz	r4, 8007290 <__pow5mult+0x48>
 8007270:	2010      	movs	r0, #16
 8007272:	f7ff fe1f 	bl	8006eb4 <malloc>
 8007276:	4602      	mov	r2, r0
 8007278:	6270      	str	r0, [r6, #36]	; 0x24
 800727a:	b928      	cbnz	r0, 8007288 <__pow5mult+0x40>
 800727c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007280:	4b1c      	ldr	r3, [pc, #112]	; (80072f4 <__pow5mult+0xac>)
 8007282:	481d      	ldr	r0, [pc, #116]	; (80072f8 <__pow5mult+0xb0>)
 8007284:	f000 faae 	bl	80077e4 <__assert_func>
 8007288:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800728c:	6004      	str	r4, [r0, #0]
 800728e:	60c4      	str	r4, [r0, #12]
 8007290:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007294:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007298:	b94c      	cbnz	r4, 80072ae <__pow5mult+0x66>
 800729a:	f240 2171 	movw	r1, #625	; 0x271
 800729e:	4630      	mov	r0, r6
 80072a0:	f7ff ff14 	bl	80070cc <__i2b>
 80072a4:	2300      	movs	r3, #0
 80072a6:	4604      	mov	r4, r0
 80072a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80072ac:	6003      	str	r3, [r0, #0]
 80072ae:	f04f 0900 	mov.w	r9, #0
 80072b2:	07eb      	lsls	r3, r5, #31
 80072b4:	d50a      	bpl.n	80072cc <__pow5mult+0x84>
 80072b6:	4639      	mov	r1, r7
 80072b8:	4622      	mov	r2, r4
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7ff ff1c 	bl	80070f8 <__multiply>
 80072c0:	4680      	mov	r8, r0
 80072c2:	4639      	mov	r1, r7
 80072c4:	4630      	mov	r0, r6
 80072c6:	f7ff fe4b 	bl	8006f60 <_Bfree>
 80072ca:	4647      	mov	r7, r8
 80072cc:	106d      	asrs	r5, r5, #1
 80072ce:	d00b      	beq.n	80072e8 <__pow5mult+0xa0>
 80072d0:	6820      	ldr	r0, [r4, #0]
 80072d2:	b938      	cbnz	r0, 80072e4 <__pow5mult+0x9c>
 80072d4:	4622      	mov	r2, r4
 80072d6:	4621      	mov	r1, r4
 80072d8:	4630      	mov	r0, r6
 80072da:	f7ff ff0d 	bl	80070f8 <__multiply>
 80072de:	6020      	str	r0, [r4, #0]
 80072e0:	f8c0 9000 	str.w	r9, [r0]
 80072e4:	4604      	mov	r4, r0
 80072e6:	e7e4      	b.n	80072b2 <__pow5mult+0x6a>
 80072e8:	4638      	mov	r0, r7
 80072ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ee:	bf00      	nop
 80072f0:	08008588 	.word	0x08008588
 80072f4:	080083b5 	.word	0x080083b5
 80072f8:	08008438 	.word	0x08008438

080072fc <__lshift>:
 80072fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007300:	460c      	mov	r4, r1
 8007302:	4607      	mov	r7, r0
 8007304:	4691      	mov	r9, r2
 8007306:	6923      	ldr	r3, [r4, #16]
 8007308:	6849      	ldr	r1, [r1, #4]
 800730a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800730e:	68a3      	ldr	r3, [r4, #8]
 8007310:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007314:	f108 0601 	add.w	r6, r8, #1
 8007318:	42b3      	cmp	r3, r6
 800731a:	db0b      	blt.n	8007334 <__lshift+0x38>
 800731c:	4638      	mov	r0, r7
 800731e:	f7ff fddf 	bl	8006ee0 <_Balloc>
 8007322:	4605      	mov	r5, r0
 8007324:	b948      	cbnz	r0, 800733a <__lshift+0x3e>
 8007326:	4602      	mov	r2, r0
 8007328:	f240 11d9 	movw	r1, #473	; 0x1d9
 800732c:	4b29      	ldr	r3, [pc, #164]	; (80073d4 <__lshift+0xd8>)
 800732e:	482a      	ldr	r0, [pc, #168]	; (80073d8 <__lshift+0xdc>)
 8007330:	f000 fa58 	bl	80077e4 <__assert_func>
 8007334:	3101      	adds	r1, #1
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	e7ee      	b.n	8007318 <__lshift+0x1c>
 800733a:	2300      	movs	r3, #0
 800733c:	f100 0114 	add.w	r1, r0, #20
 8007340:	f100 0210 	add.w	r2, r0, #16
 8007344:	4618      	mov	r0, r3
 8007346:	4553      	cmp	r3, sl
 8007348:	db37      	blt.n	80073ba <__lshift+0xbe>
 800734a:	6920      	ldr	r0, [r4, #16]
 800734c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007350:	f104 0314 	add.w	r3, r4, #20
 8007354:	f019 091f 	ands.w	r9, r9, #31
 8007358:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800735c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007360:	d02f      	beq.n	80073c2 <__lshift+0xc6>
 8007362:	468a      	mov	sl, r1
 8007364:	f04f 0c00 	mov.w	ip, #0
 8007368:	f1c9 0e20 	rsb	lr, r9, #32
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	fa02 f209 	lsl.w	r2, r2, r9
 8007372:	ea42 020c 	orr.w	r2, r2, ip
 8007376:	f84a 2b04 	str.w	r2, [sl], #4
 800737a:	f853 2b04 	ldr.w	r2, [r3], #4
 800737e:	4298      	cmp	r0, r3
 8007380:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007384:	d8f2      	bhi.n	800736c <__lshift+0x70>
 8007386:	1b03      	subs	r3, r0, r4
 8007388:	3b15      	subs	r3, #21
 800738a:	f023 0303 	bic.w	r3, r3, #3
 800738e:	3304      	adds	r3, #4
 8007390:	f104 0215 	add.w	r2, r4, #21
 8007394:	4290      	cmp	r0, r2
 8007396:	bf38      	it	cc
 8007398:	2304      	movcc	r3, #4
 800739a:	f841 c003 	str.w	ip, [r1, r3]
 800739e:	f1bc 0f00 	cmp.w	ip, #0
 80073a2:	d001      	beq.n	80073a8 <__lshift+0xac>
 80073a4:	f108 0602 	add.w	r6, r8, #2
 80073a8:	3e01      	subs	r6, #1
 80073aa:	4638      	mov	r0, r7
 80073ac:	4621      	mov	r1, r4
 80073ae:	612e      	str	r6, [r5, #16]
 80073b0:	f7ff fdd6 	bl	8006f60 <_Bfree>
 80073b4:	4628      	mov	r0, r5
 80073b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80073be:	3301      	adds	r3, #1
 80073c0:	e7c1      	b.n	8007346 <__lshift+0x4a>
 80073c2:	3904      	subs	r1, #4
 80073c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073c8:	4298      	cmp	r0, r3
 80073ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80073ce:	d8f9      	bhi.n	80073c4 <__lshift+0xc8>
 80073d0:	e7ea      	b.n	80073a8 <__lshift+0xac>
 80073d2:	bf00      	nop
 80073d4:	08008427 	.word	0x08008427
 80073d8:	08008438 	.word	0x08008438

080073dc <__mcmp>:
 80073dc:	4603      	mov	r3, r0
 80073de:	690a      	ldr	r2, [r1, #16]
 80073e0:	6900      	ldr	r0, [r0, #16]
 80073e2:	b530      	push	{r4, r5, lr}
 80073e4:	1a80      	subs	r0, r0, r2
 80073e6:	d10d      	bne.n	8007404 <__mcmp+0x28>
 80073e8:	3314      	adds	r3, #20
 80073ea:	3114      	adds	r1, #20
 80073ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80073f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073fc:	4295      	cmp	r5, r2
 80073fe:	d002      	beq.n	8007406 <__mcmp+0x2a>
 8007400:	d304      	bcc.n	800740c <__mcmp+0x30>
 8007402:	2001      	movs	r0, #1
 8007404:	bd30      	pop	{r4, r5, pc}
 8007406:	42a3      	cmp	r3, r4
 8007408:	d3f4      	bcc.n	80073f4 <__mcmp+0x18>
 800740a:	e7fb      	b.n	8007404 <__mcmp+0x28>
 800740c:	f04f 30ff 	mov.w	r0, #4294967295
 8007410:	e7f8      	b.n	8007404 <__mcmp+0x28>
	...

08007414 <__mdiff>:
 8007414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	460d      	mov	r5, r1
 800741a:	4607      	mov	r7, r0
 800741c:	4611      	mov	r1, r2
 800741e:	4628      	mov	r0, r5
 8007420:	4614      	mov	r4, r2
 8007422:	f7ff ffdb 	bl	80073dc <__mcmp>
 8007426:	1e06      	subs	r6, r0, #0
 8007428:	d111      	bne.n	800744e <__mdiff+0x3a>
 800742a:	4631      	mov	r1, r6
 800742c:	4638      	mov	r0, r7
 800742e:	f7ff fd57 	bl	8006ee0 <_Balloc>
 8007432:	4602      	mov	r2, r0
 8007434:	b928      	cbnz	r0, 8007442 <__mdiff+0x2e>
 8007436:	f240 2132 	movw	r1, #562	; 0x232
 800743a:	4b3a      	ldr	r3, [pc, #232]	; (8007524 <__mdiff+0x110>)
 800743c:	483a      	ldr	r0, [pc, #232]	; (8007528 <__mdiff+0x114>)
 800743e:	f000 f9d1 	bl	80077e4 <__assert_func>
 8007442:	2301      	movs	r3, #1
 8007444:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007448:	4610      	mov	r0, r2
 800744a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744e:	bfa4      	itt	ge
 8007450:	4623      	movge	r3, r4
 8007452:	462c      	movge	r4, r5
 8007454:	4638      	mov	r0, r7
 8007456:	6861      	ldr	r1, [r4, #4]
 8007458:	bfa6      	itte	ge
 800745a:	461d      	movge	r5, r3
 800745c:	2600      	movge	r6, #0
 800745e:	2601      	movlt	r6, #1
 8007460:	f7ff fd3e 	bl	8006ee0 <_Balloc>
 8007464:	4602      	mov	r2, r0
 8007466:	b918      	cbnz	r0, 8007470 <__mdiff+0x5c>
 8007468:	f44f 7110 	mov.w	r1, #576	; 0x240
 800746c:	4b2d      	ldr	r3, [pc, #180]	; (8007524 <__mdiff+0x110>)
 800746e:	e7e5      	b.n	800743c <__mdiff+0x28>
 8007470:	f102 0814 	add.w	r8, r2, #20
 8007474:	46c2      	mov	sl, r8
 8007476:	f04f 0c00 	mov.w	ip, #0
 800747a:	6927      	ldr	r7, [r4, #16]
 800747c:	60c6      	str	r6, [r0, #12]
 800747e:	692e      	ldr	r6, [r5, #16]
 8007480:	f104 0014 	add.w	r0, r4, #20
 8007484:	f105 0914 	add.w	r9, r5, #20
 8007488:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800748c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007490:	3410      	adds	r4, #16
 8007492:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007496:	f859 3b04 	ldr.w	r3, [r9], #4
 800749a:	fa1f f18b 	uxth.w	r1, fp
 800749e:	448c      	add	ip, r1
 80074a0:	b299      	uxth	r1, r3
 80074a2:	0c1b      	lsrs	r3, r3, #16
 80074a4:	ebac 0101 	sub.w	r1, ip, r1
 80074a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074ac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80074b0:	b289      	uxth	r1, r1
 80074b2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80074b6:	454e      	cmp	r6, r9
 80074b8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80074bc:	f84a 3b04 	str.w	r3, [sl], #4
 80074c0:	d8e7      	bhi.n	8007492 <__mdiff+0x7e>
 80074c2:	1b73      	subs	r3, r6, r5
 80074c4:	3b15      	subs	r3, #21
 80074c6:	f023 0303 	bic.w	r3, r3, #3
 80074ca:	3515      	adds	r5, #21
 80074cc:	3304      	adds	r3, #4
 80074ce:	42ae      	cmp	r6, r5
 80074d0:	bf38      	it	cc
 80074d2:	2304      	movcc	r3, #4
 80074d4:	4418      	add	r0, r3
 80074d6:	4443      	add	r3, r8
 80074d8:	461e      	mov	r6, r3
 80074da:	4605      	mov	r5, r0
 80074dc:	4575      	cmp	r5, lr
 80074de:	d30e      	bcc.n	80074fe <__mdiff+0xea>
 80074e0:	f10e 0103 	add.w	r1, lr, #3
 80074e4:	1a09      	subs	r1, r1, r0
 80074e6:	f021 0103 	bic.w	r1, r1, #3
 80074ea:	3803      	subs	r0, #3
 80074ec:	4586      	cmp	lr, r0
 80074ee:	bf38      	it	cc
 80074f0:	2100      	movcc	r1, #0
 80074f2:	4419      	add	r1, r3
 80074f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80074f8:	b18b      	cbz	r3, 800751e <__mdiff+0x10a>
 80074fa:	6117      	str	r7, [r2, #16]
 80074fc:	e7a4      	b.n	8007448 <__mdiff+0x34>
 80074fe:	f855 8b04 	ldr.w	r8, [r5], #4
 8007502:	fa1f f188 	uxth.w	r1, r8
 8007506:	4461      	add	r1, ip
 8007508:	140c      	asrs	r4, r1, #16
 800750a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800750e:	b289      	uxth	r1, r1
 8007510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007514:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007518:	f846 1b04 	str.w	r1, [r6], #4
 800751c:	e7de      	b.n	80074dc <__mdiff+0xc8>
 800751e:	3f01      	subs	r7, #1
 8007520:	e7e8      	b.n	80074f4 <__mdiff+0xe0>
 8007522:	bf00      	nop
 8007524:	08008427 	.word	0x08008427
 8007528:	08008438 	.word	0x08008438

0800752c <__d2b>:
 800752c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007530:	2101      	movs	r1, #1
 8007532:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007536:	4690      	mov	r8, r2
 8007538:	461d      	mov	r5, r3
 800753a:	f7ff fcd1 	bl	8006ee0 <_Balloc>
 800753e:	4604      	mov	r4, r0
 8007540:	b930      	cbnz	r0, 8007550 <__d2b+0x24>
 8007542:	4602      	mov	r2, r0
 8007544:	f240 310a 	movw	r1, #778	; 0x30a
 8007548:	4b24      	ldr	r3, [pc, #144]	; (80075dc <__d2b+0xb0>)
 800754a:	4825      	ldr	r0, [pc, #148]	; (80075e0 <__d2b+0xb4>)
 800754c:	f000 f94a 	bl	80077e4 <__assert_func>
 8007550:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007554:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007558:	bb2d      	cbnz	r5, 80075a6 <__d2b+0x7a>
 800755a:	9301      	str	r3, [sp, #4]
 800755c:	f1b8 0300 	subs.w	r3, r8, #0
 8007560:	d026      	beq.n	80075b0 <__d2b+0x84>
 8007562:	4668      	mov	r0, sp
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	f7ff fd83 	bl	8007070 <__lo0bits>
 800756a:	9900      	ldr	r1, [sp, #0]
 800756c:	b1f0      	cbz	r0, 80075ac <__d2b+0x80>
 800756e:	9a01      	ldr	r2, [sp, #4]
 8007570:	f1c0 0320 	rsb	r3, r0, #32
 8007574:	fa02 f303 	lsl.w	r3, r2, r3
 8007578:	430b      	orrs	r3, r1
 800757a:	40c2      	lsrs	r2, r0
 800757c:	6163      	str	r3, [r4, #20]
 800757e:	9201      	str	r2, [sp, #4]
 8007580:	9b01      	ldr	r3, [sp, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	bf14      	ite	ne
 8007586:	2102      	movne	r1, #2
 8007588:	2101      	moveq	r1, #1
 800758a:	61a3      	str	r3, [r4, #24]
 800758c:	6121      	str	r1, [r4, #16]
 800758e:	b1c5      	cbz	r5, 80075c2 <__d2b+0x96>
 8007590:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007594:	4405      	add	r5, r0
 8007596:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800759a:	603d      	str	r5, [r7, #0]
 800759c:	6030      	str	r0, [r6, #0]
 800759e:	4620      	mov	r0, r4
 80075a0:	b002      	add	sp, #8
 80075a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075aa:	e7d6      	b.n	800755a <__d2b+0x2e>
 80075ac:	6161      	str	r1, [r4, #20]
 80075ae:	e7e7      	b.n	8007580 <__d2b+0x54>
 80075b0:	a801      	add	r0, sp, #4
 80075b2:	f7ff fd5d 	bl	8007070 <__lo0bits>
 80075b6:	2101      	movs	r1, #1
 80075b8:	9b01      	ldr	r3, [sp, #4]
 80075ba:	6121      	str	r1, [r4, #16]
 80075bc:	6163      	str	r3, [r4, #20]
 80075be:	3020      	adds	r0, #32
 80075c0:	e7e5      	b.n	800758e <__d2b+0x62>
 80075c2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80075c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075ca:	6038      	str	r0, [r7, #0]
 80075cc:	6918      	ldr	r0, [r3, #16]
 80075ce:	f7ff fd2f 	bl	8007030 <__hi0bits>
 80075d2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80075d6:	6031      	str	r1, [r6, #0]
 80075d8:	e7e1      	b.n	800759e <__d2b+0x72>
 80075da:	bf00      	nop
 80075dc:	08008427 	.word	0x08008427
 80075e0:	08008438 	.word	0x08008438

080075e4 <_calloc_r>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	fba1 5402 	umull	r5, r4, r1, r2
 80075ea:	b934      	cbnz	r4, 80075fa <_calloc_r+0x16>
 80075ec:	4629      	mov	r1, r5
 80075ee:	f000 f875 	bl	80076dc <_malloc_r>
 80075f2:	4606      	mov	r6, r0
 80075f4:	b928      	cbnz	r0, 8007602 <_calloc_r+0x1e>
 80075f6:	4630      	mov	r0, r6
 80075f8:	bd70      	pop	{r4, r5, r6, pc}
 80075fa:	220c      	movs	r2, #12
 80075fc:	2600      	movs	r6, #0
 80075fe:	6002      	str	r2, [r0, #0]
 8007600:	e7f9      	b.n	80075f6 <_calloc_r+0x12>
 8007602:	462a      	mov	r2, r5
 8007604:	4621      	mov	r1, r4
 8007606:	f7fe f96d 	bl	80058e4 <memset>
 800760a:	e7f4      	b.n	80075f6 <_calloc_r+0x12>

0800760c <_free_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4605      	mov	r5, r0
 8007610:	2900      	cmp	r1, #0
 8007612:	d040      	beq.n	8007696 <_free_r+0x8a>
 8007614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007618:	1f0c      	subs	r4, r1, #4
 800761a:	2b00      	cmp	r3, #0
 800761c:	bfb8      	it	lt
 800761e:	18e4      	addlt	r4, r4, r3
 8007620:	f000 f922 	bl	8007868 <__malloc_lock>
 8007624:	4a1c      	ldr	r2, [pc, #112]	; (8007698 <_free_r+0x8c>)
 8007626:	6813      	ldr	r3, [r2, #0]
 8007628:	b933      	cbnz	r3, 8007638 <_free_r+0x2c>
 800762a:	6063      	str	r3, [r4, #4]
 800762c:	6014      	str	r4, [r2, #0]
 800762e:	4628      	mov	r0, r5
 8007630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007634:	f000 b91e 	b.w	8007874 <__malloc_unlock>
 8007638:	42a3      	cmp	r3, r4
 800763a:	d908      	bls.n	800764e <_free_r+0x42>
 800763c:	6820      	ldr	r0, [r4, #0]
 800763e:	1821      	adds	r1, r4, r0
 8007640:	428b      	cmp	r3, r1
 8007642:	bf01      	itttt	eq
 8007644:	6819      	ldreq	r1, [r3, #0]
 8007646:	685b      	ldreq	r3, [r3, #4]
 8007648:	1809      	addeq	r1, r1, r0
 800764a:	6021      	streq	r1, [r4, #0]
 800764c:	e7ed      	b.n	800762a <_free_r+0x1e>
 800764e:	461a      	mov	r2, r3
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	b10b      	cbz	r3, 8007658 <_free_r+0x4c>
 8007654:	42a3      	cmp	r3, r4
 8007656:	d9fa      	bls.n	800764e <_free_r+0x42>
 8007658:	6811      	ldr	r1, [r2, #0]
 800765a:	1850      	adds	r0, r2, r1
 800765c:	42a0      	cmp	r0, r4
 800765e:	d10b      	bne.n	8007678 <_free_r+0x6c>
 8007660:	6820      	ldr	r0, [r4, #0]
 8007662:	4401      	add	r1, r0
 8007664:	1850      	adds	r0, r2, r1
 8007666:	4283      	cmp	r3, r0
 8007668:	6011      	str	r1, [r2, #0]
 800766a:	d1e0      	bne.n	800762e <_free_r+0x22>
 800766c:	6818      	ldr	r0, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4401      	add	r1, r0
 8007672:	6011      	str	r1, [r2, #0]
 8007674:	6053      	str	r3, [r2, #4]
 8007676:	e7da      	b.n	800762e <_free_r+0x22>
 8007678:	d902      	bls.n	8007680 <_free_r+0x74>
 800767a:	230c      	movs	r3, #12
 800767c:	602b      	str	r3, [r5, #0]
 800767e:	e7d6      	b.n	800762e <_free_r+0x22>
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	1821      	adds	r1, r4, r0
 8007684:	428b      	cmp	r3, r1
 8007686:	bf01      	itttt	eq
 8007688:	6819      	ldreq	r1, [r3, #0]
 800768a:	685b      	ldreq	r3, [r3, #4]
 800768c:	1809      	addeq	r1, r1, r0
 800768e:	6021      	streq	r1, [r4, #0]
 8007690:	6063      	str	r3, [r4, #4]
 8007692:	6054      	str	r4, [r2, #4]
 8007694:	e7cb      	b.n	800762e <_free_r+0x22>
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	20000580 	.word	0x20000580

0800769c <sbrk_aligned>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	4e0e      	ldr	r6, [pc, #56]	; (80076d8 <sbrk_aligned+0x3c>)
 80076a0:	460c      	mov	r4, r1
 80076a2:	6831      	ldr	r1, [r6, #0]
 80076a4:	4605      	mov	r5, r0
 80076a6:	b911      	cbnz	r1, 80076ae <sbrk_aligned+0x12>
 80076a8:	f000 f88c 	bl	80077c4 <_sbrk_r>
 80076ac:	6030      	str	r0, [r6, #0]
 80076ae:	4621      	mov	r1, r4
 80076b0:	4628      	mov	r0, r5
 80076b2:	f000 f887 	bl	80077c4 <_sbrk_r>
 80076b6:	1c43      	adds	r3, r0, #1
 80076b8:	d00a      	beq.n	80076d0 <sbrk_aligned+0x34>
 80076ba:	1cc4      	adds	r4, r0, #3
 80076bc:	f024 0403 	bic.w	r4, r4, #3
 80076c0:	42a0      	cmp	r0, r4
 80076c2:	d007      	beq.n	80076d4 <sbrk_aligned+0x38>
 80076c4:	1a21      	subs	r1, r4, r0
 80076c6:	4628      	mov	r0, r5
 80076c8:	f000 f87c 	bl	80077c4 <_sbrk_r>
 80076cc:	3001      	adds	r0, #1
 80076ce:	d101      	bne.n	80076d4 <sbrk_aligned+0x38>
 80076d0:	f04f 34ff 	mov.w	r4, #4294967295
 80076d4:	4620      	mov	r0, r4
 80076d6:	bd70      	pop	{r4, r5, r6, pc}
 80076d8:	20000584 	.word	0x20000584

080076dc <_malloc_r>:
 80076dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e0:	1ccd      	adds	r5, r1, #3
 80076e2:	f025 0503 	bic.w	r5, r5, #3
 80076e6:	3508      	adds	r5, #8
 80076e8:	2d0c      	cmp	r5, #12
 80076ea:	bf38      	it	cc
 80076ec:	250c      	movcc	r5, #12
 80076ee:	2d00      	cmp	r5, #0
 80076f0:	4607      	mov	r7, r0
 80076f2:	db01      	blt.n	80076f8 <_malloc_r+0x1c>
 80076f4:	42a9      	cmp	r1, r5
 80076f6:	d905      	bls.n	8007704 <_malloc_r+0x28>
 80076f8:	230c      	movs	r3, #12
 80076fa:	2600      	movs	r6, #0
 80076fc:	603b      	str	r3, [r7, #0]
 80076fe:	4630      	mov	r0, r6
 8007700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007704:	4e2e      	ldr	r6, [pc, #184]	; (80077c0 <_malloc_r+0xe4>)
 8007706:	f000 f8af 	bl	8007868 <__malloc_lock>
 800770a:	6833      	ldr	r3, [r6, #0]
 800770c:	461c      	mov	r4, r3
 800770e:	bb34      	cbnz	r4, 800775e <_malloc_r+0x82>
 8007710:	4629      	mov	r1, r5
 8007712:	4638      	mov	r0, r7
 8007714:	f7ff ffc2 	bl	800769c <sbrk_aligned>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	4604      	mov	r4, r0
 800771c:	d14d      	bne.n	80077ba <_malloc_r+0xde>
 800771e:	6834      	ldr	r4, [r6, #0]
 8007720:	4626      	mov	r6, r4
 8007722:	2e00      	cmp	r6, #0
 8007724:	d140      	bne.n	80077a8 <_malloc_r+0xcc>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	4631      	mov	r1, r6
 800772a:	4638      	mov	r0, r7
 800772c:	eb04 0803 	add.w	r8, r4, r3
 8007730:	f000 f848 	bl	80077c4 <_sbrk_r>
 8007734:	4580      	cmp	r8, r0
 8007736:	d13a      	bne.n	80077ae <_malloc_r+0xd2>
 8007738:	6821      	ldr	r1, [r4, #0]
 800773a:	3503      	adds	r5, #3
 800773c:	1a6d      	subs	r5, r5, r1
 800773e:	f025 0503 	bic.w	r5, r5, #3
 8007742:	3508      	adds	r5, #8
 8007744:	2d0c      	cmp	r5, #12
 8007746:	bf38      	it	cc
 8007748:	250c      	movcc	r5, #12
 800774a:	4638      	mov	r0, r7
 800774c:	4629      	mov	r1, r5
 800774e:	f7ff ffa5 	bl	800769c <sbrk_aligned>
 8007752:	3001      	adds	r0, #1
 8007754:	d02b      	beq.n	80077ae <_malloc_r+0xd2>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	442b      	add	r3, r5
 800775a:	6023      	str	r3, [r4, #0]
 800775c:	e00e      	b.n	800777c <_malloc_r+0xa0>
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	1b52      	subs	r2, r2, r5
 8007762:	d41e      	bmi.n	80077a2 <_malloc_r+0xc6>
 8007764:	2a0b      	cmp	r2, #11
 8007766:	d916      	bls.n	8007796 <_malloc_r+0xba>
 8007768:	1961      	adds	r1, r4, r5
 800776a:	42a3      	cmp	r3, r4
 800776c:	6025      	str	r5, [r4, #0]
 800776e:	bf18      	it	ne
 8007770:	6059      	strne	r1, [r3, #4]
 8007772:	6863      	ldr	r3, [r4, #4]
 8007774:	bf08      	it	eq
 8007776:	6031      	streq	r1, [r6, #0]
 8007778:	5162      	str	r2, [r4, r5]
 800777a:	604b      	str	r3, [r1, #4]
 800777c:	4638      	mov	r0, r7
 800777e:	f104 060b 	add.w	r6, r4, #11
 8007782:	f000 f877 	bl	8007874 <__malloc_unlock>
 8007786:	f026 0607 	bic.w	r6, r6, #7
 800778a:	1d23      	adds	r3, r4, #4
 800778c:	1af2      	subs	r2, r6, r3
 800778e:	d0b6      	beq.n	80076fe <_malloc_r+0x22>
 8007790:	1b9b      	subs	r3, r3, r6
 8007792:	50a3      	str	r3, [r4, r2]
 8007794:	e7b3      	b.n	80076fe <_malloc_r+0x22>
 8007796:	6862      	ldr	r2, [r4, #4]
 8007798:	42a3      	cmp	r3, r4
 800779a:	bf0c      	ite	eq
 800779c:	6032      	streq	r2, [r6, #0]
 800779e:	605a      	strne	r2, [r3, #4]
 80077a0:	e7ec      	b.n	800777c <_malloc_r+0xa0>
 80077a2:	4623      	mov	r3, r4
 80077a4:	6864      	ldr	r4, [r4, #4]
 80077a6:	e7b2      	b.n	800770e <_malloc_r+0x32>
 80077a8:	4634      	mov	r4, r6
 80077aa:	6876      	ldr	r6, [r6, #4]
 80077ac:	e7b9      	b.n	8007722 <_malloc_r+0x46>
 80077ae:	230c      	movs	r3, #12
 80077b0:	4638      	mov	r0, r7
 80077b2:	603b      	str	r3, [r7, #0]
 80077b4:	f000 f85e 	bl	8007874 <__malloc_unlock>
 80077b8:	e7a1      	b.n	80076fe <_malloc_r+0x22>
 80077ba:	6025      	str	r5, [r4, #0]
 80077bc:	e7de      	b.n	800777c <_malloc_r+0xa0>
 80077be:	bf00      	nop
 80077c0:	20000580 	.word	0x20000580

080077c4 <_sbrk_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	2300      	movs	r3, #0
 80077c8:	4d05      	ldr	r5, [pc, #20]	; (80077e0 <_sbrk_r+0x1c>)
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	602b      	str	r3, [r5, #0]
 80077d0:	f7fa fd3a 	bl	8002248 <_sbrk>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d102      	bne.n	80077de <_sbrk_r+0x1a>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	b103      	cbz	r3, 80077de <_sbrk_r+0x1a>
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	20000588 	.word	0x20000588

080077e4 <__assert_func>:
 80077e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077e6:	4614      	mov	r4, r2
 80077e8:	461a      	mov	r2, r3
 80077ea:	4b09      	ldr	r3, [pc, #36]	; (8007810 <__assert_func+0x2c>)
 80077ec:	4605      	mov	r5, r0
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68d8      	ldr	r0, [r3, #12]
 80077f2:	b14c      	cbz	r4, 8007808 <__assert_func+0x24>
 80077f4:	4b07      	ldr	r3, [pc, #28]	; (8007814 <__assert_func+0x30>)
 80077f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077fa:	9100      	str	r1, [sp, #0]
 80077fc:	462b      	mov	r3, r5
 80077fe:	4906      	ldr	r1, [pc, #24]	; (8007818 <__assert_func+0x34>)
 8007800:	f000 f80e 	bl	8007820 <fiprintf>
 8007804:	f000 fa62 	bl	8007ccc <abort>
 8007808:	4b04      	ldr	r3, [pc, #16]	; (800781c <__assert_func+0x38>)
 800780a:	461c      	mov	r4, r3
 800780c:	e7f3      	b.n	80077f6 <__assert_func+0x12>
 800780e:	bf00      	nop
 8007810:	20000020 	.word	0x20000020
 8007814:	08008594 	.word	0x08008594
 8007818:	080085a1 	.word	0x080085a1
 800781c:	080085cf 	.word	0x080085cf

08007820 <fiprintf>:
 8007820:	b40e      	push	{r1, r2, r3}
 8007822:	b503      	push	{r0, r1, lr}
 8007824:	4601      	mov	r1, r0
 8007826:	ab03      	add	r3, sp, #12
 8007828:	4805      	ldr	r0, [pc, #20]	; (8007840 <fiprintf+0x20>)
 800782a:	f853 2b04 	ldr.w	r2, [r3], #4
 800782e:	6800      	ldr	r0, [r0, #0]
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	f000 f84d 	bl	80078d0 <_vfiprintf_r>
 8007836:	b002      	add	sp, #8
 8007838:	f85d eb04 	ldr.w	lr, [sp], #4
 800783c:	b003      	add	sp, #12
 800783e:	4770      	bx	lr
 8007840:	20000020 	.word	0x20000020

08007844 <__ascii_mbtowc>:
 8007844:	b082      	sub	sp, #8
 8007846:	b901      	cbnz	r1, 800784a <__ascii_mbtowc+0x6>
 8007848:	a901      	add	r1, sp, #4
 800784a:	b142      	cbz	r2, 800785e <__ascii_mbtowc+0x1a>
 800784c:	b14b      	cbz	r3, 8007862 <__ascii_mbtowc+0x1e>
 800784e:	7813      	ldrb	r3, [r2, #0]
 8007850:	600b      	str	r3, [r1, #0]
 8007852:	7812      	ldrb	r2, [r2, #0]
 8007854:	1e10      	subs	r0, r2, #0
 8007856:	bf18      	it	ne
 8007858:	2001      	movne	r0, #1
 800785a:	b002      	add	sp, #8
 800785c:	4770      	bx	lr
 800785e:	4610      	mov	r0, r2
 8007860:	e7fb      	b.n	800785a <__ascii_mbtowc+0x16>
 8007862:	f06f 0001 	mvn.w	r0, #1
 8007866:	e7f8      	b.n	800785a <__ascii_mbtowc+0x16>

08007868 <__malloc_lock>:
 8007868:	4801      	ldr	r0, [pc, #4]	; (8007870 <__malloc_lock+0x8>)
 800786a:	f000 bbeb 	b.w	8008044 <__retarget_lock_acquire_recursive>
 800786e:	bf00      	nop
 8007870:	2000058c 	.word	0x2000058c

08007874 <__malloc_unlock>:
 8007874:	4801      	ldr	r0, [pc, #4]	; (800787c <__malloc_unlock+0x8>)
 8007876:	f000 bbe6 	b.w	8008046 <__retarget_lock_release_recursive>
 800787a:	bf00      	nop
 800787c:	2000058c 	.word	0x2000058c

08007880 <__sfputc_r>:
 8007880:	6893      	ldr	r3, [r2, #8]
 8007882:	b410      	push	{r4}
 8007884:	3b01      	subs	r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	6093      	str	r3, [r2, #8]
 800788a:	da07      	bge.n	800789c <__sfputc_r+0x1c>
 800788c:	6994      	ldr	r4, [r2, #24]
 800788e:	42a3      	cmp	r3, r4
 8007890:	db01      	blt.n	8007896 <__sfputc_r+0x16>
 8007892:	290a      	cmp	r1, #10
 8007894:	d102      	bne.n	800789c <__sfputc_r+0x1c>
 8007896:	bc10      	pop	{r4}
 8007898:	f000 b94a 	b.w	8007b30 <__swbuf_r>
 800789c:	6813      	ldr	r3, [r2, #0]
 800789e:	1c58      	adds	r0, r3, #1
 80078a0:	6010      	str	r0, [r2, #0]
 80078a2:	7019      	strb	r1, [r3, #0]
 80078a4:	4608      	mov	r0, r1
 80078a6:	bc10      	pop	{r4}
 80078a8:	4770      	bx	lr

080078aa <__sfputs_r>:
 80078aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ac:	4606      	mov	r6, r0
 80078ae:	460f      	mov	r7, r1
 80078b0:	4614      	mov	r4, r2
 80078b2:	18d5      	adds	r5, r2, r3
 80078b4:	42ac      	cmp	r4, r5
 80078b6:	d101      	bne.n	80078bc <__sfputs_r+0x12>
 80078b8:	2000      	movs	r0, #0
 80078ba:	e007      	b.n	80078cc <__sfputs_r+0x22>
 80078bc:	463a      	mov	r2, r7
 80078be:	4630      	mov	r0, r6
 80078c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c4:	f7ff ffdc 	bl	8007880 <__sfputc_r>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d1f3      	bne.n	80078b4 <__sfputs_r+0xa>
 80078cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078d0 <_vfiprintf_r>:
 80078d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d4:	460d      	mov	r5, r1
 80078d6:	4614      	mov	r4, r2
 80078d8:	4698      	mov	r8, r3
 80078da:	4606      	mov	r6, r0
 80078dc:	b09d      	sub	sp, #116	; 0x74
 80078de:	b118      	cbz	r0, 80078e8 <_vfiprintf_r+0x18>
 80078e0:	6983      	ldr	r3, [r0, #24]
 80078e2:	b90b      	cbnz	r3, 80078e8 <_vfiprintf_r+0x18>
 80078e4:	f000 fb10 	bl	8007f08 <__sinit>
 80078e8:	4b89      	ldr	r3, [pc, #548]	; (8007b10 <_vfiprintf_r+0x240>)
 80078ea:	429d      	cmp	r5, r3
 80078ec:	d11b      	bne.n	8007926 <_vfiprintf_r+0x56>
 80078ee:	6875      	ldr	r5, [r6, #4]
 80078f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078f2:	07d9      	lsls	r1, r3, #31
 80078f4:	d405      	bmi.n	8007902 <_vfiprintf_r+0x32>
 80078f6:	89ab      	ldrh	r3, [r5, #12]
 80078f8:	059a      	lsls	r2, r3, #22
 80078fa:	d402      	bmi.n	8007902 <_vfiprintf_r+0x32>
 80078fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078fe:	f000 fba1 	bl	8008044 <__retarget_lock_acquire_recursive>
 8007902:	89ab      	ldrh	r3, [r5, #12]
 8007904:	071b      	lsls	r3, r3, #28
 8007906:	d501      	bpl.n	800790c <_vfiprintf_r+0x3c>
 8007908:	692b      	ldr	r3, [r5, #16]
 800790a:	b9eb      	cbnz	r3, 8007948 <_vfiprintf_r+0x78>
 800790c:	4629      	mov	r1, r5
 800790e:	4630      	mov	r0, r6
 8007910:	f000 f96e 	bl	8007bf0 <__swsetup_r>
 8007914:	b1c0      	cbz	r0, 8007948 <_vfiprintf_r+0x78>
 8007916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007918:	07dc      	lsls	r4, r3, #31
 800791a:	d50e      	bpl.n	800793a <_vfiprintf_r+0x6a>
 800791c:	f04f 30ff 	mov.w	r0, #4294967295
 8007920:	b01d      	add	sp, #116	; 0x74
 8007922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007926:	4b7b      	ldr	r3, [pc, #492]	; (8007b14 <_vfiprintf_r+0x244>)
 8007928:	429d      	cmp	r5, r3
 800792a:	d101      	bne.n	8007930 <_vfiprintf_r+0x60>
 800792c:	68b5      	ldr	r5, [r6, #8]
 800792e:	e7df      	b.n	80078f0 <_vfiprintf_r+0x20>
 8007930:	4b79      	ldr	r3, [pc, #484]	; (8007b18 <_vfiprintf_r+0x248>)
 8007932:	429d      	cmp	r5, r3
 8007934:	bf08      	it	eq
 8007936:	68f5      	ldreq	r5, [r6, #12]
 8007938:	e7da      	b.n	80078f0 <_vfiprintf_r+0x20>
 800793a:	89ab      	ldrh	r3, [r5, #12]
 800793c:	0598      	lsls	r0, r3, #22
 800793e:	d4ed      	bmi.n	800791c <_vfiprintf_r+0x4c>
 8007940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007942:	f000 fb80 	bl	8008046 <__retarget_lock_release_recursive>
 8007946:	e7e9      	b.n	800791c <_vfiprintf_r+0x4c>
 8007948:	2300      	movs	r3, #0
 800794a:	9309      	str	r3, [sp, #36]	; 0x24
 800794c:	2320      	movs	r3, #32
 800794e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007952:	2330      	movs	r3, #48	; 0x30
 8007954:	f04f 0901 	mov.w	r9, #1
 8007958:	f8cd 800c 	str.w	r8, [sp, #12]
 800795c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007b1c <_vfiprintf_r+0x24c>
 8007960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007964:	4623      	mov	r3, r4
 8007966:	469a      	mov	sl, r3
 8007968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800796c:	b10a      	cbz	r2, 8007972 <_vfiprintf_r+0xa2>
 800796e:	2a25      	cmp	r2, #37	; 0x25
 8007970:	d1f9      	bne.n	8007966 <_vfiprintf_r+0x96>
 8007972:	ebba 0b04 	subs.w	fp, sl, r4
 8007976:	d00b      	beq.n	8007990 <_vfiprintf_r+0xc0>
 8007978:	465b      	mov	r3, fp
 800797a:	4622      	mov	r2, r4
 800797c:	4629      	mov	r1, r5
 800797e:	4630      	mov	r0, r6
 8007980:	f7ff ff93 	bl	80078aa <__sfputs_r>
 8007984:	3001      	adds	r0, #1
 8007986:	f000 80aa 	beq.w	8007ade <_vfiprintf_r+0x20e>
 800798a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800798c:	445a      	add	r2, fp
 800798e:	9209      	str	r2, [sp, #36]	; 0x24
 8007990:	f89a 3000 	ldrb.w	r3, [sl]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 80a2 	beq.w	8007ade <_vfiprintf_r+0x20e>
 800799a:	2300      	movs	r3, #0
 800799c:	f04f 32ff 	mov.w	r2, #4294967295
 80079a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079a4:	f10a 0a01 	add.w	sl, sl, #1
 80079a8:	9304      	str	r3, [sp, #16]
 80079aa:	9307      	str	r3, [sp, #28]
 80079ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079b0:	931a      	str	r3, [sp, #104]	; 0x68
 80079b2:	4654      	mov	r4, sl
 80079b4:	2205      	movs	r2, #5
 80079b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ba:	4858      	ldr	r0, [pc, #352]	; (8007b1c <_vfiprintf_r+0x24c>)
 80079bc:	f7ff fa82 	bl	8006ec4 <memchr>
 80079c0:	9a04      	ldr	r2, [sp, #16]
 80079c2:	b9d8      	cbnz	r0, 80079fc <_vfiprintf_r+0x12c>
 80079c4:	06d1      	lsls	r1, r2, #27
 80079c6:	bf44      	itt	mi
 80079c8:	2320      	movmi	r3, #32
 80079ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079ce:	0713      	lsls	r3, r2, #28
 80079d0:	bf44      	itt	mi
 80079d2:	232b      	movmi	r3, #43	; 0x2b
 80079d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d8:	f89a 3000 	ldrb.w	r3, [sl]
 80079dc:	2b2a      	cmp	r3, #42	; 0x2a
 80079de:	d015      	beq.n	8007a0c <_vfiprintf_r+0x13c>
 80079e0:	4654      	mov	r4, sl
 80079e2:	2000      	movs	r0, #0
 80079e4:	f04f 0c0a 	mov.w	ip, #10
 80079e8:	9a07      	ldr	r2, [sp, #28]
 80079ea:	4621      	mov	r1, r4
 80079ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079f0:	3b30      	subs	r3, #48	; 0x30
 80079f2:	2b09      	cmp	r3, #9
 80079f4:	d94e      	bls.n	8007a94 <_vfiprintf_r+0x1c4>
 80079f6:	b1b0      	cbz	r0, 8007a26 <_vfiprintf_r+0x156>
 80079f8:	9207      	str	r2, [sp, #28]
 80079fa:	e014      	b.n	8007a26 <_vfiprintf_r+0x156>
 80079fc:	eba0 0308 	sub.w	r3, r0, r8
 8007a00:	fa09 f303 	lsl.w	r3, r9, r3
 8007a04:	4313      	orrs	r3, r2
 8007a06:	46a2      	mov	sl, r4
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	e7d2      	b.n	80079b2 <_vfiprintf_r+0xe2>
 8007a0c:	9b03      	ldr	r3, [sp, #12]
 8007a0e:	1d19      	adds	r1, r3, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	9103      	str	r1, [sp, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	bfbb      	ittet	lt
 8007a18:	425b      	neglt	r3, r3
 8007a1a:	f042 0202 	orrlt.w	r2, r2, #2
 8007a1e:	9307      	strge	r3, [sp, #28]
 8007a20:	9307      	strlt	r3, [sp, #28]
 8007a22:	bfb8      	it	lt
 8007a24:	9204      	strlt	r2, [sp, #16]
 8007a26:	7823      	ldrb	r3, [r4, #0]
 8007a28:	2b2e      	cmp	r3, #46	; 0x2e
 8007a2a:	d10c      	bne.n	8007a46 <_vfiprintf_r+0x176>
 8007a2c:	7863      	ldrb	r3, [r4, #1]
 8007a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a30:	d135      	bne.n	8007a9e <_vfiprintf_r+0x1ce>
 8007a32:	9b03      	ldr	r3, [sp, #12]
 8007a34:	3402      	adds	r4, #2
 8007a36:	1d1a      	adds	r2, r3, #4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	9203      	str	r2, [sp, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bfb8      	it	lt
 8007a40:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a44:	9305      	str	r3, [sp, #20]
 8007a46:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007b20 <_vfiprintf_r+0x250>
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	4650      	mov	r0, sl
 8007a4e:	7821      	ldrb	r1, [r4, #0]
 8007a50:	f7ff fa38 	bl	8006ec4 <memchr>
 8007a54:	b140      	cbz	r0, 8007a68 <_vfiprintf_r+0x198>
 8007a56:	2340      	movs	r3, #64	; 0x40
 8007a58:	eba0 000a 	sub.w	r0, r0, sl
 8007a5c:	fa03 f000 	lsl.w	r0, r3, r0
 8007a60:	9b04      	ldr	r3, [sp, #16]
 8007a62:	3401      	adds	r4, #1
 8007a64:	4303      	orrs	r3, r0
 8007a66:	9304      	str	r3, [sp, #16]
 8007a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a6c:	2206      	movs	r2, #6
 8007a6e:	482d      	ldr	r0, [pc, #180]	; (8007b24 <_vfiprintf_r+0x254>)
 8007a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a74:	f7ff fa26 	bl	8006ec4 <memchr>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d03f      	beq.n	8007afc <_vfiprintf_r+0x22c>
 8007a7c:	4b2a      	ldr	r3, [pc, #168]	; (8007b28 <_vfiprintf_r+0x258>)
 8007a7e:	bb1b      	cbnz	r3, 8007ac8 <_vfiprintf_r+0x1f8>
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	3307      	adds	r3, #7
 8007a84:	f023 0307 	bic.w	r3, r3, #7
 8007a88:	3308      	adds	r3, #8
 8007a8a:	9303      	str	r3, [sp, #12]
 8007a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8e:	443b      	add	r3, r7
 8007a90:	9309      	str	r3, [sp, #36]	; 0x24
 8007a92:	e767      	b.n	8007964 <_vfiprintf_r+0x94>
 8007a94:	460c      	mov	r4, r1
 8007a96:	2001      	movs	r0, #1
 8007a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a9c:	e7a5      	b.n	80079ea <_vfiprintf_r+0x11a>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f04f 0c0a 	mov.w	ip, #10
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	3401      	adds	r4, #1
 8007aa8:	9305      	str	r3, [sp, #20]
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ab0:	3a30      	subs	r2, #48	; 0x30
 8007ab2:	2a09      	cmp	r2, #9
 8007ab4:	d903      	bls.n	8007abe <_vfiprintf_r+0x1ee>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0c5      	beq.n	8007a46 <_vfiprintf_r+0x176>
 8007aba:	9105      	str	r1, [sp, #20]
 8007abc:	e7c3      	b.n	8007a46 <_vfiprintf_r+0x176>
 8007abe:	4604      	mov	r4, r0
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ac6:	e7f0      	b.n	8007aaa <_vfiprintf_r+0x1da>
 8007ac8:	ab03      	add	r3, sp, #12
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	462a      	mov	r2, r5
 8007ace:	4630      	mov	r0, r6
 8007ad0:	4b16      	ldr	r3, [pc, #88]	; (8007b2c <_vfiprintf_r+0x25c>)
 8007ad2:	a904      	add	r1, sp, #16
 8007ad4:	f7fd ffac 	bl	8005a30 <_printf_float>
 8007ad8:	4607      	mov	r7, r0
 8007ada:	1c78      	adds	r0, r7, #1
 8007adc:	d1d6      	bne.n	8007a8c <_vfiprintf_r+0x1bc>
 8007ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ae0:	07d9      	lsls	r1, r3, #31
 8007ae2:	d405      	bmi.n	8007af0 <_vfiprintf_r+0x220>
 8007ae4:	89ab      	ldrh	r3, [r5, #12]
 8007ae6:	059a      	lsls	r2, r3, #22
 8007ae8:	d402      	bmi.n	8007af0 <_vfiprintf_r+0x220>
 8007aea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aec:	f000 faab 	bl	8008046 <__retarget_lock_release_recursive>
 8007af0:	89ab      	ldrh	r3, [r5, #12]
 8007af2:	065b      	lsls	r3, r3, #25
 8007af4:	f53f af12 	bmi.w	800791c <_vfiprintf_r+0x4c>
 8007af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007afa:	e711      	b.n	8007920 <_vfiprintf_r+0x50>
 8007afc:	ab03      	add	r3, sp, #12
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	462a      	mov	r2, r5
 8007b02:	4630      	mov	r0, r6
 8007b04:	4b09      	ldr	r3, [pc, #36]	; (8007b2c <_vfiprintf_r+0x25c>)
 8007b06:	a904      	add	r1, sp, #16
 8007b08:	f7fe fa2e 	bl	8005f68 <_printf_i>
 8007b0c:	e7e4      	b.n	8007ad8 <_vfiprintf_r+0x208>
 8007b0e:	bf00      	nop
 8007b10:	0800870c 	.word	0x0800870c
 8007b14:	0800872c 	.word	0x0800872c
 8007b18:	080086ec 	.word	0x080086ec
 8007b1c:	080085da 	.word	0x080085da
 8007b20:	080085e0 	.word	0x080085e0
 8007b24:	080085e4 	.word	0x080085e4
 8007b28:	08005a31 	.word	0x08005a31
 8007b2c:	080078ab 	.word	0x080078ab

08007b30 <__swbuf_r>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	460e      	mov	r6, r1
 8007b34:	4614      	mov	r4, r2
 8007b36:	4605      	mov	r5, r0
 8007b38:	b118      	cbz	r0, 8007b42 <__swbuf_r+0x12>
 8007b3a:	6983      	ldr	r3, [r0, #24]
 8007b3c:	b90b      	cbnz	r3, 8007b42 <__swbuf_r+0x12>
 8007b3e:	f000 f9e3 	bl	8007f08 <__sinit>
 8007b42:	4b21      	ldr	r3, [pc, #132]	; (8007bc8 <__swbuf_r+0x98>)
 8007b44:	429c      	cmp	r4, r3
 8007b46:	d12b      	bne.n	8007ba0 <__swbuf_r+0x70>
 8007b48:	686c      	ldr	r4, [r5, #4]
 8007b4a:	69a3      	ldr	r3, [r4, #24]
 8007b4c:	60a3      	str	r3, [r4, #8]
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	071a      	lsls	r2, r3, #28
 8007b52:	d52f      	bpl.n	8007bb4 <__swbuf_r+0x84>
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	b36b      	cbz	r3, 8007bb4 <__swbuf_r+0x84>
 8007b58:	6923      	ldr	r3, [r4, #16]
 8007b5a:	6820      	ldr	r0, [r4, #0]
 8007b5c:	b2f6      	uxtb	r6, r6
 8007b5e:	1ac0      	subs	r0, r0, r3
 8007b60:	6963      	ldr	r3, [r4, #20]
 8007b62:	4637      	mov	r7, r6
 8007b64:	4283      	cmp	r3, r0
 8007b66:	dc04      	bgt.n	8007b72 <__swbuf_r+0x42>
 8007b68:	4621      	mov	r1, r4
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f000 f938 	bl	8007de0 <_fflush_r>
 8007b70:	bb30      	cbnz	r0, 8007bc0 <__swbuf_r+0x90>
 8007b72:	68a3      	ldr	r3, [r4, #8]
 8007b74:	3001      	adds	r0, #1
 8007b76:	3b01      	subs	r3, #1
 8007b78:	60a3      	str	r3, [r4, #8]
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	6022      	str	r2, [r4, #0]
 8007b80:	701e      	strb	r6, [r3, #0]
 8007b82:	6963      	ldr	r3, [r4, #20]
 8007b84:	4283      	cmp	r3, r0
 8007b86:	d004      	beq.n	8007b92 <__swbuf_r+0x62>
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	07db      	lsls	r3, r3, #31
 8007b8c:	d506      	bpl.n	8007b9c <__swbuf_r+0x6c>
 8007b8e:	2e0a      	cmp	r6, #10
 8007b90:	d104      	bne.n	8007b9c <__swbuf_r+0x6c>
 8007b92:	4621      	mov	r1, r4
 8007b94:	4628      	mov	r0, r5
 8007b96:	f000 f923 	bl	8007de0 <_fflush_r>
 8007b9a:	b988      	cbnz	r0, 8007bc0 <__swbuf_r+0x90>
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <__swbuf_r+0x9c>)
 8007ba2:	429c      	cmp	r4, r3
 8007ba4:	d101      	bne.n	8007baa <__swbuf_r+0x7a>
 8007ba6:	68ac      	ldr	r4, [r5, #8]
 8007ba8:	e7cf      	b.n	8007b4a <__swbuf_r+0x1a>
 8007baa:	4b09      	ldr	r3, [pc, #36]	; (8007bd0 <__swbuf_r+0xa0>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	bf08      	it	eq
 8007bb0:	68ec      	ldreq	r4, [r5, #12]
 8007bb2:	e7ca      	b.n	8007b4a <__swbuf_r+0x1a>
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 f81a 	bl	8007bf0 <__swsetup_r>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d0cb      	beq.n	8007b58 <__swbuf_r+0x28>
 8007bc0:	f04f 37ff 	mov.w	r7, #4294967295
 8007bc4:	e7ea      	b.n	8007b9c <__swbuf_r+0x6c>
 8007bc6:	bf00      	nop
 8007bc8:	0800870c 	.word	0x0800870c
 8007bcc:	0800872c 	.word	0x0800872c
 8007bd0:	080086ec 	.word	0x080086ec

08007bd4 <__ascii_wctomb>:
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	b141      	cbz	r1, 8007bec <__ascii_wctomb+0x18>
 8007bda:	2aff      	cmp	r2, #255	; 0xff
 8007bdc:	d904      	bls.n	8007be8 <__ascii_wctomb+0x14>
 8007bde:	228a      	movs	r2, #138	; 0x8a
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	4770      	bx	lr
 8007be8:	2001      	movs	r0, #1
 8007bea:	700a      	strb	r2, [r1, #0]
 8007bec:	4770      	bx	lr
	...

08007bf0 <__swsetup_r>:
 8007bf0:	4b32      	ldr	r3, [pc, #200]	; (8007cbc <__swsetup_r+0xcc>)
 8007bf2:	b570      	push	{r4, r5, r6, lr}
 8007bf4:	681d      	ldr	r5, [r3, #0]
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	b125      	cbz	r5, 8007c06 <__swsetup_r+0x16>
 8007bfc:	69ab      	ldr	r3, [r5, #24]
 8007bfe:	b913      	cbnz	r3, 8007c06 <__swsetup_r+0x16>
 8007c00:	4628      	mov	r0, r5
 8007c02:	f000 f981 	bl	8007f08 <__sinit>
 8007c06:	4b2e      	ldr	r3, [pc, #184]	; (8007cc0 <__swsetup_r+0xd0>)
 8007c08:	429c      	cmp	r4, r3
 8007c0a:	d10f      	bne.n	8007c2c <__swsetup_r+0x3c>
 8007c0c:	686c      	ldr	r4, [r5, #4]
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c14:	0719      	lsls	r1, r3, #28
 8007c16:	d42c      	bmi.n	8007c72 <__swsetup_r+0x82>
 8007c18:	06dd      	lsls	r5, r3, #27
 8007c1a:	d411      	bmi.n	8007c40 <__swsetup_r+0x50>
 8007c1c:	2309      	movs	r3, #9
 8007c1e:	6033      	str	r3, [r6, #0]
 8007c20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c24:	f04f 30ff 	mov.w	r0, #4294967295
 8007c28:	81a3      	strh	r3, [r4, #12]
 8007c2a:	e03e      	b.n	8007caa <__swsetup_r+0xba>
 8007c2c:	4b25      	ldr	r3, [pc, #148]	; (8007cc4 <__swsetup_r+0xd4>)
 8007c2e:	429c      	cmp	r4, r3
 8007c30:	d101      	bne.n	8007c36 <__swsetup_r+0x46>
 8007c32:	68ac      	ldr	r4, [r5, #8]
 8007c34:	e7eb      	b.n	8007c0e <__swsetup_r+0x1e>
 8007c36:	4b24      	ldr	r3, [pc, #144]	; (8007cc8 <__swsetup_r+0xd8>)
 8007c38:	429c      	cmp	r4, r3
 8007c3a:	bf08      	it	eq
 8007c3c:	68ec      	ldreq	r4, [r5, #12]
 8007c3e:	e7e6      	b.n	8007c0e <__swsetup_r+0x1e>
 8007c40:	0758      	lsls	r0, r3, #29
 8007c42:	d512      	bpl.n	8007c6a <__swsetup_r+0x7a>
 8007c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c46:	b141      	cbz	r1, 8007c5a <__swsetup_r+0x6a>
 8007c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c4c:	4299      	cmp	r1, r3
 8007c4e:	d002      	beq.n	8007c56 <__swsetup_r+0x66>
 8007c50:	4630      	mov	r0, r6
 8007c52:	f7ff fcdb 	bl	800760c <_free_r>
 8007c56:	2300      	movs	r3, #0
 8007c58:	6363      	str	r3, [r4, #52]	; 0x34
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c60:	81a3      	strh	r3, [r4, #12]
 8007c62:	2300      	movs	r3, #0
 8007c64:	6063      	str	r3, [r4, #4]
 8007c66:	6923      	ldr	r3, [r4, #16]
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	f043 0308 	orr.w	r3, r3, #8
 8007c70:	81a3      	strh	r3, [r4, #12]
 8007c72:	6923      	ldr	r3, [r4, #16]
 8007c74:	b94b      	cbnz	r3, 8007c8a <__swsetup_r+0x9a>
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c80:	d003      	beq.n	8007c8a <__swsetup_r+0x9a>
 8007c82:	4621      	mov	r1, r4
 8007c84:	4630      	mov	r0, r6
 8007c86:	f000 fa05 	bl	8008094 <__smakebuf_r>
 8007c8a:	89a0      	ldrh	r0, [r4, #12]
 8007c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c90:	f010 0301 	ands.w	r3, r0, #1
 8007c94:	d00a      	beq.n	8007cac <__swsetup_r+0xbc>
 8007c96:	2300      	movs	r3, #0
 8007c98:	60a3      	str	r3, [r4, #8]
 8007c9a:	6963      	ldr	r3, [r4, #20]
 8007c9c:	425b      	negs	r3, r3
 8007c9e:	61a3      	str	r3, [r4, #24]
 8007ca0:	6923      	ldr	r3, [r4, #16]
 8007ca2:	b943      	cbnz	r3, 8007cb6 <__swsetup_r+0xc6>
 8007ca4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ca8:	d1ba      	bne.n	8007c20 <__swsetup_r+0x30>
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	0781      	lsls	r1, r0, #30
 8007cae:	bf58      	it	pl
 8007cb0:	6963      	ldrpl	r3, [r4, #20]
 8007cb2:	60a3      	str	r3, [r4, #8]
 8007cb4:	e7f4      	b.n	8007ca0 <__swsetup_r+0xb0>
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	e7f7      	b.n	8007caa <__swsetup_r+0xba>
 8007cba:	bf00      	nop
 8007cbc:	20000020 	.word	0x20000020
 8007cc0:	0800870c 	.word	0x0800870c
 8007cc4:	0800872c 	.word	0x0800872c
 8007cc8:	080086ec 	.word	0x080086ec

08007ccc <abort>:
 8007ccc:	2006      	movs	r0, #6
 8007cce:	b508      	push	{r3, lr}
 8007cd0:	f000 fa48 	bl	8008164 <raise>
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	f7fa fa44 	bl	8002162 <_exit>
	...

08007cdc <__sflush_r>:
 8007cdc:	898a      	ldrh	r2, [r1, #12]
 8007cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	0710      	lsls	r0, r2, #28
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	d457      	bmi.n	8007d98 <__sflush_r+0xbc>
 8007ce8:	684b      	ldr	r3, [r1, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dc04      	bgt.n	8007cf8 <__sflush_r+0x1c>
 8007cee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	dc01      	bgt.n	8007cf8 <__sflush_r+0x1c>
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cfa:	2e00      	cmp	r6, #0
 8007cfc:	d0fa      	beq.n	8007cf4 <__sflush_r+0x18>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d04:	682f      	ldr	r7, [r5, #0]
 8007d06:	602b      	str	r3, [r5, #0]
 8007d08:	d032      	beq.n	8007d70 <__sflush_r+0x94>
 8007d0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	075a      	lsls	r2, r3, #29
 8007d10:	d505      	bpl.n	8007d1e <__sflush_r+0x42>
 8007d12:	6863      	ldr	r3, [r4, #4]
 8007d14:	1ac0      	subs	r0, r0, r3
 8007d16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d18:	b10b      	cbz	r3, 8007d1e <__sflush_r+0x42>
 8007d1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d1c:	1ac0      	subs	r0, r0, r3
 8007d1e:	2300      	movs	r3, #0
 8007d20:	4602      	mov	r2, r0
 8007d22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d24:	4628      	mov	r0, r5
 8007d26:	6a21      	ldr	r1, [r4, #32]
 8007d28:	47b0      	blx	r6
 8007d2a:	1c43      	adds	r3, r0, #1
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	d106      	bne.n	8007d3e <__sflush_r+0x62>
 8007d30:	6829      	ldr	r1, [r5, #0]
 8007d32:	291d      	cmp	r1, #29
 8007d34:	d82c      	bhi.n	8007d90 <__sflush_r+0xb4>
 8007d36:	4a29      	ldr	r2, [pc, #164]	; (8007ddc <__sflush_r+0x100>)
 8007d38:	40ca      	lsrs	r2, r1
 8007d3a:	07d6      	lsls	r6, r2, #31
 8007d3c:	d528      	bpl.n	8007d90 <__sflush_r+0xb4>
 8007d3e:	2200      	movs	r2, #0
 8007d40:	6062      	str	r2, [r4, #4]
 8007d42:	6922      	ldr	r2, [r4, #16]
 8007d44:	04d9      	lsls	r1, r3, #19
 8007d46:	6022      	str	r2, [r4, #0]
 8007d48:	d504      	bpl.n	8007d54 <__sflush_r+0x78>
 8007d4a:	1c42      	adds	r2, r0, #1
 8007d4c:	d101      	bne.n	8007d52 <__sflush_r+0x76>
 8007d4e:	682b      	ldr	r3, [r5, #0]
 8007d50:	b903      	cbnz	r3, 8007d54 <__sflush_r+0x78>
 8007d52:	6560      	str	r0, [r4, #84]	; 0x54
 8007d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d56:	602f      	str	r7, [r5, #0]
 8007d58:	2900      	cmp	r1, #0
 8007d5a:	d0cb      	beq.n	8007cf4 <__sflush_r+0x18>
 8007d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d60:	4299      	cmp	r1, r3
 8007d62:	d002      	beq.n	8007d6a <__sflush_r+0x8e>
 8007d64:	4628      	mov	r0, r5
 8007d66:	f7ff fc51 	bl	800760c <_free_r>
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	6360      	str	r0, [r4, #52]	; 0x34
 8007d6e:	e7c2      	b.n	8007cf6 <__sflush_r+0x1a>
 8007d70:	6a21      	ldr	r1, [r4, #32]
 8007d72:	2301      	movs	r3, #1
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b0      	blx	r6
 8007d78:	1c41      	adds	r1, r0, #1
 8007d7a:	d1c7      	bne.n	8007d0c <__sflush_r+0x30>
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0c4      	beq.n	8007d0c <__sflush_r+0x30>
 8007d82:	2b1d      	cmp	r3, #29
 8007d84:	d001      	beq.n	8007d8a <__sflush_r+0xae>
 8007d86:	2b16      	cmp	r3, #22
 8007d88:	d101      	bne.n	8007d8e <__sflush_r+0xb2>
 8007d8a:	602f      	str	r7, [r5, #0]
 8007d8c:	e7b2      	b.n	8007cf4 <__sflush_r+0x18>
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d94:	81a3      	strh	r3, [r4, #12]
 8007d96:	e7ae      	b.n	8007cf6 <__sflush_r+0x1a>
 8007d98:	690f      	ldr	r7, [r1, #16]
 8007d9a:	2f00      	cmp	r7, #0
 8007d9c:	d0aa      	beq.n	8007cf4 <__sflush_r+0x18>
 8007d9e:	0793      	lsls	r3, r2, #30
 8007da0:	bf18      	it	ne
 8007da2:	2300      	movne	r3, #0
 8007da4:	680e      	ldr	r6, [r1, #0]
 8007da6:	bf08      	it	eq
 8007da8:	694b      	ldreq	r3, [r1, #20]
 8007daa:	1bf6      	subs	r6, r6, r7
 8007dac:	600f      	str	r7, [r1, #0]
 8007dae:	608b      	str	r3, [r1, #8]
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	dd9f      	ble.n	8007cf4 <__sflush_r+0x18>
 8007db4:	4633      	mov	r3, r6
 8007db6:	463a      	mov	r2, r7
 8007db8:	4628      	mov	r0, r5
 8007dba:	6a21      	ldr	r1, [r4, #32]
 8007dbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007dc0:	47e0      	blx	ip
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	dc06      	bgt.n	8007dd4 <__sflush_r+0xf8>
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	e790      	b.n	8007cf6 <__sflush_r+0x1a>
 8007dd4:	4407      	add	r7, r0
 8007dd6:	1a36      	subs	r6, r6, r0
 8007dd8:	e7ea      	b.n	8007db0 <__sflush_r+0xd4>
 8007dda:	bf00      	nop
 8007ddc:	20400001 	.word	0x20400001

08007de0 <_fflush_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	690b      	ldr	r3, [r1, #16]
 8007de4:	4605      	mov	r5, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	b913      	cbnz	r3, 8007df0 <_fflush_r+0x10>
 8007dea:	2500      	movs	r5, #0
 8007dec:	4628      	mov	r0, r5
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	b118      	cbz	r0, 8007dfa <_fflush_r+0x1a>
 8007df2:	6983      	ldr	r3, [r0, #24]
 8007df4:	b90b      	cbnz	r3, 8007dfa <_fflush_r+0x1a>
 8007df6:	f000 f887 	bl	8007f08 <__sinit>
 8007dfa:	4b14      	ldr	r3, [pc, #80]	; (8007e4c <_fflush_r+0x6c>)
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	d11b      	bne.n	8007e38 <_fflush_r+0x58>
 8007e00:	686c      	ldr	r4, [r5, #4]
 8007e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0ef      	beq.n	8007dea <_fflush_r+0xa>
 8007e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e0c:	07d0      	lsls	r0, r2, #31
 8007e0e:	d404      	bmi.n	8007e1a <_fflush_r+0x3a>
 8007e10:	0599      	lsls	r1, r3, #22
 8007e12:	d402      	bmi.n	8007e1a <_fflush_r+0x3a>
 8007e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e16:	f000 f915 	bl	8008044 <__retarget_lock_acquire_recursive>
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	f7ff ff5d 	bl	8007cdc <__sflush_r>
 8007e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e24:	4605      	mov	r5, r0
 8007e26:	07da      	lsls	r2, r3, #31
 8007e28:	d4e0      	bmi.n	8007dec <_fflush_r+0xc>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	059b      	lsls	r3, r3, #22
 8007e2e:	d4dd      	bmi.n	8007dec <_fflush_r+0xc>
 8007e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e32:	f000 f908 	bl	8008046 <__retarget_lock_release_recursive>
 8007e36:	e7d9      	b.n	8007dec <_fflush_r+0xc>
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <_fflush_r+0x70>)
 8007e3a:	429c      	cmp	r4, r3
 8007e3c:	d101      	bne.n	8007e42 <_fflush_r+0x62>
 8007e3e:	68ac      	ldr	r4, [r5, #8]
 8007e40:	e7df      	b.n	8007e02 <_fflush_r+0x22>
 8007e42:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <_fflush_r+0x74>)
 8007e44:	429c      	cmp	r4, r3
 8007e46:	bf08      	it	eq
 8007e48:	68ec      	ldreq	r4, [r5, #12]
 8007e4a:	e7da      	b.n	8007e02 <_fflush_r+0x22>
 8007e4c:	0800870c 	.word	0x0800870c
 8007e50:	0800872c 	.word	0x0800872c
 8007e54:	080086ec 	.word	0x080086ec

08007e58 <std>:
 8007e58:	2300      	movs	r3, #0
 8007e5a:	b510      	push	{r4, lr}
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e66:	6083      	str	r3, [r0, #8]
 8007e68:	8181      	strh	r1, [r0, #12]
 8007e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e6c:	81c2      	strh	r2, [r0, #14]
 8007e6e:	6183      	str	r3, [r0, #24]
 8007e70:	4619      	mov	r1, r3
 8007e72:	2208      	movs	r2, #8
 8007e74:	305c      	adds	r0, #92	; 0x5c
 8007e76:	f7fd fd35 	bl	80058e4 <memset>
 8007e7a:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <std+0x38>)
 8007e7c:	6224      	str	r4, [r4, #32]
 8007e7e:	6263      	str	r3, [r4, #36]	; 0x24
 8007e80:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <std+0x3c>)
 8007e82:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e84:	4b04      	ldr	r3, [pc, #16]	; (8007e98 <std+0x40>)
 8007e86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e88:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <std+0x44>)
 8007e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e8c:	bd10      	pop	{r4, pc}
 8007e8e:	bf00      	nop
 8007e90:	0800819d 	.word	0x0800819d
 8007e94:	080081bf 	.word	0x080081bf
 8007e98:	080081f7 	.word	0x080081f7
 8007e9c:	0800821b 	.word	0x0800821b

08007ea0 <_cleanup_r>:
 8007ea0:	4901      	ldr	r1, [pc, #4]	; (8007ea8 <_cleanup_r+0x8>)
 8007ea2:	f000 b8af 	b.w	8008004 <_fwalk_reent>
 8007ea6:	bf00      	nop
 8007ea8:	08007de1 	.word	0x08007de1

08007eac <__sfmoreglue>:
 8007eac:	2268      	movs	r2, #104	; 0x68
 8007eae:	b570      	push	{r4, r5, r6, lr}
 8007eb0:	1e4d      	subs	r5, r1, #1
 8007eb2:	4355      	muls	r5, r2
 8007eb4:	460e      	mov	r6, r1
 8007eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eba:	f7ff fc0f 	bl	80076dc <_malloc_r>
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	b140      	cbz	r0, 8007ed4 <__sfmoreglue+0x28>
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ec8:	300c      	adds	r0, #12
 8007eca:	60a0      	str	r0, [r4, #8]
 8007ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ed0:	f7fd fd08 	bl	80058e4 <memset>
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}

08007ed8 <__sfp_lock_acquire>:
 8007ed8:	4801      	ldr	r0, [pc, #4]	; (8007ee0 <__sfp_lock_acquire+0x8>)
 8007eda:	f000 b8b3 	b.w	8008044 <__retarget_lock_acquire_recursive>
 8007ede:	bf00      	nop
 8007ee0:	2000058d 	.word	0x2000058d

08007ee4 <__sfp_lock_release>:
 8007ee4:	4801      	ldr	r0, [pc, #4]	; (8007eec <__sfp_lock_release+0x8>)
 8007ee6:	f000 b8ae 	b.w	8008046 <__retarget_lock_release_recursive>
 8007eea:	bf00      	nop
 8007eec:	2000058d 	.word	0x2000058d

08007ef0 <__sinit_lock_acquire>:
 8007ef0:	4801      	ldr	r0, [pc, #4]	; (8007ef8 <__sinit_lock_acquire+0x8>)
 8007ef2:	f000 b8a7 	b.w	8008044 <__retarget_lock_acquire_recursive>
 8007ef6:	bf00      	nop
 8007ef8:	2000058e 	.word	0x2000058e

08007efc <__sinit_lock_release>:
 8007efc:	4801      	ldr	r0, [pc, #4]	; (8007f04 <__sinit_lock_release+0x8>)
 8007efe:	f000 b8a2 	b.w	8008046 <__retarget_lock_release_recursive>
 8007f02:	bf00      	nop
 8007f04:	2000058e 	.word	0x2000058e

08007f08 <__sinit>:
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	f7ff fff0 	bl	8007ef0 <__sinit_lock_acquire>
 8007f10:	69a3      	ldr	r3, [r4, #24]
 8007f12:	b11b      	cbz	r3, 8007f1c <__sinit+0x14>
 8007f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f18:	f7ff bff0 	b.w	8007efc <__sinit_lock_release>
 8007f1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f20:	6523      	str	r3, [r4, #80]	; 0x50
 8007f22:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <__sinit+0x68>)
 8007f24:	4a13      	ldr	r2, [pc, #76]	; (8007f74 <__sinit+0x6c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f2a:	42a3      	cmp	r3, r4
 8007f2c:	bf08      	it	eq
 8007f2e:	2301      	moveq	r3, #1
 8007f30:	4620      	mov	r0, r4
 8007f32:	bf08      	it	eq
 8007f34:	61a3      	streq	r3, [r4, #24]
 8007f36:	f000 f81f 	bl	8007f78 <__sfp>
 8007f3a:	6060      	str	r0, [r4, #4]
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f000 f81b 	bl	8007f78 <__sfp>
 8007f42:	60a0      	str	r0, [r4, #8]
 8007f44:	4620      	mov	r0, r4
 8007f46:	f000 f817 	bl	8007f78 <__sfp>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2104      	movs	r1, #4
 8007f4e:	60e0      	str	r0, [r4, #12]
 8007f50:	6860      	ldr	r0, [r4, #4]
 8007f52:	f7ff ff81 	bl	8007e58 <std>
 8007f56:	2201      	movs	r2, #1
 8007f58:	2109      	movs	r1, #9
 8007f5a:	68a0      	ldr	r0, [r4, #8]
 8007f5c:	f7ff ff7c 	bl	8007e58 <std>
 8007f60:	2202      	movs	r2, #2
 8007f62:	2112      	movs	r1, #18
 8007f64:	68e0      	ldr	r0, [r4, #12]
 8007f66:	f7ff ff77 	bl	8007e58 <std>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	61a3      	str	r3, [r4, #24]
 8007f6e:	e7d1      	b.n	8007f14 <__sinit+0xc>
 8007f70:	08008370 	.word	0x08008370
 8007f74:	08007ea1 	.word	0x08007ea1

08007f78 <__sfp>:
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	4607      	mov	r7, r0
 8007f7c:	f7ff ffac 	bl	8007ed8 <__sfp_lock_acquire>
 8007f80:	4b1e      	ldr	r3, [pc, #120]	; (8007ffc <__sfp+0x84>)
 8007f82:	681e      	ldr	r6, [r3, #0]
 8007f84:	69b3      	ldr	r3, [r6, #24]
 8007f86:	b913      	cbnz	r3, 8007f8e <__sfp+0x16>
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f7ff ffbd 	bl	8007f08 <__sinit>
 8007f8e:	3648      	adds	r6, #72	; 0x48
 8007f90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	d503      	bpl.n	8007fa0 <__sfp+0x28>
 8007f98:	6833      	ldr	r3, [r6, #0]
 8007f9a:	b30b      	cbz	r3, 8007fe0 <__sfp+0x68>
 8007f9c:	6836      	ldr	r6, [r6, #0]
 8007f9e:	e7f7      	b.n	8007f90 <__sfp+0x18>
 8007fa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fa4:	b9d5      	cbnz	r5, 8007fdc <__sfp+0x64>
 8007fa6:	4b16      	ldr	r3, [pc, #88]	; (8008000 <__sfp+0x88>)
 8007fa8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fac:	60e3      	str	r3, [r4, #12]
 8007fae:	6665      	str	r5, [r4, #100]	; 0x64
 8007fb0:	f000 f847 	bl	8008042 <__retarget_lock_init_recursive>
 8007fb4:	f7ff ff96 	bl	8007ee4 <__sfp_lock_release>
 8007fb8:	2208      	movs	r2, #8
 8007fba:	4629      	mov	r1, r5
 8007fbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fc4:	6025      	str	r5, [r4, #0]
 8007fc6:	61a5      	str	r5, [r4, #24]
 8007fc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fcc:	f7fd fc8a 	bl	80058e4 <memset>
 8007fd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fd8:	4620      	mov	r0, r4
 8007fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fdc:	3468      	adds	r4, #104	; 0x68
 8007fde:	e7d9      	b.n	8007f94 <__sfp+0x1c>
 8007fe0:	2104      	movs	r1, #4
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	f7ff ff62 	bl	8007eac <__sfmoreglue>
 8007fe8:	4604      	mov	r4, r0
 8007fea:	6030      	str	r0, [r6, #0]
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d1d5      	bne.n	8007f9c <__sfp+0x24>
 8007ff0:	f7ff ff78 	bl	8007ee4 <__sfp_lock_release>
 8007ff4:	230c      	movs	r3, #12
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	e7ee      	b.n	8007fd8 <__sfp+0x60>
 8007ffa:	bf00      	nop
 8007ffc:	08008370 	.word	0x08008370
 8008000:	ffff0001 	.word	0xffff0001

08008004 <_fwalk_reent>:
 8008004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008008:	4606      	mov	r6, r0
 800800a:	4688      	mov	r8, r1
 800800c:	2700      	movs	r7, #0
 800800e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008016:	f1b9 0901 	subs.w	r9, r9, #1
 800801a:	d505      	bpl.n	8008028 <_fwalk_reent+0x24>
 800801c:	6824      	ldr	r4, [r4, #0]
 800801e:	2c00      	cmp	r4, #0
 8008020:	d1f7      	bne.n	8008012 <_fwalk_reent+0xe>
 8008022:	4638      	mov	r0, r7
 8008024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008028:	89ab      	ldrh	r3, [r5, #12]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d907      	bls.n	800803e <_fwalk_reent+0x3a>
 800802e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008032:	3301      	adds	r3, #1
 8008034:	d003      	beq.n	800803e <_fwalk_reent+0x3a>
 8008036:	4629      	mov	r1, r5
 8008038:	4630      	mov	r0, r6
 800803a:	47c0      	blx	r8
 800803c:	4307      	orrs	r7, r0
 800803e:	3568      	adds	r5, #104	; 0x68
 8008040:	e7e9      	b.n	8008016 <_fwalk_reent+0x12>

08008042 <__retarget_lock_init_recursive>:
 8008042:	4770      	bx	lr

08008044 <__retarget_lock_acquire_recursive>:
 8008044:	4770      	bx	lr

08008046 <__retarget_lock_release_recursive>:
 8008046:	4770      	bx	lr

08008048 <__swhatbuf_r>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	460e      	mov	r6, r1
 800804c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008050:	4614      	mov	r4, r2
 8008052:	2900      	cmp	r1, #0
 8008054:	461d      	mov	r5, r3
 8008056:	b096      	sub	sp, #88	; 0x58
 8008058:	da08      	bge.n	800806c <__swhatbuf_r+0x24>
 800805a:	2200      	movs	r2, #0
 800805c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008060:	602a      	str	r2, [r5, #0]
 8008062:	061a      	lsls	r2, r3, #24
 8008064:	d410      	bmi.n	8008088 <__swhatbuf_r+0x40>
 8008066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800806a:	e00e      	b.n	800808a <__swhatbuf_r+0x42>
 800806c:	466a      	mov	r2, sp
 800806e:	f000 f8fb 	bl	8008268 <_fstat_r>
 8008072:	2800      	cmp	r0, #0
 8008074:	dbf1      	blt.n	800805a <__swhatbuf_r+0x12>
 8008076:	9a01      	ldr	r2, [sp, #4]
 8008078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800807c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008080:	425a      	negs	r2, r3
 8008082:	415a      	adcs	r2, r3
 8008084:	602a      	str	r2, [r5, #0]
 8008086:	e7ee      	b.n	8008066 <__swhatbuf_r+0x1e>
 8008088:	2340      	movs	r3, #64	; 0x40
 800808a:	2000      	movs	r0, #0
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	b016      	add	sp, #88	; 0x58
 8008090:	bd70      	pop	{r4, r5, r6, pc}
	...

08008094 <__smakebuf_r>:
 8008094:	898b      	ldrh	r3, [r1, #12]
 8008096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008098:	079d      	lsls	r5, r3, #30
 800809a:	4606      	mov	r6, r0
 800809c:	460c      	mov	r4, r1
 800809e:	d507      	bpl.n	80080b0 <__smakebuf_r+0x1c>
 80080a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	6123      	str	r3, [r4, #16]
 80080a8:	2301      	movs	r3, #1
 80080aa:	6163      	str	r3, [r4, #20]
 80080ac:	b002      	add	sp, #8
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	466a      	mov	r2, sp
 80080b2:	ab01      	add	r3, sp, #4
 80080b4:	f7ff ffc8 	bl	8008048 <__swhatbuf_r>
 80080b8:	9900      	ldr	r1, [sp, #0]
 80080ba:	4605      	mov	r5, r0
 80080bc:	4630      	mov	r0, r6
 80080be:	f7ff fb0d 	bl	80076dc <_malloc_r>
 80080c2:	b948      	cbnz	r0, 80080d8 <__smakebuf_r+0x44>
 80080c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c8:	059a      	lsls	r2, r3, #22
 80080ca:	d4ef      	bmi.n	80080ac <__smakebuf_r+0x18>
 80080cc:	f023 0303 	bic.w	r3, r3, #3
 80080d0:	f043 0302 	orr.w	r3, r3, #2
 80080d4:	81a3      	strh	r3, [r4, #12]
 80080d6:	e7e3      	b.n	80080a0 <__smakebuf_r+0xc>
 80080d8:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <__smakebuf_r+0x7c>)
 80080da:	62b3      	str	r3, [r6, #40]	; 0x28
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	6020      	str	r0, [r4, #0]
 80080e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e4:	81a3      	strh	r3, [r4, #12]
 80080e6:	9b00      	ldr	r3, [sp, #0]
 80080e8:	6120      	str	r0, [r4, #16]
 80080ea:	6163      	str	r3, [r4, #20]
 80080ec:	9b01      	ldr	r3, [sp, #4]
 80080ee:	b15b      	cbz	r3, 8008108 <__smakebuf_r+0x74>
 80080f0:	4630      	mov	r0, r6
 80080f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080f6:	f000 f8c9 	bl	800828c <_isatty_r>
 80080fa:	b128      	cbz	r0, 8008108 <__smakebuf_r+0x74>
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	f023 0303 	bic.w	r3, r3, #3
 8008102:	f043 0301 	orr.w	r3, r3, #1
 8008106:	81a3      	strh	r3, [r4, #12]
 8008108:	89a0      	ldrh	r0, [r4, #12]
 800810a:	4305      	orrs	r5, r0
 800810c:	81a5      	strh	r5, [r4, #12]
 800810e:	e7cd      	b.n	80080ac <__smakebuf_r+0x18>
 8008110:	08007ea1 	.word	0x08007ea1

08008114 <_raise_r>:
 8008114:	291f      	cmp	r1, #31
 8008116:	b538      	push	{r3, r4, r5, lr}
 8008118:	4604      	mov	r4, r0
 800811a:	460d      	mov	r5, r1
 800811c:	d904      	bls.n	8008128 <_raise_r+0x14>
 800811e:	2316      	movs	r3, #22
 8008120:	6003      	str	r3, [r0, #0]
 8008122:	f04f 30ff 	mov.w	r0, #4294967295
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800812a:	b112      	cbz	r2, 8008132 <_raise_r+0x1e>
 800812c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008130:	b94b      	cbnz	r3, 8008146 <_raise_r+0x32>
 8008132:	4620      	mov	r0, r4
 8008134:	f000 f830 	bl	8008198 <_getpid_r>
 8008138:	462a      	mov	r2, r5
 800813a:	4601      	mov	r1, r0
 800813c:	4620      	mov	r0, r4
 800813e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008142:	f000 b817 	b.w	8008174 <_kill_r>
 8008146:	2b01      	cmp	r3, #1
 8008148:	d00a      	beq.n	8008160 <_raise_r+0x4c>
 800814a:	1c59      	adds	r1, r3, #1
 800814c:	d103      	bne.n	8008156 <_raise_r+0x42>
 800814e:	2316      	movs	r3, #22
 8008150:	6003      	str	r3, [r0, #0]
 8008152:	2001      	movs	r0, #1
 8008154:	e7e7      	b.n	8008126 <_raise_r+0x12>
 8008156:	2400      	movs	r4, #0
 8008158:	4628      	mov	r0, r5
 800815a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800815e:	4798      	blx	r3
 8008160:	2000      	movs	r0, #0
 8008162:	e7e0      	b.n	8008126 <_raise_r+0x12>

08008164 <raise>:
 8008164:	4b02      	ldr	r3, [pc, #8]	; (8008170 <raise+0xc>)
 8008166:	4601      	mov	r1, r0
 8008168:	6818      	ldr	r0, [r3, #0]
 800816a:	f7ff bfd3 	b.w	8008114 <_raise_r>
 800816e:	bf00      	nop
 8008170:	20000020 	.word	0x20000020

08008174 <_kill_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	2300      	movs	r3, #0
 8008178:	4d06      	ldr	r5, [pc, #24]	; (8008194 <_kill_r+0x20>)
 800817a:	4604      	mov	r4, r0
 800817c:	4608      	mov	r0, r1
 800817e:	4611      	mov	r1, r2
 8008180:	602b      	str	r3, [r5, #0]
 8008182:	f7f9 ffde 	bl	8002142 <_kill>
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	d102      	bne.n	8008190 <_kill_r+0x1c>
 800818a:	682b      	ldr	r3, [r5, #0]
 800818c:	b103      	cbz	r3, 8008190 <_kill_r+0x1c>
 800818e:	6023      	str	r3, [r4, #0]
 8008190:	bd38      	pop	{r3, r4, r5, pc}
 8008192:	bf00      	nop
 8008194:	20000588 	.word	0x20000588

08008198 <_getpid_r>:
 8008198:	f7f9 bfcc 	b.w	8002134 <_getpid>

0800819c <__sread>:
 800819c:	b510      	push	{r4, lr}
 800819e:	460c      	mov	r4, r1
 80081a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a4:	f000 f894 	bl	80082d0 <_read_r>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	bfab      	itete	ge
 80081ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081ae:	89a3      	ldrhlt	r3, [r4, #12]
 80081b0:	181b      	addge	r3, r3, r0
 80081b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081b6:	bfac      	ite	ge
 80081b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80081ba:	81a3      	strhlt	r3, [r4, #12]
 80081bc:	bd10      	pop	{r4, pc}

080081be <__swrite>:
 80081be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c2:	461f      	mov	r7, r3
 80081c4:	898b      	ldrh	r3, [r1, #12]
 80081c6:	4605      	mov	r5, r0
 80081c8:	05db      	lsls	r3, r3, #23
 80081ca:	460c      	mov	r4, r1
 80081cc:	4616      	mov	r6, r2
 80081ce:	d505      	bpl.n	80081dc <__swrite+0x1e>
 80081d0:	2302      	movs	r3, #2
 80081d2:	2200      	movs	r2, #0
 80081d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d8:	f000 f868 	bl	80082ac <_lseek_r>
 80081dc:	89a3      	ldrh	r3, [r4, #12]
 80081de:	4632      	mov	r2, r6
 80081e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081e4:	81a3      	strh	r3, [r4, #12]
 80081e6:	4628      	mov	r0, r5
 80081e8:	463b      	mov	r3, r7
 80081ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081f2:	f000 b817 	b.w	8008224 <_write_r>

080081f6 <__sseek>:
 80081f6:	b510      	push	{r4, lr}
 80081f8:	460c      	mov	r4, r1
 80081fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fe:	f000 f855 	bl	80082ac <_lseek_r>
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	89a3      	ldrh	r3, [r4, #12]
 8008206:	bf15      	itete	ne
 8008208:	6560      	strne	r0, [r4, #84]	; 0x54
 800820a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800820e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008212:	81a3      	strheq	r3, [r4, #12]
 8008214:	bf18      	it	ne
 8008216:	81a3      	strhne	r3, [r4, #12]
 8008218:	bd10      	pop	{r4, pc}

0800821a <__sclose>:
 800821a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800821e:	f000 b813 	b.w	8008248 <_close_r>
	...

08008224 <_write_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4604      	mov	r4, r0
 8008228:	4608      	mov	r0, r1
 800822a:	4611      	mov	r1, r2
 800822c:	2200      	movs	r2, #0
 800822e:	4d05      	ldr	r5, [pc, #20]	; (8008244 <_write_r+0x20>)
 8008230:	602a      	str	r2, [r5, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	f7f9 ffbc 	bl	80021b0 <_write>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d102      	bne.n	8008242 <_write_r+0x1e>
 800823c:	682b      	ldr	r3, [r5, #0]
 800823e:	b103      	cbz	r3, 8008242 <_write_r+0x1e>
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	20000588 	.word	0x20000588

08008248 <_close_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	2300      	movs	r3, #0
 800824c:	4d05      	ldr	r5, [pc, #20]	; (8008264 <_close_r+0x1c>)
 800824e:	4604      	mov	r4, r0
 8008250:	4608      	mov	r0, r1
 8008252:	602b      	str	r3, [r5, #0]
 8008254:	f7f9 ffc8 	bl	80021e8 <_close>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_close_r+0x1a>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_close_r+0x1a>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	20000588 	.word	0x20000588

08008268 <_fstat_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	2300      	movs	r3, #0
 800826c:	4d06      	ldr	r5, [pc, #24]	; (8008288 <_fstat_r+0x20>)
 800826e:	4604      	mov	r4, r0
 8008270:	4608      	mov	r0, r1
 8008272:	4611      	mov	r1, r2
 8008274:	602b      	str	r3, [r5, #0]
 8008276:	f7f9 ffc2 	bl	80021fe <_fstat>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	d102      	bne.n	8008284 <_fstat_r+0x1c>
 800827e:	682b      	ldr	r3, [r5, #0]
 8008280:	b103      	cbz	r3, 8008284 <_fstat_r+0x1c>
 8008282:	6023      	str	r3, [r4, #0]
 8008284:	bd38      	pop	{r3, r4, r5, pc}
 8008286:	bf00      	nop
 8008288:	20000588 	.word	0x20000588

0800828c <_isatty_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	2300      	movs	r3, #0
 8008290:	4d05      	ldr	r5, [pc, #20]	; (80082a8 <_isatty_r+0x1c>)
 8008292:	4604      	mov	r4, r0
 8008294:	4608      	mov	r0, r1
 8008296:	602b      	str	r3, [r5, #0]
 8008298:	f7f9 ffc0 	bl	800221c <_isatty>
 800829c:	1c43      	adds	r3, r0, #1
 800829e:	d102      	bne.n	80082a6 <_isatty_r+0x1a>
 80082a0:	682b      	ldr	r3, [r5, #0]
 80082a2:	b103      	cbz	r3, 80082a6 <_isatty_r+0x1a>
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	bd38      	pop	{r3, r4, r5, pc}
 80082a8:	20000588 	.word	0x20000588

080082ac <_lseek_r>:
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	4611      	mov	r1, r2
 80082b4:	2200      	movs	r2, #0
 80082b6:	4d05      	ldr	r5, [pc, #20]	; (80082cc <_lseek_r+0x20>)
 80082b8:	602a      	str	r2, [r5, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	f7f9 ffb8 	bl	8002230 <_lseek>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_lseek_r+0x1e>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_lseek_r+0x1e>
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	20000588 	.word	0x20000588

080082d0 <_read_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	4611      	mov	r1, r2
 80082d8:	2200      	movs	r2, #0
 80082da:	4d05      	ldr	r5, [pc, #20]	; (80082f0 <_read_r+0x20>)
 80082dc:	602a      	str	r2, [r5, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	f7f9 ff49 	bl	8002176 <_read>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d102      	bne.n	80082ee <_read_r+0x1e>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	b103      	cbz	r3, 80082ee <_read_r+0x1e>
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	20000588 	.word	0x20000588

080082f4 <_init>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	bf00      	nop
 80082f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fa:	bc08      	pop	{r3}
 80082fc:	469e      	mov	lr, r3
 80082fe:	4770      	bx	lr

08008300 <_fini>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	bf00      	nop
 8008304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008306:	bc08      	pop	{r3}
 8008308:	469e      	mov	lr, r3
 800830a:	4770      	bx	lr
